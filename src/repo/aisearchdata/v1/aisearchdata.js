/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * aidata
 * 搜索数据相关接口
 *
 * OpenAPI spec version: v1
 * Contact:
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

require('../../../lib/node_loader')
var JDCloud = require('../../../lib/core')
var Service = JDCloud.Service
var serviceId = 'aisearchdata'
Service._services[serviceId] = true

/**
 * aisearchdata service.
 * @version 0.0.1
 */

class AISEARCHDATA extends Service {
  constructor (options = {}) {
    options._defaultEndpoint = {}
    options._defaultEndpoint.protocol =
      options._defaultEndpoint.protocol || 'https'
    options._defaultEndpoint.host =
      options._defaultEndpoint.host || 'aisearchdata.jdcloud-api.com'
    options.basePath = '/v1' // 默认要设为空""
    super(serviceId, options)
  }

  /**
      *  获取待爬取链接
      * @param {Object} opts - parameters
      * @param {string} [opts.crawlerId] - 自定义客户端名称  optional
      * @param {integer} [opts.count] - 获取链接数量， 默认为10  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param string data
      */

  fetchData (opts, callback) {
    opts = opts || {}

    let postBody = null
    let queryParams = {}
    if (opts.crawlerId !== undefined && opts.crawlerId !== null) {
      queryParams['crawlerId'] = opts.crawlerId
    }
    if (opts.count !== undefined && opts.count !== null) {
      queryParams['count'] = opts.count
    }

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  aisearchdata/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call fetchData with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/fetchData',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  推送爬取数据
      * @param {Object} opts - parameters
      * @param {} [opts.crawlerId] - 爬虫id  optional
      * @param {} [opts.taskId] - 任务id  optional
      * @param {} opts.title - 标题
      * @param {} opts.url - 链接
      * @param {} [opts.content] - 提取内容  optional
      * @param {} [opts.publish_time] - 发布时间  optional
      * @param {} [opts.category] - 分类 (分类长度不能超过64个字符)  optional
      * @param {} [opts.language] - 语言 (语言长度不能超过16个字符)  optional
      * @param {} [opts.author] - 作者  optional
      * @param {} [opts.location] - 位置  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param integer data  新增结果
      */

  pushData (opts, callback) {
    opts = opts || {}

    if (opts.title === undefined || opts.title === null) {
      throw new Error(
        "Missing the required parameter 'opts.title' when calling pushData"
      )
    }
    if (opts.url === undefined || opts.url === null) {
      throw new Error(
        "Missing the required parameter 'opts.url' when calling pushData"
      )
    }

    let postBody = {}
    if (opts.crawlerId !== undefined && opts.crawlerId !== null) {
      postBody['crawlerId'] = opts.crawlerId
    }
    if (opts.taskId !== undefined && opts.taskId !== null) {
      postBody['taskId'] = opts.taskId
    }
    if (opts.title !== undefined && opts.title !== null) {
      postBody['title'] = opts.title
    }
    if (opts.url !== undefined && opts.url !== null) {
      postBody['url'] = opts.url
    }
    if (opts.content !== undefined && opts.content !== null) {
      postBody['content'] = opts.content
    }
    if (opts.publish_time !== undefined && opts.publish_time !== null) {
      postBody['publish_time'] = opts.publish_time
    }
    if (opts.category !== undefined && opts.category !== null) {
      postBody['category'] = opts.category
    }
    if (opts.language !== undefined && opts.language !== null) {
      postBody['language'] = opts.language
    }
    if (opts.author !== undefined && opts.author !== null) {
      postBody['author'] = opts.author
    }
    if (opts.location !== undefined && opts.location !== null) {
      postBody['location'] = opts.location
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  aisearchdata/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call pushData with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/pushData',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }
}
module.exports = AISEARCHDATA
