/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JDCLOUD BILLING ResourceOrder Services API
 * 资源单管理API接口
 *
 * OpenAPI spec version: v1
 * Contact:
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

require('../../../lib/node_loader')
var JDCloud = require('../../../lib/core')
var Service = JDCloud.Service
var serviceId = 'billing'
Service._services[serviceId] = true

/**
 * billing service.
 * @version 0.4.0
 */

JDCloud.BILLING = class BILLING extends Service {
  constructor (options = {}) {
    options._defaultEndpoint = {}
    options._defaultEndpoint.protocol =
      options._defaultEndpoint.protocol || 'https'
    options._defaultEndpoint.host =
      options._defaultEndpoint.host || 'billing.jdcloud-api.com'
    options.basePath = '/v1' // 默认要设为空""
    super(serviceId, options)
  }

  /**
      *  查询资源账单，消费记录中的费用信息
      * @param {Object} opts - parameters
      * @param {string} opts.appCode - appCode
      * @param {string} opts.serviceCode - serviceCode
      * @param {integer} opts.payState - 支付状态
      * @param {integer} opts.timeType - 时间类型
      * @param {string} opts.startTime - 开始时间
      * @param {string} opts.endTime - 结束时间
      * @param {integer} opts.queryType - 查询类型
      * @param {integer} opts.payType - 支付类型
      * @param {integer} opts.billingType - 计费类型
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param number totalFee  总金额
      * @param number cashPayFee  现金支付金额
      * @param number cashCouponPayFee  优惠券支付金额
      * @param number balancePayFee  余额支付金额
      * @param number arrearFee  欠费金额
      * @param number billFee  账单金额
      * @param number discountFee  折扣金额
      */

  queryBillStatisticsInfo (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  queryBillStatisticsInfo"
      )
    }

    opts = opts || {}

    if (opts.appCode === undefined || opts.appCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.appCode' when calling queryBillStatisticsInfo"
      )
    }
    if (opts.serviceCode === undefined || opts.serviceCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.serviceCode' when calling queryBillStatisticsInfo"
      )
    }
    if (opts.payState === undefined || opts.payState === null) {
      throw new Error(
        "Missing the required parameter 'opts.payState' when calling queryBillStatisticsInfo"
      )
    }
    if (opts.timeType === undefined || opts.timeType === null) {
      throw new Error(
        "Missing the required parameter 'opts.timeType' when calling queryBillStatisticsInfo"
      )
    }
    if (opts.startTime === undefined || opts.startTime === null) {
      throw new Error(
        "Missing the required parameter 'opts.startTime' when calling queryBillStatisticsInfo"
      )
    }
    if (opts.endTime === undefined || opts.endTime === null) {
      throw new Error(
        "Missing the required parameter 'opts.endTime' when calling queryBillStatisticsInfo"
      )
    }
    if (opts.queryType === undefined || opts.queryType === null) {
      throw new Error(
        "Missing the required parameter 'opts.queryType' when calling queryBillStatisticsInfo"
      )
    }
    if (opts.payType === undefined || opts.payType === null) {
      throw new Error(
        "Missing the required parameter 'opts.payType' when calling queryBillStatisticsInfo"
      )
    }
    if (opts.billingType === undefined || opts.billingType === null) {
      throw new Error(
        "Missing the required parameter 'opts.billingType' when calling queryBillStatisticsInfo"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.appCode !== undefined && opts.appCode !== null) {
      queryParams['appCode'] = opts.appCode
    }
    if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
      queryParams['serviceCode'] = opts.serviceCode
    }
    if (opts.payState !== undefined && opts.payState !== null) {
      queryParams['payState'] = opts.payState
    }
    if (opts.timeType !== undefined && opts.timeType !== null) {
      queryParams['timeType'] = opts.timeType
    }
    if (opts.startTime !== undefined && opts.startTime !== null) {
      queryParams['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      queryParams['endTime'] = opts.endTime
    }
    if (opts.queryType !== undefined && opts.queryType !== null) {
      queryParams['queryType'] = opts.queryType
    }
    if (opts.payType !== undefined && opts.payType !== null) {
      queryParams['payType'] = opts.payType
    }
    if (opts.billingType !== undefined && opts.billingType !== null) {
      queryParams['billingType'] = opts.billingType
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  billing/0.4.0'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call queryBillStatisticsInfo with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/billStatisticsInfo',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询消费总览
      * @param {Object} opts - parameters
      * @param {integer} opts.timeType
      * @param {string} opts.startTime
      * @param {string} opts.endTime
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string pin
      * @param string startTime
      * @param string endTime
      * @param number actualFee
      * @param number cashPayFee
      * @param number balancePayFee
      * @param number cashCouponPayFee
      * @param number arrearFee
      * @param consumptionProduct consumptionProductVoList
      * @param object consumptionList
      */

  queryConsumptionOverView (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  queryConsumptionOverView"
      )
    }

    opts = opts || {}

    if (opts.timeType === undefined || opts.timeType === null) {
      throw new Error(
        "Missing the required parameter 'opts.timeType' when calling queryConsumptionOverView"
      )
    }
    if (opts.startTime === undefined || opts.startTime === null) {
      throw new Error(
        "Missing the required parameter 'opts.startTime' when calling queryConsumptionOverView"
      )
    }
    if (opts.endTime === undefined || opts.endTime === null) {
      throw new Error(
        "Missing the required parameter 'opts.endTime' when calling queryConsumptionOverView"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.timeType !== undefined && opts.timeType !== null) {
      queryParams['timeType'] = opts.timeType
    }
    if (opts.startTime !== undefined && opts.startTime !== null) {
      queryParams['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      queryParams['endTime'] = opts.endTime
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  billing/0.4.0'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call queryConsumptionOverView with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/consumeOverView',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询资源账单列表
      * @param {Object} opts - parameters
      * @param {integer} [opts.queryType] - 查询类别   1：资源账单   2：消费记录  optional
      * @param {string} [opts.appCode] - appCode  optional
      * @param {string} [opts.serviceCode] - serviceCode  optional
      * @param {integer} [opts.billingType] - billingType  optional
      * @param {integer} [opts.payType] - payType  optional
      * @param {integer} [opts.payState] - payState  optional
      * @param {integer} [opts.timeType] - timeType  optional
      * @param {string} [opts.startTime] - startTime  optional
      * @param {string} [opts.endTime] - endTime  optional
      * @param {integer} [opts.ignoreZero] - ignoreZero  optional
      * @param {string} [opts.resourceId] - resourceId  optional
      * @param {integer} [opts.site] - site  optional
      * @param {integer} [opts.role] - role  optional
      * @param {string} [opts.region] - region  optional
      * @param {integer} [opts.pageIndex] - pageIndex  optional
      * @param {integer} [opts.pageSize] - pageSize  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param pagination pagination
      * @param resourceBillQueryResultItem result
      */

  queryResourceBills (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  queryResourceBills"
      )
    }

    opts = opts || {}

    let postBody = {}
    if (opts.queryType !== undefined && opts.queryType !== null) {
      postBody['queryType'] = opts.queryType
    }
    if (opts.appCode !== undefined && opts.appCode !== null) {
      postBody['appCode'] = opts.appCode
    }
    if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
      postBody['serviceCode'] = opts.serviceCode
    }
    if (opts.billingType !== undefined && opts.billingType !== null) {
      postBody['billingType'] = opts.billingType
    }
    if (opts.payType !== undefined && opts.payType !== null) {
      postBody['payType'] = opts.payType
    }
    if (opts.payState !== undefined && opts.payState !== null) {
      postBody['payState'] = opts.payState
    }
    if (opts.timeType !== undefined && opts.timeType !== null) {
      postBody['timeType'] = opts.timeType
    }
    if (opts.startTime !== undefined && opts.startTime !== null) {
      postBody['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      postBody['endTime'] = opts.endTime
    }
    if (opts.ignoreZero !== undefined && opts.ignoreZero !== null) {
      postBody['ignoreZero'] = opts.ignoreZero
    }
    if (opts.resourceId !== undefined && opts.resourceId !== null) {
      postBody['resourceId'] = opts.resourceId
    }
    if (opts.site !== undefined && opts.site !== null) {
      postBody['site'] = opts.site
    }
    if (opts.role !== undefined && opts.role !== null) {
      postBody['role'] = opts.role
    }
    if (opts.region !== undefined && opts.region !== null) {
      postBody['region'] = opts.region
    }
    if (opts.pageIndex !== undefined && opts.pageIndex !== null) {
      postBody['pageIndex'] = opts.pageIndex
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  billing/0.4.0'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call queryResourceBills with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/resourceBills',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询资源账单详情
      * @param {Object} opts - parameters
      * @param {string} opts.resourceId
      * @param {integer} [opts.queryType]   optional
      * @param {string} [opts.appCode]   optional
      * @param {string} [opts.serviceCode]   optional
      * @param {integer} [opts.billingType]   optional
      * @param {integer} [opts.payType]   optional
      * @param {integer} [opts.payState]   optional
      * @param {integer} [opts.timeType]   optional
      * @param {string} [opts.startTime]   optional
      * @param {string} [opts.endTime]   optional
      * @param {integer} [opts.ignoreZero]   optional
      * @param {integer} [opts.site]   optional
      * @param {integer} [opts.role]   optional
      * @param {string} [opts.region]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param pagination pagination
      * @param consumeRecord result
      */

  queryConsumeRecords (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  queryConsumeRecords"
      )
    }

    opts = opts || {}

    if (opts.resourceId === undefined || opts.resourceId === null) {
      throw new Error(
        "Missing the required parameter 'opts.resourceId' when calling queryConsumeRecords"
      )
    }

    let postBody = {}
    if (opts.queryType !== undefined && opts.queryType !== null) {
      postBody['queryType'] = opts.queryType
    }
    if (opts.appCode !== undefined && opts.appCode !== null) {
      postBody['appCode'] = opts.appCode
    }
    if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
      postBody['serviceCode'] = opts.serviceCode
    }
    if (opts.billingType !== undefined && opts.billingType !== null) {
      postBody['billingType'] = opts.billingType
    }
    if (opts.payType !== undefined && opts.payType !== null) {
      postBody['payType'] = opts.payType
    }
    if (opts.payState !== undefined && opts.payState !== null) {
      postBody['payState'] = opts.payState
    }
    if (opts.timeType !== undefined && opts.timeType !== null) {
      postBody['timeType'] = opts.timeType
    }
    if (opts.startTime !== undefined && opts.startTime !== null) {
      postBody['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      postBody['endTime'] = opts.endTime
    }
    if (opts.ignoreZero !== undefined && opts.ignoreZero !== null) {
      postBody['ignoreZero'] = opts.ignoreZero
    }
    if (opts.site !== undefined && opts.site !== null) {
      postBody['site'] = opts.site
    }
    if (opts.role !== undefined && opts.role !== null) {
      postBody['role'] = opts.role
    }
    if (opts.region !== undefined && opts.region !== null) {
      postBody['region'] = opts.region
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      resourceId: opts.resourceId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  billing/0.4.0'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call queryConsumeRecords with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/resourceBills/{resourceId}',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询用于在账单展示的资源名称信息
      * @param {Object} opts - parameters
      * @param {string} opts.resourceId
      * @param {string} [opts.region]   optional
      * @param {string} [opts.serviceCode]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string resourceName
      */

  getResourceName (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  getResourceName"
      )
    }

    opts = opts || {}

    if (opts.resourceId === undefined || opts.resourceId === null) {
      throw new Error(
        "Missing the required parameter 'opts.resourceId' when calling getResourceName"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.region !== undefined && opts.region !== null) {
      queryParams['region'] = opts.region
    }
    if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
      queryParams['serviceCode'] = opts.serviceCode
    }

    let pathParams = {
      regionId: regionId,
      resourceId: opts.resourceId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  billing/0.4.0'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call getResourceName with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/resourceOrder/{resourceId}/resourceName',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询消费记录列表
      * @param {Object} opts - parameters
      * @param {integer} [opts.queryType]   optional
      * @param {string} [opts.appCode]   optional
      * @param {string} [opts.serviceCode]   optional
      * @param {integer} [opts.billingType]   optional
      * @param {integer} [opts.payType]   optional
      * @param {integer} [opts.payState]   optional
      * @param {integer} [opts.timeType]   optional
      * @param {string} [opts.startTime]   optional
      * @param {string} [opts.endTime]   optional
      * @param {integer} [opts.ignoreZero]   optional
      * @param {string} [opts.resourceId]   optional
      * @param {integer} [opts.site]   optional
      * @param {integer} [opts.role]   optional
      * @param {string} [opts.region]   optional
      * @param {integer} [opts.pageIndex]   optional
      * @param {integer} [opts.pageSize]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param pagination pagination
      * @param consumeBillQueryResultItem result
      */

  queryConsumeBills (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  queryConsumeBills"
      )
    }

    opts = opts || {}

    let postBody = {}
    if (opts.queryType !== undefined && opts.queryType !== null) {
      postBody['queryType'] = opts.queryType
    }
    if (opts.appCode !== undefined && opts.appCode !== null) {
      postBody['appCode'] = opts.appCode
    }
    if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
      postBody['serviceCode'] = opts.serviceCode
    }
    if (opts.billingType !== undefined && opts.billingType !== null) {
      postBody['billingType'] = opts.billingType
    }
    if (opts.payType !== undefined && opts.payType !== null) {
      postBody['payType'] = opts.payType
    }
    if (opts.payState !== undefined && opts.payState !== null) {
      postBody['payState'] = opts.payState
    }
    if (opts.timeType !== undefined && opts.timeType !== null) {
      postBody['timeType'] = opts.timeType
    }
    if (opts.startTime !== undefined && opts.startTime !== null) {
      postBody['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      postBody['endTime'] = opts.endTime
    }
    if (opts.ignoreZero !== undefined && opts.ignoreZero !== null) {
      postBody['ignoreZero'] = opts.ignoreZero
    }
    if (opts.resourceId !== undefined && opts.resourceId !== null) {
      postBody['resourceId'] = opts.resourceId
    }
    if (opts.site !== undefined && opts.site !== null) {
      postBody['site'] = opts.site
    }
    if (opts.role !== undefined && opts.role !== null) {
      postBody['role'] = opts.role
    }
    if (opts.region !== undefined && opts.region !== null) {
      postBody['region'] = opts.region
    }
    if (opts.pageIndex !== undefined && opts.pageIndex !== null) {
      postBody['pageIndex'] = opts.pageIndex
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  billing/0.4.0'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call queryConsumeBills with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/consumeBills',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询消费记录详情
      * @param {Object} opts - parameters
      * @param {number} opts.billId
      * @param {integer} [opts.systemType]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param number billId
      * @param string pin
      * @param integer site
      * @param string region
      * @param string appCode
      * @param string appCodeName
      * @param string serviceCode
      * @param string serviceCodeName
      * @param string resourceId
      * @param integer billingType
      * @param string billingTypeName
      * @param string formula
      * @param string formulaStr
      * @param string startTime
      * @param string endTime
      * @param string createTime
      * @param number billFee
      * @param number billFee2
      * @param number discountFee
      * @param string couponId
      * @param number couponFee
      * @param number actualFee
      * @param number cashCouponFee
      * @param number balancePayFee
      * @param number cashPayFee
      * @param number arrearFee
      * @param integer paySate
      * @param integer systemType
      * @param string resourceName
      */

  getBillDetail (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  getBillDetail"
      )
    }

    opts = opts || {}

    if (opts.billId === undefined || opts.billId === null) {
      throw new Error(
        "Missing the required parameter 'opts.billId' when calling getBillDetail"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.systemType !== undefined && opts.systemType !== null) {
      queryParams['systemType'] = opts.systemType
    }

    let pathParams = {
      regionId: regionId,
      billId: opts.billId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  billing/0.4.0'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call getBillDetail with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/consumeBills/{billId}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询消费统计信息
      * @param {Object} opts - parameters
      * @param {integer} [opts.queryType] - 查询类别   1：资源账单   2：消费记录  optional
      * @param {string} [opts.pin] - 用户pin  optional
      * @param {string} [opts.appCode] - 应用码  optional
      * @param {string} [opts.serviceCode] - 服务码  optional
      * @param {integer} [opts.billingType] - 付费类型  optional
      * @param {integer} [opts.payType] - 付费类型  optional
      * @param {integer} [opts.payState] - 付费状态  optional
      * @param {integer} [opts.timeType] - 1: 按账期 2：按消费时间  optional
      * @param {string} [opts.startTime] - 开始时间  optional
      * @param {string} [opts.endTime] - 结束时间  optional
      * @param {integer} [opts.ignoreZero]   optional
      * @param {string} [opts.resourceId] - 资源ID  optional
      * @param {integer} [opts.site] - 站点  optional
      * @param {integer} [opts.role] - 角色  optional
      * @param {string} [opts.region] - 区域  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param billStatisticsInfoVo billStatisticsInfoVo
      */

  adminQueryBillStatisticsInfo (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  adminQueryBillStatisticsInfo"
      )
    }

    opts = opts || {}

    let postBody = {}
    if (opts.queryType !== undefined && opts.queryType !== null) {
      postBody['queryType'] = opts.queryType
    }
    if (opts.pin !== undefined && opts.pin !== null) {
      postBody['pin'] = opts.pin
    }
    if (opts.appCode !== undefined && opts.appCode !== null) {
      postBody['appCode'] = opts.appCode
    }
    if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
      postBody['serviceCode'] = opts.serviceCode
    }
    if (opts.billingType !== undefined && opts.billingType !== null) {
      postBody['billingType'] = opts.billingType
    }
    if (opts.payType !== undefined && opts.payType !== null) {
      postBody['payType'] = opts.payType
    }
    if (opts.payState !== undefined && opts.payState !== null) {
      postBody['payState'] = opts.payState
    }
    if (opts.timeType !== undefined && opts.timeType !== null) {
      postBody['timeType'] = opts.timeType
    }
    if (opts.startTime !== undefined && opts.startTime !== null) {
      postBody['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      postBody['endTime'] = opts.endTime
    }
    if (opts.ignoreZero !== undefined && opts.ignoreZero !== null) {
      postBody['ignoreZero'] = opts.ignoreZero
    }
    if (opts.resourceId !== undefined && opts.resourceId !== null) {
      postBody['resourceId'] = opts.resourceId
    }
    if (opts.site !== undefined && opts.site !== null) {
      postBody['site'] = opts.site
    }
    if (opts.role !== undefined && opts.role !== null) {
      postBody['role'] = opts.role
    }
    if (opts.region !== undefined && opts.region !== null) {
      postBody['region'] = opts.region
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  billing/0.4.0'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call adminQueryBillStatisticsInfo with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/accounting/adminQueryBillStatisticsInfo',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询用户是否欠费
      * @param {Object} opts - parameters
      * @param {string} [opts.pin]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param boolean result  结果
      */

  isArrear (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  isArrear"
      )
    }

    opts = opts || {}

    let postBody = null
    let queryParams = {}
    if (opts.pin !== undefined && opts.pin !== null) {
      queryParams['pin'] = opts.pin
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  billing/0.4.0'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call isArrear with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/isArrear',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询计费价格信息
      * @param {Object} opts - parameters
      * @param {integer} opts.cmd - 操作类型 1:创建 2:续费 3:升配 4:删除
      * @param {array} [opts.orderList] - 计算价格的订单  optional
      * @param {string} [opts.operateTime] - 操作时间，遵循ISO8601标准，使用UTC时间，格式为：YYYY-MM-DDTHH:mm:ssZ  optional
      * @param {string} [opts.promotionInfo] - 1:折扣（不需要传） 2:免费活动3:付费活动 4:推荐码 5:会员价 [{&quot;promotionType&quot;:1,&quot;activityCode&quot;:123},{&quot;promotionType&quot;:2,&quot;activityCode&quot;:}]  optional
      * @param {integer} [opts.clientType] - 客户端：1.PC端；2.移动端；  optional
      * @param {integer} opts.packageCount - 批量购买时数量
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param number totalPrice  订单折扣前总价
      * @param number totalPriceScale4  订单折扣前总价4位
      * @param number discountedTotalPrice  折扣后订单价格
      * @param number totalDiscount  总折扣金额
      * @param orderPriceDetail list
      * @param number totalOriginalPrice  订单原价 包年时 一年原价为12个月价格，totalPrice为10个月价格
      * @param string favorableInfos  参与优惠的明细
      * @param string remark  备注
      * @param string totalUnitPrice  各订单单价总和
      */

  calculateTotalPrice (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  calculateTotalPrice"
      )
    }

    opts = opts || {}

    if (opts.cmd === undefined || opts.cmd === null) {
      throw new Error(
        "Missing the required parameter 'opts.cmd' when calling calculateTotalPrice"
      )
    }
    if (opts.packageCount === undefined || opts.packageCount === null) {
      throw new Error(
        "Missing the required parameter 'opts.packageCount' when calling calculateTotalPrice"
      )
    }

    let postBody = {}
    if (opts.cmd !== undefined && opts.cmd !== null) {
      postBody['cmd'] = opts.cmd
    }
    if (opts.orderList !== undefined && opts.orderList !== null) {
      postBody['orderList'] = opts.orderList
    }
    if (opts.operateTime !== undefined && opts.operateTime !== null) {
      postBody['operateTime'] = opts.operateTime
    }
    if (opts.promotionInfo !== undefined && opts.promotionInfo !== null) {
      postBody['promotionInfo'] = opts.promotionInfo
    }
    if (opts.clientType !== undefined && opts.clientType !== null) {
      postBody['clientType'] = opts.clientType
    }
    if (opts.packageCount !== undefined && opts.packageCount !== null) {
      postBody['packageCount'] = opts.packageCount
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  billing/0.4.0'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call calculateTotalPrice with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/calculateTotalPrice',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  计算赔偿金额并发放代金券
      * @param {Object} opts - parameters
      * @param {string} opts.pin - 用户pin
      * @param {array} [opts.resourceIds] - 资源ID  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string pin  用户pin
      * @param number totalCompensateFee  计算总价
      * @param orderCompensateFeeVo resourceList
      */

  calculateCompensateFeeAndSendCoupons (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  calculateCompensateFeeAndSendCoupons"
      )
    }

    opts = opts || {}

    if (opts.pin === undefined || opts.pin === null) {
      throw new Error(
        "Missing the required parameter 'opts.pin' when calling calculateCompensateFeeAndSendCoupons"
      )
    }

    let postBody = {}
    if (opts.pin !== undefined && opts.pin !== null) {
      postBody['pin'] = opts.pin
    }
    if (opts.resourceIds !== undefined && opts.resourceIds !== null) {
      postBody['resourceIds'] = opts.resourceIds
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  billing/0.4.0'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call calculateCompensateFeeAndSendCoupons with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/price/calculateCompensateFeeAndSendCoupons',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除资源
      * @param {Object} opts - parameters
      * @param {integer} opts.cmd - 操作类型 4:删除
      * @param {array} [opts.orderList] - 资源单信息  optional
      * @param {integer} opts.operatorType - 操作者类型 0：用户 1：管理员（运营）
      * @param {string} opts.operatorName - 操作人 用户:用户pin 管理员:操作人erp
      * @param {string} [opts.operateTime] - 操作时间  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param boolean result  结果
      */

  sendResourceOrderStatusMessage (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  sendResourceOrderStatusMessage"
      )
    }

    opts = opts || {}

    if (opts.cmd === undefined || opts.cmd === null) {
      throw new Error(
        "Missing the required parameter 'opts.cmd' when calling sendResourceOrderStatusMessage"
      )
    }
    if (opts.operatorType === undefined || opts.operatorType === null) {
      throw new Error(
        "Missing the required parameter 'opts.operatorType' when calling sendResourceOrderStatusMessage"
      )
    }
    if (opts.operatorName === undefined || opts.operatorName === null) {
      throw new Error(
        "Missing the required parameter 'opts.operatorName' when calling sendResourceOrderStatusMessage"
      )
    }

    let postBody = {}
    if (opts.cmd !== undefined && opts.cmd !== null) {
      postBody['cmd'] = opts.cmd
    }
    if (opts.orderList !== undefined && opts.orderList !== null) {
      postBody['orderList'] = opts.orderList
    }
    if (opts.operatorType !== undefined && opts.operatorType !== null) {
      postBody['operatorType'] = opts.operatorType
    }
    if (opts.operatorName !== undefined && opts.operatorName !== null) {
      postBody['operatorName'] = opts.operatorName
    }
    if (opts.operateTime !== undefined && opts.operateTime !== null) {
      postBody['operateTime'] = opts.operateTime
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  billing/0.4.0'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call sendResourceOrderStatusMessage with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/sendResourceOrderStatusMessage',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询资源单列表
      * @param {Object} opts - parameters
      * @param {integer} [opts.id] - 主键id  optional
      * @param {string} [opts.pin] - 用户pin  optional
      * @param {string} [opts.resourceId] - 资源id  optional
      * @param {string} [opts.appCode] - appCode  optional
      * @param {array} [opts.serviceCodeList] - 产品码列表  optional
      * @param {string} [opts.region] - 地域  optional
      * @param {integer} [opts.networkOperator] - 网络类型 0: non-BGP, 1: BGP  optional
      * @param {integer} [opts.billingType] - 计费类型 1:按配置 2:按用量 3:包年包月  optional
      * @param {array} [opts.resourceIdList] - resourceIdList  optional
      * @param {integer} [opts.expireInDays] - &gt;0: 订单还有几天到期; &#x3D;&#x3D;0: 订单已经到期; &lt;0: 不管是否到期  optional
      * @param {integer} [opts.isOnTrial] - isOnTrial  optional
      * @param {integer} [opts.site] - 站点信息 0:中国 1:国际  optional
      * @param {integer} [opts.status] - 资源状态 1:正常 2:停服 3:删除  optional
      * @param {integer} [opts.billingStatus] - 计费状态 0:停止计费 1:计费中  optional
      * @param {integer} [opts.expiringInDays] - 1、内部计算，使用getExpiringOrderCount时使用，不用传值 默认为-1mybatis筛选时不会关注 2、selectResourceOrderForTask定时任务查询列表时使用，停服天数，必须大于0  optional
      * @param {array} [opts.billingTypeList] - billingTypeList  optional
      * @param {array} [opts.transactionNos] - 交易单号列表  optional
      * @param {array} [opts.opTypes]   optional
      * @param {string} [opts.startTime] - 开始时间  optional
      * @param {string} [opts.endTime] - 结束时间  optional
      * @param {string} [opts.serviceCode] - 服务编码  optional
      * @param {array} [opts.statusList] - statusList  optional
      * @param {array} [opts.excludeResources] - excludeResources  optional
      * @param {string} [opts.orderByClaus] - orderByClaus  optional
      * @param {string} [opts.node] - 专有云节点的code（节点云查询使用）  optional
      * @param {integer} [opts.departmentId] - 部门（节点云查询使用）  optional
      * @param {array} [opts.pinList]   optional
      * @param {integer} [opts.isSpecial] - 是否是专有云 1:是  其他不是  optional
      * @param {string} [opts.nodeCode] - 节点信息  optional
      * @param {integer} [opts.timeout] - 超时时间，暂时不用  optional
      * @param {integer} [opts.pageIndex] - 当前页序号  optional
      * @param {integer} [opts.pageSize] - 每页结果数量  optional
      * @param {integer} [opts.offset]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param pagination pagination
      * @param resourceOrderVo result
      */

  queryPageByCondition (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  queryPageByCondition"
      )
    }

    opts = opts || {}

    let postBody = {}
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }
    if (opts.pin !== undefined && opts.pin !== null) {
      postBody['pin'] = opts.pin
    }
    if (opts.resourceId !== undefined && opts.resourceId !== null) {
      postBody['resourceId'] = opts.resourceId
    }
    if (opts.appCode !== undefined && opts.appCode !== null) {
      postBody['appCode'] = opts.appCode
    }
    if (opts.serviceCodeList !== undefined && opts.serviceCodeList !== null) {
      postBody['serviceCodeList'] = opts.serviceCodeList
    }
    if (opts.region !== undefined && opts.region !== null) {
      postBody['region'] = opts.region
    }
    if (opts.networkOperator !== undefined && opts.networkOperator !== null) {
      postBody['networkOperator'] = opts.networkOperator
    }
    if (opts.billingType !== undefined && opts.billingType !== null) {
      postBody['billingType'] = opts.billingType
    }
    if (opts.resourceIdList !== undefined && opts.resourceIdList !== null) {
      postBody['resourceIdList'] = opts.resourceIdList
    }
    if (opts.expireInDays !== undefined && opts.expireInDays !== null) {
      postBody['expireInDays'] = opts.expireInDays
    }
    if (opts.isOnTrial !== undefined && opts.isOnTrial !== null) {
      postBody['isOnTrial'] = opts.isOnTrial
    }
    if (opts.site !== undefined && opts.site !== null) {
      postBody['site'] = opts.site
    }
    if (opts.status !== undefined && opts.status !== null) {
      postBody['status'] = opts.status
    }
    if (opts.billingStatus !== undefined && opts.billingStatus !== null) {
      postBody['billingStatus'] = opts.billingStatus
    }
    if (opts.expiringInDays !== undefined && opts.expiringInDays !== null) {
      postBody['expiringInDays'] = opts.expiringInDays
    }
    if (opts.billingTypeList !== undefined && opts.billingTypeList !== null) {
      postBody['billingTypeList'] = opts.billingTypeList
    }
    if (opts.transactionNos !== undefined && opts.transactionNos !== null) {
      postBody['transactionNos'] = opts.transactionNos
    }
    if (opts.opTypes !== undefined && opts.opTypes !== null) {
      postBody['opTypes'] = opts.opTypes
    }
    if (opts.startTime !== undefined && opts.startTime !== null) {
      postBody['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      postBody['endTime'] = opts.endTime
    }
    if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
      postBody['serviceCode'] = opts.serviceCode
    }
    if (opts.statusList !== undefined && opts.statusList !== null) {
      postBody['statusList'] = opts.statusList
    }
    if (opts.excludeResources !== undefined && opts.excludeResources !== null) {
      postBody['excludeResources'] = opts.excludeResources
    }
    if (opts.orderByClaus !== undefined && opts.orderByClaus !== null) {
      postBody['orderByClaus'] = opts.orderByClaus
    }
    if (opts.node !== undefined && opts.node !== null) {
      postBody['node'] = opts.node
    }
    if (opts.departmentId !== undefined && opts.departmentId !== null) {
      postBody['departmentId'] = opts.departmentId
    }
    if (opts.pinList !== undefined && opts.pinList !== null) {
      postBody['pinList'] = opts.pinList
    }
    if (opts.isSpecial !== undefined && opts.isSpecial !== null) {
      postBody['isSpecial'] = opts.isSpecial
    }
    if (opts.nodeCode !== undefined && opts.nodeCode !== null) {
      postBody['nodeCode'] = opts.nodeCode
    }
    if (opts.timeout !== undefined && opts.timeout !== null) {
      postBody['timeout'] = opts.timeout
    }
    if (opts.pageIndex !== undefined && opts.pageIndex !== null) {
      postBody['pageIndex'] = opts.pageIndex
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.offset !== undefined && opts.offset !== null) {
      postBody['offset'] = opts.offset
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  billing/0.4.0'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call queryPageByCondition with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/queryPageByCondition',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询资源单列表接口，不含已删除资源
      * @param {Object} opts - parameters
      * @param {integer} [opts.id] - 主键id  optional
      * @param {string} [opts.pin] - 用户pin  optional
      * @param {string} [opts.resourceId] - 资源id  optional
      * @param {string} [opts.appCode] - appCode  optional
      * @param {array} [opts.serviceCodeList] - 产品码列表  optional
      * @param {string} [opts.region] - 地域  optional
      * @param {integer} [opts.networkOperator] - 网络类型 0: non-BGP, 1: BGP  optional
      * @param {integer} [opts.billingType] - 计费类型 1:按配置 2:按用量 3:包年包月  optional
      * @param {array} [opts.resourceIdList] - resourceIdList  optional
      * @param {integer} [opts.expireInDays] - &gt;0: 订单还有几天到期; &#x3D;&#x3D;0: 订单已经到期; &lt;0: 不管是否到期  optional
      * @param {integer} [opts.isOnTrial] - isOnTrial  optional
      * @param {integer} [opts.site] - 站点信息 0:中国 1:国际  optional
      * @param {integer} [opts.status] - 资源状态 1:正常 2:停服 3:删除  optional
      * @param {integer} [opts.billingStatus] - 计费状态 0:停止计费 1:计费中  optional
      * @param {integer} [opts.expiringInDays] - 1、内部计算，使用getExpiringOrderCount时使用，不用传值 默认为-1mybatis筛选时不会关注 2、selectResourceOrderForTask定时任务查询列表时使用，停服天数，必须大于0  optional
      * @param {array} [opts.billingTypeList] - billingTypeList  optional
      * @param {array} [opts.transactionNos] - 交易单号列表  optional
      * @param {array} [opts.opTypes]   optional
      * @param {string} [opts.startTime] - 开始时间  optional
      * @param {string} [opts.endTime] - 结束时间  optional
      * @param {string} [opts.serviceCode] - 服务编码  optional
      * @param {array} [opts.statusList] - statusList  optional
      * @param {array} [opts.excludeResources] - excludeResources  optional
      * @param {string} [opts.orderByClaus] - orderByClaus  optional
      * @param {string} [opts.node] - 专有云节点的code（节点云查询使用）  optional
      * @param {integer} [opts.departmentId] - 部门（节点云查询使用）  optional
      * @param {array} [opts.pinList]   optional
      * @param {integer} [opts.isSpecial] - 是否是专有云 1:是  其他不是  optional
      * @param {string} [opts.nodeCode] - 节点信息  optional
      * @param {integer} [opts.timeout] - 超时时间，暂时不用  optional
      * @param {integer} [opts.pageIndex] - 当前页序号  optional
      * @param {integer} [opts.pageSize] - 每页结果数量  optional
      * @param {integer} [opts.offset]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param pagination pagination
      * @param resourceOrderVo result
      */

  getExpiringOrders (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  getExpiringOrders"
      )
    }

    opts = opts || {}

    let postBody = {}
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }
    if (opts.pin !== undefined && opts.pin !== null) {
      postBody['pin'] = opts.pin
    }
    if (opts.resourceId !== undefined && opts.resourceId !== null) {
      postBody['resourceId'] = opts.resourceId
    }
    if (opts.appCode !== undefined && opts.appCode !== null) {
      postBody['appCode'] = opts.appCode
    }
    if (opts.serviceCodeList !== undefined && opts.serviceCodeList !== null) {
      postBody['serviceCodeList'] = opts.serviceCodeList
    }
    if (opts.region !== undefined && opts.region !== null) {
      postBody['region'] = opts.region
    }
    if (opts.networkOperator !== undefined && opts.networkOperator !== null) {
      postBody['networkOperator'] = opts.networkOperator
    }
    if (opts.billingType !== undefined && opts.billingType !== null) {
      postBody['billingType'] = opts.billingType
    }
    if (opts.resourceIdList !== undefined && opts.resourceIdList !== null) {
      postBody['resourceIdList'] = opts.resourceIdList
    }
    if (opts.expireInDays !== undefined && opts.expireInDays !== null) {
      postBody['expireInDays'] = opts.expireInDays
    }
    if (opts.isOnTrial !== undefined && opts.isOnTrial !== null) {
      postBody['isOnTrial'] = opts.isOnTrial
    }
    if (opts.site !== undefined && opts.site !== null) {
      postBody['site'] = opts.site
    }
    if (opts.status !== undefined && opts.status !== null) {
      postBody['status'] = opts.status
    }
    if (opts.billingStatus !== undefined && opts.billingStatus !== null) {
      postBody['billingStatus'] = opts.billingStatus
    }
    if (opts.expiringInDays !== undefined && opts.expiringInDays !== null) {
      postBody['expiringInDays'] = opts.expiringInDays
    }
    if (opts.billingTypeList !== undefined && opts.billingTypeList !== null) {
      postBody['billingTypeList'] = opts.billingTypeList
    }
    if (opts.transactionNos !== undefined && opts.transactionNos !== null) {
      postBody['transactionNos'] = opts.transactionNos
    }
    if (opts.opTypes !== undefined && opts.opTypes !== null) {
      postBody['opTypes'] = opts.opTypes
    }
    if (opts.startTime !== undefined && opts.startTime !== null) {
      postBody['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      postBody['endTime'] = opts.endTime
    }
    if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
      postBody['serviceCode'] = opts.serviceCode
    }
    if (opts.statusList !== undefined && opts.statusList !== null) {
      postBody['statusList'] = opts.statusList
    }
    if (opts.excludeResources !== undefined && opts.excludeResources !== null) {
      postBody['excludeResources'] = opts.excludeResources
    }
    if (opts.orderByClaus !== undefined && opts.orderByClaus !== null) {
      postBody['orderByClaus'] = opts.orderByClaus
    }
    if (opts.node !== undefined && opts.node !== null) {
      postBody['node'] = opts.node
    }
    if (opts.departmentId !== undefined && opts.departmentId !== null) {
      postBody['departmentId'] = opts.departmentId
    }
    if (opts.pinList !== undefined && opts.pinList !== null) {
      postBody['pinList'] = opts.pinList
    }
    if (opts.isSpecial !== undefined && opts.isSpecial !== null) {
      postBody['isSpecial'] = opts.isSpecial
    }
    if (opts.nodeCode !== undefined && opts.nodeCode !== null) {
      postBody['nodeCode'] = opts.nodeCode
    }
    if (opts.timeout !== undefined && opts.timeout !== null) {
      postBody['timeout'] = opts.timeout
    }
    if (opts.pageIndex !== undefined && opts.pageIndex !== null) {
      postBody['pageIndex'] = opts.pageIndex
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.offset !== undefined && opts.offset !== null) {
      postBody['offset'] = opts.offset
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  billing/0.4.0'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call getExpiringOrders with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/getExpiringOrders',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }
}
module.exports = JDCloud.BILLING
