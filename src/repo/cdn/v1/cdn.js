/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JCloud Openapi For CDN
 * Openapi For JCLOUD cdn
 *
 * OpenAPI spec version: v1
 * Contact: pid-cdn@jd.com
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

require('../../../lib/node_loader');
var JDCloud = require('../../../lib/core');
var Service = JDCloud.Service;
var serviceId = "cdn"
Service._services[serviceId] = true;

/**
* cdn service.
* @version 0.7.8
*/

JDCloud.CDN= class CDN extends Service {
    constructor(options = {}) {
            options._defaultEndpoint = {};
            options._defaultEndpoint.protocol = options._defaultEndpoint.protocol || 'https';
            options._defaultEndpoint.host = options._defaultEndpoint.host || 'cdn.jdcloud-api.com';
            options.basePath = '/v1'; //默认要设为空""
            super( serviceId , options);
    }

      /**
      *  查询加速域名接口
      * @param {Object} opts - parameters
      * @param {string} [opts.keyWord] - 根据关键字进行模糊匹配  optional 
      * @param {integer} [opts.pageNumber] - pageNumber  optional 
      * @param {integer} [opts.pageSize] - pageSize  optional 
      * @param {string} [opts.status] - 根据域名状态查询, 可选值[offline, online, configuring, auditing, audit_reject]  optional 
      * @param {string} [opts.type] - type  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param integer totalCount  
      * @param integer pageSize  
      * @param integer pageNumber  
      * @param listDomainItem domains  
      */

    getDomainList(opts, callback){

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.keyWord !== undefined && opts.keyWord !== null) {
               queryParams['keyWord'] = opts.keyWord
           }
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
           if (opts.status !== undefined && opts.status !== null) {
               queryParams['status'] = opts.status
           }
           if (opts.type !== undefined && opts.type !== null) {
               queryParams['type'] = opts.type
           }

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.7.8',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call getDomainList with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/domain', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询加速域名详情
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名 
      * @param {string} callback - callback
      @return {Object} result
      * @param string domain  
      * @param string cname  
      * @param string archiveNo  
      * @param string type  
      * @param string created  
      * @param string modified  
      * @param string status  
      * @param string auditStatus  
      * @param string source  
      * @param string sourceType  
      * @param string backSourceType  
      * @param string httpType  
      * @param string certificate  
      * @param string rsaKey  
      * @param string jumpType  
      */

    getDomainDetail(opts, callback){

         opts = opts || {};

          if (opts.domain === undefined || opts.domain === null) {
               throw new Error('Missing the required parameter \'opts.domain\' when calling getDomainDetail');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'domain': opts.domain 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.7.8',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call getDomainDetail with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/domain/{domain}', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除加速域名
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名 
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteDomain(opts, callback){

         opts = opts || {};

          if (opts.domain === undefined || opts.domain === null) {
               throw new Error('Missing the required parameter \'opts.domain\' when calling deleteDomain');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'domain': opts.domain 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.7.8',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteDomain with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/domain/{domain}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  启动加速域名
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名 
      * @param {string} callback - callback
      @return {Object} result
      */

    startDomain(opts, callback){

         opts = opts || {};

          if (opts.domain === undefined || opts.domain === null) {
               throw new Error('Missing the required parameter \'opts.domain\' when calling startDomain');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'domain': opts.domain 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.7.8',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call startDomain with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/domain/{domain}:start', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  停止加速域名
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名 
      * @param {string} callback - callback
      @return {Object} result
      */

    stopDomain(opts, callback){

         opts = opts || {};

          if (opts.domain === undefined || opts.domain === null) {
               throw new Error('Missing the required parameter \'opts.domain\' when calling stopDomain');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'domain': opts.domain 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.7.8',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call stopDomain with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/domain/{domain}:stop', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询统计数据
      * @param {Object} opts - parameters
      * @param {} [opts.startTime] - 查询起始时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional 
      * @param {} [opts.endTime] - 查询截止时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional 
      * @param {} [opts.domain] - 需要查询的域名, 必须为用户pin下有权限的域名  optional 
      * @param {} [opts.subDomain] - 待查询的子域名  optional 
      * @param {} [opts.fields] - 需要查询的字段  optional 
      * @param {} [opts.area]   optional 
      * @param {} [opts.isp]   optional 
      * @param {} [opts.origin]   optional 
      * @param {} [opts.period] - 时间粒度，可选值:[oneMin,fiveMin,followTime],followTime只会返回一个汇总后的数据  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param string startTime  
      * @param string endTime  
      * @param string domain  
      * @param statisticsDataItem statistics  
      */

    queryStatisticsData(opts, callback){

         opts = opts || {};


         let postBody =   {
          };
           if (opts.startTime !== undefined && opts.startTime !== null) {
               postBody['startTime'] = opts.startTime
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               postBody['endTime'] = opts.endTime
           }
           if (opts.domain !== undefined && opts.domain !== null) {
               postBody['domain'] = opts.domain
           }
           if (opts.subDomain !== undefined && opts.subDomain !== null) {
               postBody['subDomain'] = opts.subDomain
           }
           if (opts.fields !== undefined && opts.fields !== null) {
               postBody['fields'] = opts.fields
           }
           if (opts.area !== undefined && opts.area !== null) {
               postBody['area'] = opts.area
           }
           if (opts.isp !== undefined && opts.isp !== null) {
               postBody['isp'] = opts.isp
           }
           if (opts.origin !== undefined && opts.origin !== null) {
               postBody['origin'] = opts.origin
           }
           if (opts.period !== undefined && opts.period !== null) {
               postBody['period'] = opts.period
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.7.8',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call queryStatisticsData with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/statistics', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  分地区及运营商查询统计数据
      * @param {Object} opts - parameters
      * @param {} [opts.startTime] - 查询起始时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional 
      * @param {} [opts.endTime] - 查询截止时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional 
      * @param {} [opts.domain] - 需要查询的域名, 必须为用户pin下有权限的域名  optional 
      * @param {} [opts.subDomain] - 待查询的子域名  optional 
      * @param {} [opts.fields] - 需要查询的字段  optional 
      * @param {} [opts.area]   optional 
      * @param {} [opts.isp]   optional 
      * @param {} [opts.origin]   optional 
      * @param {} [opts.period] - 时间粒度，可选值:[oneMin,fiveMin,followTime],followTime只会返回一个汇总后的数据  optional 
      * @param {} [opts.groupBy] - 分组依据  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param string startTime  
      * @param string endTime  
      * @param string domain  
      * @param statisticsWithAreaGroupDetail statistics  
      */

    queryStatisticsDataGroupByArea(opts, callback){

         opts = opts || {};


         let postBody =   {
          };
           if (opts.startTime !== undefined && opts.startTime !== null) {
               postBody['startTime'] = opts.startTime
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               postBody['endTime'] = opts.endTime
           }
           if (opts.domain !== undefined && opts.domain !== null) {
               postBody['domain'] = opts.domain
           }
           if (opts.subDomain !== undefined && opts.subDomain !== null) {
               postBody['subDomain'] = opts.subDomain
           }
           if (opts.fields !== undefined && opts.fields !== null) {
               postBody['fields'] = opts.fields
           }
           if (opts.area !== undefined && opts.area !== null) {
               postBody['area'] = opts.area
           }
           if (opts.isp !== undefined && opts.isp !== null) {
               postBody['isp'] = opts.isp
           }
           if (opts.origin !== undefined && opts.origin !== null) {
               postBody['origin'] = opts.origin
           }
           if (opts.period !== undefined && opts.period !== null) {
               postBody['period'] = opts.period
           }
           if (opts.groupBy !== undefined && opts.groupBy !== null) {
               postBody['groupBy'] = opts.groupBy
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.7.8',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call queryStatisticsDataGroupByArea with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/statistics:groupByArea', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询统计数据并进行汇总加和
      * @param {Object} opts - parameters
      * @param {} [opts.startTime] - 查询起始时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional 
      * @param {} [opts.endTime] - 查询截止时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional 
      * @param {} [opts.domain] - 需要查询的域名, 必须为用户pin下有权限的域名  optional 
      * @param {} [opts.subDomain] - 待查询的子域名  optional 
      * @param {} [opts.fields] - 需要查询的字段  optional 
      * @param {} [opts.area]   optional 
      * @param {} [opts.isp]   optional 
      * @param {} [opts.origin]   optional 
      * @param {} [opts.period] - 时间粒度，可选值:[oneMin,fiveMin,followTime],followTime只会返回一个汇总后的数据  optional 
      * @param {} [opts.groupBy] - 分组依据  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param string startTime  
      * @param string endTime  
      * @param string domain  
      * @param statisticsGroupSumDataItem statistics  
      */

    queryStatisticsDataGroupSum(opts, callback){

         opts = opts || {};


         let postBody =   {
          };
           if (opts.startTime !== undefined && opts.startTime !== null) {
               postBody['startTime'] = opts.startTime
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               postBody['endTime'] = opts.endTime
           }
           if (opts.domain !== undefined && opts.domain !== null) {
               postBody['domain'] = opts.domain
           }
           if (opts.subDomain !== undefined && opts.subDomain !== null) {
               postBody['subDomain'] = opts.subDomain
           }
           if (opts.fields !== undefined && opts.fields !== null) {
               postBody['fields'] = opts.fields
           }
           if (opts.area !== undefined && opts.area !== null) {
               postBody['area'] = opts.area
           }
           if (opts.isp !== undefined && opts.isp !== null) {
               postBody['isp'] = opts.isp
           }
           if (opts.origin !== undefined && opts.origin !== null) {
               postBody['origin'] = opts.origin
           }
           if (opts.period !== undefined && opts.period !== null) {
               postBody['period'] = opts.period
           }
           if (opts.groupBy !== undefined && opts.groupBy !== null) {
               postBody['groupBy'] = opts.groupBy
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.7.8',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call queryStatisticsDataGroupSum with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/statistics:groupSum', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询TOP IP
      * @param {Object} opts - parameters
      * @param {} [opts.startTime] - 查询起始时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional 
      * @param {} [opts.endTime] - 查询截止时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional 
      * @param {} [opts.domain] - 需要查询的域名, 必须为用户pin下有权限的域名  optional 
      * @param {} [opts.subDomain] - 待查询的子域名  optional 
      * @param {} [opts.size]   optional 
      * @param {} [opts.topBy] - 排序依据  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param string startTime  
      * @param string endTime  
      * @param string domain  
      * @param statisticsTopIpData ipData  
      */

    queryStatisticsTopIp(opts, callback){

         opts = opts || {};


         let postBody =   {
          };
           if (opts.startTime !== undefined && opts.startTime !== null) {
               postBody['startTime'] = opts.startTime
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               postBody['endTime'] = opts.endTime
           }
           if (opts.domain !== undefined && opts.domain !== null) {
               postBody['domain'] = opts.domain
           }
           if (opts.subDomain !== undefined && opts.subDomain !== null) {
               postBody['subDomain'] = opts.subDomain
           }
           if (opts.size !== undefined && opts.size !== null) {
               postBody['size'] = opts.size
           }
           if (opts.topBy !== undefined && opts.topBy !== null) {
               postBody['topBy'] = opts.topBy
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.7.8',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call queryStatisticsTopIp with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/statistics:topIp', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询TOP Url
      * @param {Object} opts - parameters
      * @param {} [opts.startTime] - 查询起始时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional 
      * @param {} [opts.endTime] - 查询截止时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional 
      * @param {} [opts.domain] - 需要查询的域名, 必须为用户pin下有权限的域名  optional 
      * @param {} [opts.subDomain] - 待查询的子域名  optional 
      * @param {} [opts.size]   optional 
      * @param {} [opts.topBy] - 排序依据  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param string startTime  
      * @param string endTime  
      * @param string domain  
      * @param statisticsTopUrlData urlData  
      */

    queryStatisticsTopUrl(opts, callback){

         opts = opts || {};


         let postBody =   {
          };
           if (opts.startTime !== undefined && opts.startTime !== null) {
               postBody['startTime'] = opts.startTime
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               postBody['endTime'] = opts.endTime
           }
           if (opts.domain !== undefined && opts.domain !== null) {
               postBody['domain'] = opts.domain
           }
           if (opts.subDomain !== undefined && opts.subDomain !== null) {
               postBody['subDomain'] = opts.subDomain
           }
           if (opts.size !== undefined && opts.size !== null) {
               postBody['size'] = opts.size
           }
           if (opts.topBy !== undefined && opts.topBy !== null) {
               postBody['topBy'] = opts.topBy
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.7.8',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call queryStatisticsTopUrl with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/statistics:topUrl', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

};
module.exports = JDCloud.CDN
