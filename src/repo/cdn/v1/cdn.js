/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * JCloud Openapi For CDN
 * Openapi For JCLOUD cdn
 *
 * OpenAPI spec version: v1
 * Contact: pid-cdn@jd.com
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

require('../../../lib/node_loader')
var JDCloud = require('../../../lib/core')
var Service = JDCloud.Service
var serviceId = 'cdn'
Service._services[serviceId] = true

/**
 * cdn service.
 * @version 0.8.3
 */

JDCloud.CDN = class CDN extends Service {
  constructor (options = {}) {
    options._defaultEndpoint = {}
    options._defaultEndpoint.protocol =
      options._defaultEndpoint.protocol || 'https'
    options._defaultEndpoint.host =
      options._defaultEndpoint.host || 'cdn.jdcloud-api.com'
    options.basePath = '/v1' // 默认要设为空""
    super(serviceId, options)
  }

  /**
      *  设置线上计费方式
      * @param {Object} opts - parameters
      * @param {string} callback - callback
      @return {Object} result
      * @param integer allType  计费方式,取值[0,1],0:日流量计费,1:日峰值带宽计费.
      * @param integer vip  vip(1:vip客户,0:普通客户)
      */

  queryOnlineBillingType (opts, callback) {
    opts = opts || {}

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryOnlineBillingType with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/onlineBillingType',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置线上计费方式
      * @param {Object} opts - parameters
      * @param {} [opts.allType] - 计费方式,取值[0,1],0:日流量计费,1:日峰值带宽计费.  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  setOnlineBillingType (opts, callback) {
    opts = opts || {}

    let postBody = {}
    if (opts.allType !== undefined && opts.allType !== null) {
      postBody['allType'] = opts.allType
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setOnlineBillingType with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/onlineBillingType',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查找地域运营商列表
      * @param {Object} opts - parameters
      * @param {string} callback - callback
      @return {Object} result
      * @param areaIspItem mainLand
      * @param areaIspItem overseas
      * @param areaIspItem isp
      */

  queryAreaIspList (opts, callback) {
    opts = opts || {}

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryAreaIspList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/console:areaIspList',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  预览证书
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.content]   optional
      * @param {string} callback - callback
      @return {Object} result
      * @param string sigAlgName
      * @param string issuer
      * @param string startDate
      * @param string endDate
      * @param string user
      * @param string sigHashAlgName
      */

  previewCertificate (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling previewCertificate"
      )
    }

    let postBody = {}
    if (opts.content !== undefined && opts.content !== null) {
      postBody['content'] = opts.content
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call previewCertificate with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/certificate',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询默认http header头部参数列表
      * @param {Object} opts - parameters
      * @param {string} callback - callback
      @return {Object} result
      * @param string reqDefaultHttpHeaderKey
      * @param string respDefaultHttpHeaderKey
      */

  queryDefaultHttpHeaderKey (opts, callback) {
    opts = opts || {}

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryDefaultHttpHeaderKey with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/defaultHttpHeaderKey',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询ip黑名单
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {string} callback - callback
      @return {Object} result
      * @param string domain
      * @param object ips
      * @param string status
      */

  queryIpBlackList (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling queryIpBlackList"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryIpBlackList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/ipBlackList',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置ip黑名单
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.ips] - ip黑名单,ips中url不能超过50条  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  setIpBlackList (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling setIpBlackList"
      )
    }

    let postBody = {}
    if (opts.ips !== undefined && opts.ips !== null) {
      postBody['ips'] = opts.ips
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setIpBlackList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/ipBlackList',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置ip黑名单状态
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.status] - ip黑名单状态取值[on,off]  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  operateIpBlackList (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling operateIpBlackList"
      )
    }

    let postBody = {}
    if (opts.status !== undefined && opts.status !== null) {
      postBody['status'] = opts.status
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call operateIpBlackList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/ipBlackList:operate',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加缓存规则
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.weight] - 此条配置的权重值, 取值范围为1-10,1最大  optional
      * @param {} [opts.ttl] - 缓存时间,单位秒  optional
      * @param {} [opts.contents] - 规则内容。其他类型只能以/或者.开头，如/a/b或.jpg  optional
      * @param {} [opts.cacheType] - 缓存方式：0、不缓存，1自定义  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param integer configId
      */

  createCacheRule (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling createCacheRule"
      )
    }

    let postBody = {}
    if (opts.weight !== undefined && opts.weight !== null) {
      postBody['weight'] = opts.weight
    }
    if (opts.ttl !== undefined && opts.ttl !== null) {
      postBody['ttl'] = opts.ttl
    }
    if (opts.contents !== undefined && opts.contents !== null) {
      postBody['contents'] = opts.contents
    }
    if (opts.cacheType !== undefined && opts.cacheType !== null) {
      postBody['cacheType'] = opts.cacheType
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call createCacheRule with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/cacheRule',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  修改缓存规则
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.weight] - 此条配置的权重值, 取值范围为1-10,1最大  optional
      * @param {} [opts.ttl] - 缓存时间,单位秒  optional
      * @param {} [opts.contents] - 规则内容。其他类型只能以/或者.开头，如/a/b或.jpg  optional
      * @param {} [opts.cacheType] - 缓存方式：0、不缓存，1自定义  optional
      * @param {} [opts.configId] - 配置id  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  updateCacheRule (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling updateCacheRule"
      )
    }

    let postBody = {}
    if (opts.weight !== undefined && opts.weight !== null) {
      postBody['weight'] = opts.weight
    }
    if (opts.ttl !== undefined && opts.ttl !== null) {
      postBody['ttl'] = opts.ttl
    }
    if (opts.contents !== undefined && opts.contents !== null) {
      postBody['contents'] = opts.contents
    }
    if (opts.cacheType !== undefined && opts.cacheType !== null) {
      postBody['cacheType'] = opts.cacheType
    }
    if (opts.configId !== undefined && opts.configId !== null) {
      postBody['configId'] = opts.configId
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call updateCacheRule with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/cacheRule',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除缓存规则
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.configId] - 缓存规则id  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  deleteCacheRule (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling deleteCacheRule"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.configId !== undefined && opts.configId !== null) {
      queryParams['configId'] = opts.configId
    }

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteCacheRule with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/cacheRule',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询http header头
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {string} callback - callback
      @return {Object} result
      * @param string domain
      * @param queryHttpHeaderResp headers
      */

  queryHttpHeader (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling queryHttpHeader"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryHttpHeader with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/httpHeader',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加httpHeader
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.headerType] - header类型[resp,req]  optional
      * @param {} [opts.headerName] - header名  optional
      * @param {} [opts.headerValue] - header值  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  setHttpHeader (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling setHttpHeader"
      )
    }

    let postBody = {}
    if (opts.headerType !== undefined && opts.headerType !== null) {
      postBody['headerType'] = opts.headerType
    }
    if (opts.headerName !== undefined && opts.headerName !== null) {
      postBody['headerName'] = opts.headerName
    }
    if (opts.headerValue !== undefined && opts.headerValue !== null) {
      postBody['headerValue'] = opts.headerValue
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setHttpHeader with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/httpHeader',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除httpHeader
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.headerType] - header类型[resp,req]  optional
      * @param {} [opts.headerName] - header名  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  deleteHttpHeader (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling deleteHttpHeader"
      )
    }

    let postBody = {}
    if (opts.headerType !== undefined && opts.headerType !== null) {
      postBody['headerType'] = opts.headerType
    }
    if (opts.headerName !== undefined && opts.headerName !== null) {
      postBody['headerName'] = opts.headerName
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteHttpHeader with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/httpHeader',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置视频拖拽
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.status] - 开关取值[on,off]  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  setVideoDraft (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling setVideoDraft"
      )
    }

    let postBody = {}
    if (opts.status !== undefined && opts.status !== null) {
      postBody['status'] = opts.status
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setVideoDraft with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/videoDraft',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置range参数
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.status] - 开关取值[on,off]  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  setRange (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling setRange"
      )
    }

    let postBody = {}
    if (opts.status !== undefined && opts.status !== null) {
      postBody['status'] = opts.status
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setRange with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/range',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置忽略参数
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.status] - 开关取值[on,off]  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  setIgnoreQueryString (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling setIgnoreQueryString"
      )
    }

    let postBody = {}
    if (opts.status !== undefined && opts.status !== null) {
      postBody['status'] = opts.status
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setIgnoreQueryString with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/ignoreQueryString',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置userAgent信息
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {string} callback - callback
      @return {Object} result
      * @param string domain
      * @param string userAgentType
      * @param string userAgentList
      * @param string allowNoUserAgentHeader
      */

  queryUserAgent (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling queryUserAgent"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryUserAgent with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/userAgentConfig',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置userAgent信息
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.userAgentType] - userAgent类型,取值：block（黑名单）,allow（白名单）,默认为block  optional
      * @param {} [opts.userAgentList] - UA列表,如果userAgentList为空,则为全部删除  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  setUserAgentConfig (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling setUserAgentConfig"
      )
    }

    let postBody = {}
    if (opts.userAgentType !== undefined && opts.userAgentType !== null) {
      postBody['userAgentType'] = opts.userAgentType
    }
    if (opts.userAgentList !== undefined && opts.userAgentList !== null) {
      postBody['userAgentList'] = opts.userAgentList
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setUserAgentConfig with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/userAgentConfig',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询url鉴权
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {string} callback - callback
      @return {Object} result
      * @param integer accesskeyType  鉴权类型，0表示无鉴权，1表示参数鉴权，2表示路径鉴权
      * @param string accesskeyKey  密码，长度为8到32
      * @param integer accesskeyKeep  是否是回源鉴权 0表示是 1表示否
      */

  queryAccesskeyConfig (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling queryAccesskeyConfig"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryAccesskeyConfig with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/accesskeyConfig',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置url鉴权
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.accesskeyType] - 鉴权类型，0表示无鉴权，1表示参数鉴权，2表示路径鉴权  optional
      * @param {} [opts.accesskeyKey] - 密码，长度为8到32  optional
      * @param {} [opts.accesskeyKeep] - 是否是回源鉴权 0表示是 1表示否  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  setAccesskeyConfig (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling setAccesskeyConfig"
      )
    }

    let postBody = {}
    if (opts.accesskeyType !== undefined && opts.accesskeyType !== null) {
      postBody['accesskeyType'] = opts.accesskeyType
    }
    if (opts.accesskeyKey !== undefined && opts.accesskeyKey !== null) {
      postBody['accesskeyKey'] = opts.accesskeyKey
    }
    if (opts.accesskeyKeep !== undefined && opts.accesskeyKeep !== null) {
      postBody['accesskeyKeep'] = opts.accesskeyKeep
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setAccesskeyConfig with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/accesskeyConfig',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置域名refer
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.referType] - refer类型，取值：block（黑名单），allow（白名单）默认为block  optional
      * @param {} [opts.referList] - 逗号隔开的域名列表，如果referList传空则为删除  optional
      * @param {} [opts.allowNoReferHeader] - 是否允许空refer访问，默认为“on”  optional
      * @param {} [opts.allowNullReferHeader] - 是否允许无ua访问，默认为“on”  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  setRefer (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling setRefer"
      )
    }

    let postBody = {}
    if (opts.referType !== undefined && opts.referType !== null) {
      postBody['referType'] = opts.referType
    }
    if (opts.referList !== undefined && opts.referList !== null) {
      postBody['referList'] = opts.referList
    }
    if (
      opts.allowNoReferHeader !== undefined &&
      opts.allowNoReferHeader !== null
    ) {
      postBody['allowNoReferHeader'] = opts.allowNoReferHeader
    }
    if (
      opts.allowNullReferHeader !== undefined &&
      opts.allowNullReferHeader !== null
    ) {
      postBody['allowNullReferHeader'] = opts.allowNullReferHeader
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setRefer with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/refer',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询源站监控信息
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {string} callback - callback
      @return {Object} result
      * @param string domain
      * @param integer cycle
      * @param string monitorPath
      * @param object httpRequestHeader  查询结果,类型为HashMap&lt;String, Object&gt;
      */

  queryMonitor (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling queryMonitor"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryMonitor with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/monitor',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置源站监控信息
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.cycle] - 探测周期，取值1和5，单位为分钟  optional
      * @param {} [opts.monitorPath] - 探测路径  optional
      * @param {} [opts.httpRequestHeader]   optional
      * @param {string} callback - callback
      @return {Object} result
      * @param integer monitorId
      */

  setMonitor (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling setMonitor"
      )
    }

    let postBody = {}
    if (opts.cycle !== undefined && opts.cycle !== null) {
      postBody['cycle'] = opts.cycle
    }
    if (opts.monitorPath !== undefined && opts.monitorPath !== null) {
      postBody['monitorPath'] = opts.monitorPath
    }
    if (
      opts.httpRequestHeader !== undefined &&
      opts.httpRequestHeader !== null
    ) {
      postBody['httpRequestHeader'] = opts.httpRequestHeader
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setMonitor with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/monitor',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  停止源站监控
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {string} callback - callback
      @return {Object} result
      */

  stopMonitor (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling stopMonitor"
      )
    }

    let postBody = {}

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call stopMonitor with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/monitor:stop',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置源站信息
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.sourceType] - 回源类型只能是[ips,domain,oss]中的一种  optional
      * @param {} [opts.backSourceType] - 回源方式,只能是[https,http]中的一种,默认http  optional
      * @param {} [opts.ipSource]   optional
      * @param {} [opts.domainSource]   optional
      * @param {} [opts.ossSource]   optional
      * @param {} [opts.defaultSourceHost]   optional
      * @param {string} callback - callback
      @return {Object} result
      */

  setSource (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling setSource"
      )
    }

    let postBody = {}
    if (opts.sourceType !== undefined && opts.sourceType !== null) {
      postBody['sourceType'] = opts.sourceType
    }
    if (opts.backSourceType !== undefined && opts.backSourceType !== null) {
      postBody['backSourceType'] = opts.backSourceType
    }
    if (opts.ipSource !== undefined && opts.ipSource !== null) {
      postBody['ipSource'] = opts.ipSource
    }
    if (opts.domainSource !== undefined && opts.domainSource !== null) {
      postBody['domainSource'] = opts.domainSource
    }
    if (opts.ossSource !== undefined && opts.ossSource !== null) {
      postBody['ossSource'] = opts.ossSource
    }
    if (
      opts.defaultSourceHost !== undefined &&
      opts.defaultSourceHost !== null
    ) {
      postBody['defaultSourceHost'] = opts.defaultSourceHost
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setSource with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/source',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  泛域名共享缓存
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.status] - 共享缓存只能是off或者on  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  operateShareCache (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling operateShareCache"
      )
    }

    let postBody = {}
    if (opts.status !== undefined && opts.status !== null) {
      postBody['status'] = opts.status
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call operateShareCache with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/shareCache',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置http协议
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.httpType] - http类型,只能为http或者https,默认为http.当设为https时,需要调用“设置通讯协议”接口上传证书和私钥  optional
      * @param {} [opts.certificate] - 用户证书,当Type为https时必须设置  optional
      * @param {} [opts.rsaKey] - 证书私钥  optional
      * @param {} [opts.jumpType] - 有三种类型：default、http、https  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  setHttpType (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling setHttpType"
      )
    }

    let postBody = {}
    if (opts.httpType !== undefined && opts.httpType !== null) {
      postBody['httpType'] = opts.httpType
    }
    if (opts.certificate !== undefined && opts.certificate !== null) {
      postBody['certificate'] = opts.certificate
    }
    if (opts.rsaKey !== undefined && opts.rsaKey !== null) {
      postBody['rsaKey'] = opts.rsaKey
    }
    if (opts.jumpType !== undefined && opts.jumpType !== null) {
      postBody['jumpType'] = opts.jumpType
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setHttpType with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/httpType',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询回源302跳转信息
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {string} callback - callback
      @return {Object} result
      * @param string domain
      * @param string followRedirect
      */

  queryFollowRedirect (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling queryFollowRedirect"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryFollowRedirect with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/followRedirect',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置回源302跳转
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.status] - 开关取值[on,off]  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  setFollowRedirect (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling setFollowRedirect"
      )
    }

    let postBody = {}
    if (opts.status !== undefined && opts.status !== null) {
      postBody['status'] = opts.status
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setFollowRedirect with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/followRedirect',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询协议跟随回源
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {string} callback - callback
      @return {Object} result
      * @param string domain
      * @param string followProtocolStatus
      */

  queryFollowSourceProtocol (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling queryFollowSourceProtocol"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryFollowSourceProtocol with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/followSourceProtocol',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置协议跟随回源
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.status] - 开关取值[on,off]  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  setFollowSourceProtocol (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling setFollowSourceProtocol"
      )
    }

    let postBody = {}
    if (opts.status !== undefined && opts.status !== null) {
      postBody['status'] = opts.status
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setFollowSourceProtocol with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/followSourceProtocol',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询域名组接口
      * @param {Object} opts - parameters
      * @param {string} [opts.shareCache] - 根据是否共享内存筛选  optional
      * @param {integer} [opts.pageNumber] - pageNumber  optional
      * @param {integer} [opts.pageSize] - pageSize  optional
      * @param {string} [opts.primaryDomain] - 根据主域名模糊查询  optional
      * @param {string} [opts.domainGroupName] - 根据域名组模糊查询  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param integer totalCount
      * @param integer pageSize
      * @param integer pageNumber
      * @param domainGroupItem domainGroups
      */

  queryDomainGroupList (opts, callback) {
    opts = opts || {}

    let postBody = null
    let queryParams = {}
    if (opts.shareCache !== undefined && opts.shareCache !== null) {
      queryParams['shareCache'] = opts.shareCache
    }
    if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
      queryParams['pageNumber'] = opts.pageNumber
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    if (opts.primaryDomain !== undefined && opts.primaryDomain !== null) {
      queryParams['primaryDomain'] = opts.primaryDomain
    }
    if (opts.domainGroupName !== undefined && opts.domainGroupName !== null) {
      queryParams['domainGroupName'] = opts.domainGroupName
    }

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryDomainGroupList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domainGroup',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询域名组详情
      * @param {Object} opts - parameters
      * @param {integer} opts.id - 域名组id
      * @param {string} callback - callback
      @return {Object} result
      * @param string domains
      * @param string primaryDomain  主域名
      * @param string shareCache  是否共享缓存
      * @param string domainGroupName  域名组名称
      */

  queryDomainGroupDetail (opts, callback) {
    opts = opts || {}

    if (opts.id === undefined || opts.id === null) {
      throw new Error(
        "Missing the required parameter 'opts.id' when calling queryDomainGroupDetail"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      id: opts.id
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryDomainGroupDetail with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domainGroup/{id}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询未分组域名
      * @param {Object} opts - parameters
      * @param {string} callback - callback
      @return {Object} result
      * @param string domains
      */

  queryDomainsNotInGroup (opts, callback) {
    opts = opts || {}

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryDomainsNotInGroup with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domainGroup:notInGroup',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  更新域名组
      * @param {Object} opts - parameters
      * @param {integer} opts.id - 域名组id
      * @param {} [opts.domains] - 域名组内域名，包含主域名  optional
      * @param {} [opts.primaryDomain] - 主域名,开启共享缓存时必传  optional
      * @param {} [opts.shareCache] - 是否共享内存  optional
      * @param {} [opts.domainGroupName]   optional
      * @param {string} callback - callback
      @return {Object} result
      */

  updateDomainGroup (opts, callback) {
    opts = opts || {}

    if (opts.id === undefined || opts.id === null) {
      throw new Error(
        "Missing the required parameter 'opts.id' when calling updateDomainGroup"
      )
    }

    let postBody = {}
    if (opts.domains !== undefined && opts.domains !== null) {
      postBody['domains'] = opts.domains
    }
    if (opts.primaryDomain !== undefined && opts.primaryDomain !== null) {
      postBody['primaryDomain'] = opts.primaryDomain
    }
    if (opts.shareCache !== undefined && opts.shareCache !== null) {
      postBody['shareCache'] = opts.shareCache
    }
    if (opts.domainGroupName !== undefined && opts.domainGroupName !== null) {
      postBody['domainGroupName'] = opts.domainGroupName
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      id: opts.id
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call updateDomainGroup with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domainGroup/{id}:update',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  创建域名组
      * @param {Object} opts - parameters
      * @param {} [opts.shareCache] - 是否共享内存  optional
      * @param {} [opts.primaryDomain] - 主域名,开启共享缓存时必传  optional
      * @param {} [opts.domainGroupName] - 域名组名称  optional
      * @param {} [opts.domains] - 域名组内域名包含主域名  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  createDomainGroup (opts, callback) {
    opts = opts || {}

    let postBody = {}
    if (opts.shareCache !== undefined && opts.shareCache !== null) {
      postBody['shareCache'] = opts.shareCache
    }
    if (opts.primaryDomain !== undefined && opts.primaryDomain !== null) {
      postBody['primaryDomain'] = opts.primaryDomain
    }
    if (opts.domainGroupName !== undefined && opts.domainGroupName !== null) {
      postBody['domainGroupName'] = opts.domainGroupName
    }
    if (opts.domains !== undefined && opts.domains !== null) {
      postBody['domains'] = opts.domains
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call createDomainGroup with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domainGroup:create',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  批量删除域名组
      * @param {Object} opts - parameters
      * @param {array} opts.ids
      * @param {string} callback - callback
      @return {Object} result
      */

  batchDeleteDomainGroup (opts, callback) {
    opts = opts || {}

    if (opts.ids === undefined || opts.ids === null) {
      throw new Error(
        "Missing the required parameter 'opts.ids' when calling batchDeleteDomainGroup"
      )
    }

    let postBody = {}
    if (opts.ids !== undefined && opts.ids !== null) {
      postBody['ids'] = opts.ids
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call batchDeleteDomainGroup with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domainGroup:batchDelete',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询加速域名接口
      * @param {Object} opts - parameters
      * @param {string} [opts.keyWord] - 根据关键字进行模糊匹配  optional
      * @param {integer} [opts.pageNumber] - pageNumber  optional
      * @param {integer} [opts.pageSize] - pageSize  optional
      * @param {string} [opts.status] - 根据域名状态查询, 可选值[offline, online, configuring, auditing, audit_reject]  optional
      * @param {string} [opts.type] - type  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param integer totalCount
      * @param integer pageSize
      * @param integer pageNumber
      * @param listDomainItem domains
      */

  getDomainList (opts, callback) {
    opts = opts || {}

    let postBody = null
    let queryParams = {}
    if (opts.keyWord !== undefined && opts.keyWord !== null) {
      queryParams['keyWord'] = opts.keyWord
    }
    if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
      queryParams['pageNumber'] = opts.pageNumber
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    if (opts.status !== undefined && opts.status !== null) {
      queryParams['status'] = opts.status
    }
    if (opts.type !== undefined && opts.type !== null) {
      queryParams['type'] = opts.type
    }

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getDomainList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  通过标签查询加速域名接口
      * @param {Object} opts - parameters
      * @param {string} [opts.keyWord] - 根据关键字进行模糊匹配  optional
      * @param {integer} [opts.pageNumber] - pageNumber  optional
      * @param {integer} [opts.pageSize] - pageSize  optional
      * @param {string} [opts.status] - 根据域名状态查询, 可选值[offline, online, configuring, auditing, audit_reject]  optional
      * @param {string} [opts.type] - type  optional
      * @param {array} [opts.tagFilters] - 标签过滤条件  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param integer totalCount
      * @param integer pageSize
      * @param integer pageNumber
      * @param listDomainItemByFilter domains
      */

  getDomainListByFilter (opts, callback) {
    opts = opts || {}

    let postBody = {}
    if (opts.keyWord !== undefined && opts.keyWord !== null) {
      postBody['keyWord'] = opts.keyWord
    }
    if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
      postBody['pageNumber'] = opts.pageNumber
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.status !== undefined && opts.status !== null) {
      postBody['status'] = opts.status
    }
    if (opts.type !== undefined && opts.type !== null) {
      postBody['type'] = opts.type
    }
    if (opts.tagFilters !== undefined && opts.tagFilters !== null) {
      postBody['tagFilters'] = opts.tagFilters
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getDomainListByFilter with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain:query',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询加速域名详情
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {string} callback - callback
      @return {Object} result
      * @param string allStatus
      * @param string allowNoReferHeader
      * @param string allowNullReferHeader
      * @param integer dailyBandWidth
      * @param string forbiddenType
      * @param integer maxFileSize
      * @param integer minFileSize
      * @param integer sumFileSize
      * @param integer avgFileSize
      * @param string referList
      * @param string referType
      * @param string domain
      * @param string cname
      * @param string archiveNo
      * @param string type
      * @param string created
      * @param string modified
      * @param string status
      * @param string auditStatus
      * @param backSourceInfo source
      * @param string sourceType
      * @param string defaultSourceHost  默认的回源host
      * @param string backSourceType
      * @param string httpType
      * @param string certificate
      * @param string rsaKey
      * @param string jumpType
      */

  getDomainDetail (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling getDomainDetail"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getDomainDetail with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  创建点播加速域名
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.sourceType] - 回源类型只能是[ips,domain,oss]中的一种  optional
      * @param {} [opts.cdnType] - 点播域名的类型只能是[vod,download,web]中的一种  optional
      * @param {} [opts.backSourceType] - 回源方式,只能是[https,http]中的一种,默认http  optional
      * @param {} [opts.dailyBandWidth] - 日带宽(Mbps)  optional
      * @param {} [opts.quaility] - 服务质量,只能是[good,general]中的一种,默认为good  optional
      * @param {} [opts.maxFileSize]   optional
      * @param {} [opts.minFileSize]   optional
      * @param {} [opts.sumFileSize]   optional
      * @param {} [opts.avgFileSize]   optional
      * @param {} [opts.defaultSourceHost]   optional
      * @param {} [opts.httpType]   optional
      * @param {} [opts.ipSource]   optional
      * @param {} [opts.domainSource]   optional
      * @param {} [opts.ossSource]   optional
      * @param {string} callback - callback
      @return {Object} result
      */

  createDomain (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling createDomain"
      )
    }

    let postBody = {}
    if (opts.sourceType !== undefined && opts.sourceType !== null) {
      postBody['sourceType'] = opts.sourceType
    }
    if (opts.cdnType !== undefined && opts.cdnType !== null) {
      postBody['cdnType'] = opts.cdnType
    }
    if (opts.backSourceType !== undefined && opts.backSourceType !== null) {
      postBody['backSourceType'] = opts.backSourceType
    }
    if (opts.dailyBandWidth !== undefined && opts.dailyBandWidth !== null) {
      postBody['dailyBandWidth'] = opts.dailyBandWidth
    }
    if (opts.quaility !== undefined && opts.quaility !== null) {
      postBody['quaility'] = opts.quaility
    }
    if (opts.maxFileSize !== undefined && opts.maxFileSize !== null) {
      postBody['maxFileSize'] = opts.maxFileSize
    }
    if (opts.minFileSize !== undefined && opts.minFileSize !== null) {
      postBody['minFileSize'] = opts.minFileSize
    }
    if (opts.sumFileSize !== undefined && opts.sumFileSize !== null) {
      postBody['sumFileSize'] = opts.sumFileSize
    }
    if (opts.avgFileSize !== undefined && opts.avgFileSize !== null) {
      postBody['avgFileSize'] = opts.avgFileSize
    }
    if (
      opts.defaultSourceHost !== undefined &&
      opts.defaultSourceHost !== null
    ) {
      postBody['defaultSourceHost'] = opts.defaultSourceHost
    }
    if (opts.httpType !== undefined && opts.httpType !== null) {
      postBody['httpType'] = opts.httpType
    }
    if (opts.ipSource !== undefined && opts.ipSource !== null) {
      postBody['ipSource'] = opts.ipSource
    }
    if (opts.domainSource !== undefined && opts.domainSource !== null) {
      postBody['domainSource'] = opts.domainSource
    }
    if (opts.ossSource !== undefined && opts.ossSource !== null) {
      postBody['ossSource'] = opts.ossSource
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call createDomain with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除加速域名
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {string} callback - callback
      @return {Object} result
      */

  deleteDomain (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling deleteDomain"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteDomain with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  启动加速域名
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {string} callback - callback
      @return {Object} result
      */

  startDomain (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling startDomain"
      )
    }

    let postBody = {}

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call startDomain with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}:start',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  停止加速域名
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {string} callback - callback
      @return {Object} result
      */

  stopDomain (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling stopDomain"
      )
    }

    let postBody = {}

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call stopDomain with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}:stop',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询oss存储域名
      * @param {Object} opts - parameters
      * @param {string} callback - callback
      @return {Object} result
      * @param integer total
      * @param object ossBuckets
      */

  queryOssBuckets (opts, callback) {
    opts = opts || {}

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryOssBuckets with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/ossBuckets',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  创建点播加速域名
      * @param {Object} opts - parameters
      * @param {} [opts.domains]   optional
      * @param {} [opts.sourceType] - 回源类型只能是[ips,domain,oss]中的一种  optional
      * @param {} [opts.cdnType] - 点播域名的类型只能是[vod,download,web]中的一种  optional
      * @param {} [opts.backSourceType] - 回源方式,只能是[https,http]中的一种,默认http  optional
      * @param {} [opts.dailyBandWidth] - 日带宽(Mbps)  optional
      * @param {} [opts.quaility] - 服务质量,只能是[good,general]中的一种,默认为good  optional
      * @param {} [opts.maxFileSize]   optional
      * @param {} [opts.minFileSize]   optional
      * @param {} [opts.sumFileSize]   optional
      * @param {} [opts.avgFileSize]   optional
      * @param {} [opts.defaultSourceHost]   optional
      * @param {} [opts.httpType]   optional
      * @param {} [opts.ipSource]   optional
      * @param {} [opts.domainSource]   optional
      * @param {} [opts.ossSource]   optional
      * @param {string} callback - callback
      @return {Object} result
      */

  batchCreate (opts, callback) {
    opts = opts || {}

    let postBody = {}
    if (opts.domains !== undefined && opts.domains !== null) {
      postBody['domains'] = opts.domains
    }
    if (opts.sourceType !== undefined && opts.sourceType !== null) {
      postBody['sourceType'] = opts.sourceType
    }
    if (opts.cdnType !== undefined && opts.cdnType !== null) {
      postBody['cdnType'] = opts.cdnType
    }
    if (opts.backSourceType !== undefined && opts.backSourceType !== null) {
      postBody['backSourceType'] = opts.backSourceType
    }
    if (opts.dailyBandWidth !== undefined && opts.dailyBandWidth !== null) {
      postBody['dailyBandWidth'] = opts.dailyBandWidth
    }
    if (opts.quaility !== undefined && opts.quaility !== null) {
      postBody['quaility'] = opts.quaility
    }
    if (opts.maxFileSize !== undefined && opts.maxFileSize !== null) {
      postBody['maxFileSize'] = opts.maxFileSize
    }
    if (opts.minFileSize !== undefined && opts.minFileSize !== null) {
      postBody['minFileSize'] = opts.minFileSize
    }
    if (opts.sumFileSize !== undefined && opts.sumFileSize !== null) {
      postBody['sumFileSize'] = opts.sumFileSize
    }
    if (opts.avgFileSize !== undefined && opts.avgFileSize !== null) {
      postBody['avgFileSize'] = opts.avgFileSize
    }
    if (
      opts.defaultSourceHost !== undefined &&
      opts.defaultSourceHost !== null
    ) {
      postBody['defaultSourceHost'] = opts.defaultSourceHost
    }
    if (opts.httpType !== undefined && opts.httpType !== null) {
      postBody['httpType'] = opts.httpType
    }
    if (opts.ipSource !== undefined && opts.ipSource !== null) {
      postBody['ipSource'] = opts.ipSource
    }
    if (opts.domainSource !== undefined && opts.domainSource !== null) {
      postBody['domainSource'] = opts.domainSource
    }
    if (opts.ossSource !== undefined && opts.ossSource !== null) {
      postBody['ossSource'] = opts.ossSource
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call batchCreate with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain:batchCreate',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询域名配置信息
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {string} callback - callback
      @return {Object} result
      * @param string ignoreQueryString  忽略参数[on,off]
      * @param string range  range参数[on,off]
      * @param string httpType  httpType参数[on,off]
      * @param string httpsCertificate  https证书
      * @param string httpsRsaKey  rsa秘钥
      * @param string httpsJumpType  跳转类型[default,http,https]
      * @param string videoDraft  是否支持视频拖拽[on,off]
      * @param string groupName  group
      * @param integer shareId
      * @param string shareName
      * @param string jcdnTimeAnti
      * @param string shareCache
      * @param string isShareOpen
      * @param cacheRule cacheRules
      */

  queryDomainConfig (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling queryDomainConfig"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryDomainConfig with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domain/{domain}/config',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置直播域名回源信息
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.sourceType] - 回源类型只能为[ips,domain]中的一种  optional
      * @param {} [opts.backSourceType]   optional
      * @param {} [opts.defaultSourceHost] - 默认回源host  optional
      * @param {} [opts.domainSource]   optional
      * @param {} [opts.ipSource]   optional
      * @param {string} callback - callback
      @return {Object} result
      */

  setLiveDomainBackSource (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling setLiveDomainBackSource"
      )
    }

    let postBody = {}
    if (opts.sourceType !== undefined && opts.sourceType !== null) {
      postBody['sourceType'] = opts.sourceType
    }
    if (opts.backSourceType !== undefined && opts.backSourceType !== null) {
      postBody['backSourceType'] = opts.backSourceType
    }
    if (
      opts.defaultSourceHost !== undefined &&
      opts.defaultSourceHost !== null
    ) {
      postBody['defaultSourceHost'] = opts.defaultSourceHost
    }
    if (opts.domainSource !== undefined && opts.domainSource !== null) {
      postBody['domainSource'] = opts.domainSource
    }
    if (opts.ipSource !== undefined && opts.ipSource !== null) {
      postBody['ipSource'] = opts.ipSource
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setLiveDomainBackSource with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/liveDomain/{domain}/backSource',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置直播域名ip黑名单
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.ips]   optional
      * @param {string} callback - callback
      @return {Object} result
      */

  setLiveDomainIpBlackList (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling setLiveDomainIpBlackList"
      )
    }

    let postBody = {}
    if (opts.ips !== undefined && opts.ips !== null) {
      postBody['ips'] = opts.ips
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setLiveDomainIpBlackList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/liveDomain/{domain}/ipBlackList',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置域名refer防盗链
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.referType] - refer类型，取值：block（黑名单），allow（白名单）默认为block  optional
      * @param {} [opts.referList] - 逗号隔开的域名列表，如果referList传空则为删除  optional
      * @param {} [opts.allowNoReferHeader] - 是否允许空refer访问，默认为“on”  optional
      * @param {} [opts.allowNullReferHeader] - 是否允许无ua访问，默认为“on”  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  setLiveDomainRefer (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling setLiveDomainRefer"
      )
    }

    let postBody = {}
    if (opts.referType !== undefined && opts.referType !== null) {
      postBody['referType'] = opts.referType
    }
    if (opts.referList !== undefined && opts.referList !== null) {
      postBody['referList'] = opts.referList
    }
    if (
      opts.allowNoReferHeader !== undefined &&
      opts.allowNoReferHeader !== null
    ) {
      postBody['allowNoReferHeader'] = opts.allowNoReferHeader
    }
    if (
      opts.allowNullReferHeader !== undefined &&
      opts.allowNullReferHeader !== null
    ) {
      postBody['allowNullReferHeader'] = opts.allowNullReferHeader
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setLiveDomainRefer with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/liveDomain/{domain}/refer',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  开启或关闭ip黑名单
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.blackIpsEnable]   optional
      * @param {string} callback - callback
      @return {Object} result
      */

  operateLiveDomainIpBlackList (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling operateLiveDomainIpBlackList"
      )
    }

    let postBody = {}
    if (opts.blackIpsEnable !== undefined && opts.blackIpsEnable !== null) {
      postBody['blackIpsEnable'] = opts.blackIpsEnable
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call operateLiveDomainIpBlackList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/liveDomain/{domain}/ipBlackList:operate',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置直播域名回源host
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.sourceHost] - 默认回源host  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  setLiveDomainBackSourceHost (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling setLiveDomainBackSourceHost"
      )
    }

    let postBody = {}
    if (opts.sourceHost !== undefined && opts.sourceHost !== null) {
      postBody['sourceHost'] = opts.sourceHost
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setLiveDomainBackSourceHost with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/liveDomain/{domain}/backSourceHost',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置URL鉴权
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.accesskeyType] - url鉴权开启1关闭0  optional
      * @param {} [opts.accesskeyKey] - url鉴权开启时必传  optional
      * @param {} [opts.authLifeTime] - 开启时默认值为300s,关闭时为0  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  setLiveDomainAccessKey (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling setLiveDomainAccessKey"
      )
    }

    let postBody = {}
    if (opts.accesskeyType !== undefined && opts.accesskeyType !== null) {
      postBody['accesskeyType'] = opts.accesskeyType
    }
    if (opts.accesskeyKey !== undefined && opts.accesskeyKey !== null) {
      postBody['accesskeyKey'] = opts.accesskeyKey
    }
    if (opts.authLifeTime !== undefined && opts.authLifeTime !== null) {
      postBody['authLifeTime'] = opts.authLifeTime
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setLiveDomainAccessKey with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/liveDomain/{domain}/accesskeyConfig',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置转协议
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.certificate] - https证书,转https格式时必传  optional
      * @param {} [opts.rsaKey] - https私钥，转https格式时必传  optional
      * @param {} [opts.protocolConverts]   optional
      * @param {string} callback - callback
      @return {Object} result
      */

  setProtocolConvert (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling setProtocolConvert"
      )
    }

    let postBody = {}
    if (opts.certificate !== undefined && opts.certificate !== null) {
      postBody['certificate'] = opts.certificate
    }
    if (opts.rsaKey !== undefined && opts.rsaKey !== null) {
      postBody['rsaKey'] = opts.rsaKey
    }
    if (opts.protocolConverts !== undefined && opts.protocolConverts !== null) {
      postBody['protocolConverts'] = opts.protocolConverts
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setProtocolConvert with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/liveDomain/{domain}/protocolConvert',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除禁播流
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {} [opts.deleteStreams] - 要删除的禁播流  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  deleteForbiddenStream (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling deleteForbiddenStream"
      )
    }

    let postBody = {}
    if (opts.deleteStreams !== undefined && opts.deleteStreams !== null) {
      postBody['deleteStreams'] = opts.deleteStreams
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteForbiddenStream with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/liveDomain/{domain}/stream:unForbidden',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询用户推流域名app名/流名
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {string} [opts.app] - app名，传appName查询流名列表  optional
      * @param {string} [opts.stream] - 流名模糊查询  optional
      * @param {integer} [opts.limit] - 指定app/流名列表大小，默认50  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param string streams
      */

  queryPushDomainORAppOrStream (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling queryPushDomainORAppOrStream"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.app !== undefined && opts.app !== null) {
      queryParams['app'] = opts.app
    }
    if (opts.stream !== undefined && opts.stream !== null) {
      queryParams['stream'] = opts.stream
    }
    if (opts.limit !== undefined && opts.limit !== null) {
      queryParams['limit'] = opts.limit
    }

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryPushDomainORAppOrStream with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/liveDomain/{domain}/stream:fuzzyQuery',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  创建直播域名
      * @param {Object} opts - parameters
      * @param {} [opts.playDomain] - 播放域名  optional
      * @param {} [opts.publishDomain] - 创建推流域名时，必传推流域名  optional
      * @param {} [opts.sourceType] - 回源类型只能是[ips,domain]中的一种  optional
      * @param {} [opts.backHttpType]   optional
      * @param {} [opts.defaultSourceHost] - 默认回源host  optional
      * @param {} [opts.siteType] - 站点类型pull(拉流)push(推流)  optional
      * @param {} [opts.backSourceType] - 回源类型，目前只能为rtmp  optional
      * @param {} [opts.ipSource]   optional
      * @param {} [opts.domainSource]   optional
      * @param {string} callback - callback
      @return {Object} result
      */

  createLiveDomain (opts, callback) {
    opts = opts || {}

    let postBody = {}
    if (opts.playDomain !== undefined && opts.playDomain !== null) {
      postBody['playDomain'] = opts.playDomain
    }
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      postBody['publishDomain'] = opts.publishDomain
    }
    if (opts.sourceType !== undefined && opts.sourceType !== null) {
      postBody['sourceType'] = opts.sourceType
    }
    if (opts.backHttpType !== undefined && opts.backHttpType !== null) {
      postBody['backHttpType'] = opts.backHttpType
    }
    if (
      opts.defaultSourceHost !== undefined &&
      opts.defaultSourceHost !== null
    ) {
      postBody['defaultSourceHost'] = opts.defaultSourceHost
    }
    if (opts.siteType !== undefined && opts.siteType !== null) {
      postBody['siteType'] = opts.siteType
    }
    if (opts.backSourceType !== undefined && opts.backSourceType !== null) {
      postBody['backSourceType'] = opts.backSourceType
    }
    if (opts.ipSource !== undefined && opts.ipSource !== null) {
      postBody['ipSource'] = opts.ipSource
    }
    if (opts.domainSource !== undefined && opts.domainSource !== null) {
      postBody['domainSource'] = opts.domainSource
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call createLiveDomain with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/liveDomain:batchCreate',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询直播域名详情
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {string} callback - callback
      @return {Object} result
      * @param string domainType  域名类型
      * @param string playDomain  播放域名
      * @param string publishDomain  推流域名
      * @param string originDomain  回源域名
      * @param string createdTime  创建时间
      * @param string cname  cname
      * @param string siteType  站点类型推流push，拉流pull
      * @param string status  域名状态
      * @param backSourceInfo source  回源信息
      * @param string sourceType  域名回源类型
      * @param string backSourceType  回源类型目前只能未rtmp
      * @param string videoType  视频格式 H.264
      * @param string audioType  音频格式AAC
      * @param string type  域名类型
      * @param string defaultSourceHost  默认回源host
      * @param string archiveNo  备案号
      * @param string rtmpDomain  rtmpDomain
      * @param string rtmpCname  rtmpCname
      * @param string hdlDomain  hdlDomain
      * @param string hdlCname  hdlCname
      * @param string hlsDomain  hlsDomain
      * @param string hlsCname  hlsCname
      * @param string forwardCustomVhost  forwardCustomVhost
      * @param string flvUrls
      * @param string hlsUrls
      * @param string rtmpUrls
      * @param protocolConvert protocolConverts
      * @param string certificate  https证书
      * @param string rsaKey  https私钥
      * @param integer accesskeyType  url鉴权开关
      * @param string accesskeyKey  url鉴权key
      * @param integer playAuthLifeTime  playAuthLifeTime
      * @param integer authLifeTime  authLifeTime
      * @param integer forwardAccessKeyType  转推鉴权开关
      * @param string forwardPrivateKey  转推鉴权key
      * @param integer originAccessKeyType  回源鉴权开关
      * @param string originPrivateKey  回源鉴权key
      * @param string allowApps
      * @param string ips
      * @param string blackIpsEnable  是否开启ip黑名单
      * @param string externId  外部关联id
      * @param string ignoreQueryString  ignoreQueryString
      * @param string referType  referType
      * @param string referList
      * @param string allowNoReferHeader  允许无refer
      * @param string allowNullReferHeader  允许空refer
      * @param string publishNormalTimeout  推流中断超时时间(单位秒)
      * @param string notifyCustomUrl  推断流通知Url
      * @param string notifyCustomAuthKey  推断流通知key
      */

  queryLiveDomainDetail (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling queryLiveDomainDetail"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryLiveDomainDetail with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/liveDomain/{domain}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询直播域名app列表
      * @param {Object} opts - parameters
      * @param {string} opts.domain - 用户域名
      * @param {string} callback - callback
      @return {Object} result
      * @param string apps
      * @param string domain  域名
      */

  queryLiveDomainApps (opts, callback) {
    opts = opts || {}

    if (opts.domain === undefined || opts.domain === null) {
      throw new Error(
        "Missing the required parameter 'opts.domain' when calling queryLiveDomainApps"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      domain: opts.domain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryLiveDomainApps with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/liveDomain/{domain}/app',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  创建直播预热任务
      * @param {Object} opts - parameters
      * @param {} [opts.urlList] - 预热的URL  optional
      * @param {} [opts.prefetchTime] - 预热时长  optional
      * @param {} [opts.action] - 操作类型只能是[start,stop]中的一种  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  createLiveDomainPrefecthTask (opts, callback) {
    opts = opts || {}

    let postBody = {}
    if (opts.urlList !== undefined && opts.urlList !== null) {
      postBody['urlList'] = opts.urlList
    }
    if (opts.prefetchTime !== undefined && opts.prefetchTime !== null) {
      postBody['prefetchTime'] = opts.prefetchTime
    }
    if (opts.action !== undefined && opts.action !== null) {
      postBody['action'] = opts.action
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call createLiveDomainPrefecthTask with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/task:createLivePrefetchTask',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询直播预热任务
      * @param {Object} opts - parameters
      * @param {} [opts.urlList] - 预热的URL  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param queryLivePrefetchItem result
      */

  queryLivePrefetchTask (opts, callback) {
    opts = opts || {}

    let postBody = {}
    if (opts.urlList !== undefined && opts.urlList !== null) {
      postBody['urlList'] = opts.urlList
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryLivePrefetchTask with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/task:queryLivePrefetchTask',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询统计数据
      * @param {Object} opts - parameters
      * @param {} [opts.startTime] - 查询起始时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.endTime] - 查询截止时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.domain] - 需要查询的域名, 必须为用户pin下有权限的域名  optional
      * @param {} [opts.fields] - 需要查询的字段  optional
      * @param {} [opts.area]   optional
      * @param {} [opts.isp]   optional
      * @param {} [opts.period] - 时间粒度，可选值:[oneMin,fiveMin,followTime],followTime只会返回一个汇总后的数据  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param string startTime
      * @param string endTime
      * @param string domain
      * @param statisticsDataItem statistics
      */

  queryMixStatisticsData (opts, callback) {
    opts = opts || {}

    let postBody = {}
    if (opts.startTime !== undefined && opts.startTime !== null) {
      postBody['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      postBody['endTime'] = opts.endTime
    }
    if (opts.domain !== undefined && opts.domain !== null) {
      postBody['domain'] = opts.domain
    }
    if (opts.fields !== undefined && opts.fields !== null) {
      postBody['fields'] = opts.fields
    }
    if (opts.area !== undefined && opts.area !== null) {
      postBody['area'] = opts.area
    }
    if (opts.isp !== undefined && opts.isp !== null) {
      postBody['isp'] = opts.isp
    }
    if (opts.period !== undefined && opts.period !== null) {
      postBody['period'] = opts.period
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryMixStatisticsData with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/statistics',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  分地区及运营商查询统计数据
      * @param {Object} opts - parameters
      * @param {} [opts.startTime] - 查询起始时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.endTime] - 查询截止时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.domain] - 需要查询的域名, 必须为用户pin下有权限的域名  optional
      * @param {} [opts.fields] - 需要查询的字段  optional
      * @param {} [opts.area]   optional
      * @param {} [opts.isp]   optional
      * @param {} [opts.period] - 时间粒度，可选值:[oneMin,fiveMin,followTime],followTime只会返回一个汇总后的数据  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param string startTime
      * @param string endTime
      * @param string domain
      * @param statisticsWithAreaGroupDetail statistics
      */

  queryMixStatisticsWithAreaData (opts, callback) {
    opts = opts || {}

    let postBody = {}
    if (opts.startTime !== undefined && opts.startTime !== null) {
      postBody['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      postBody['endTime'] = opts.endTime
    }
    if (opts.domain !== undefined && opts.domain !== null) {
      postBody['domain'] = opts.domain
    }
    if (opts.fields !== undefined && opts.fields !== null) {
      postBody['fields'] = opts.fields
    }
    if (opts.area !== undefined && opts.area !== null) {
      postBody['area'] = opts.area
    }
    if (opts.isp !== undefined && opts.isp !== null) {
      postBody['isp'] = opts.isp
    }
    if (opts.period !== undefined && opts.period !== null) {
      postBody['period'] = opts.period
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryMixStatisticsWithAreaData with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/statistics:groupByArea',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询统计数据并进行汇总加和
      * @param {Object} opts - parameters
      * @param {} [opts.startTime] - 查询起始时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.endTime] - 查询截止时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.domain] - 需要查询的域名, 必须为用户pin下有权限的域名  optional
      * @param {} [opts.fields] - 需要查询的字段  optional
      * @param {} [opts.area]   optional
      * @param {} [opts.isp]   optional
      * @param {} [opts.period] - 时间粒度，可选值:[oneMin,fiveMin,followTime],followTime只会返回一个汇总后的数据  optional
      * @param {} [opts.groupBy] - 分组依据,只能按域名分组  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param string startTime
      * @param string endTime
      * @param string domain
      * @param statisticsGroupSumDataItem statistics
      */

  queryMixTrafficGroupSum (opts, callback) {
    opts = opts || {}

    let postBody = {}
    if (opts.startTime !== undefined && opts.startTime !== null) {
      postBody['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      postBody['endTime'] = opts.endTime
    }
    if (opts.domain !== undefined && opts.domain !== null) {
      postBody['domain'] = opts.domain
    }
    if (opts.fields !== undefined && opts.fields !== null) {
      postBody['fields'] = opts.fields
    }
    if (opts.area !== undefined && opts.area !== null) {
      postBody['area'] = opts.area
    }
    if (opts.isp !== undefined && opts.isp !== null) {
      postBody['isp'] = opts.isp
    }
    if (opts.period !== undefined && opts.period !== null) {
      postBody['period'] = opts.period
    }
    if (opts.groupBy !== undefined && opts.groupBy !== null) {
      postBody['groupBy'] = opts.groupBy
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryMixTrafficGroupSum with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/statistics:groupSum',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询统计数据
      * @param {Object} opts - parameters
      * @param {} [opts.startTime] - 查询起始时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.endTime] - 查询截止时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.domain] - 需要查询的域名, 必须为用户pin下有权限的域名  optional
      * @param {} [opts.subDomain] - 待查询的子域名  optional
      * @param {} [opts.fields] - 需要查询的字段  optional
      * @param {} [opts.area]   optional
      * @param {} [opts.isp]   optional
      * @param {} [opts.origin]   optional
      * @param {} [opts.period] - 时间粒度，可选值:[oneMin,fiveMin,followTime],followTime只会返回一个汇总后的数据  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param string startTime
      * @param string endTime
      * @param string domain
      * @param statisticsDataItem statistics
      */

  queryStatisticsData (opts, callback) {
    opts = opts || {}

    let postBody = {}
    if (opts.startTime !== undefined && opts.startTime !== null) {
      postBody['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      postBody['endTime'] = opts.endTime
    }
    if (opts.domain !== undefined && opts.domain !== null) {
      postBody['domain'] = opts.domain
    }
    if (opts.subDomain !== undefined && opts.subDomain !== null) {
      postBody['subDomain'] = opts.subDomain
    }
    if (opts.fields !== undefined && opts.fields !== null) {
      postBody['fields'] = opts.fields
    }
    if (opts.area !== undefined && opts.area !== null) {
      postBody['area'] = opts.area
    }
    if (opts.isp !== undefined && opts.isp !== null) {
      postBody['isp'] = opts.isp
    }
    if (opts.origin !== undefined && opts.origin !== null) {
      postBody['origin'] = opts.origin
    }
    if (opts.period !== undefined && opts.period !== null) {
      postBody['period'] = opts.period
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryStatisticsData with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/vodStatistics',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  分地区及运营商查询统计数据
      * @param {Object} opts - parameters
      * @param {} [opts.startTime] - 查询起始时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.endTime] - 查询截止时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.domain] - 需要查询的域名, 必须为用户pin下有权限的域名  optional
      * @param {} [opts.subDomain] - 待查询的子域名  optional
      * @param {} [opts.fields] - 需要查询的字段  optional
      * @param {} [opts.area]   optional
      * @param {} [opts.isp]   optional
      * @param {} [opts.origin]   optional
      * @param {} [opts.period] - 时间粒度，可选值:[oneMin,fiveMin,followTime],followTime只会返回一个汇总后的数据  optional
      * @param {} [opts.groupBy] - 分组依据  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param string startTime
      * @param string endTime
      * @param string domain
      * @param statisticsWithAreaGroupDetail statistics
      */

  queryStatisticsDataGroupByArea (opts, callback) {
    opts = opts || {}

    let postBody = {}
    if (opts.startTime !== undefined && opts.startTime !== null) {
      postBody['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      postBody['endTime'] = opts.endTime
    }
    if (opts.domain !== undefined && opts.domain !== null) {
      postBody['domain'] = opts.domain
    }
    if (opts.subDomain !== undefined && opts.subDomain !== null) {
      postBody['subDomain'] = opts.subDomain
    }
    if (opts.fields !== undefined && opts.fields !== null) {
      postBody['fields'] = opts.fields
    }
    if (opts.area !== undefined && opts.area !== null) {
      postBody['area'] = opts.area
    }
    if (opts.isp !== undefined && opts.isp !== null) {
      postBody['isp'] = opts.isp
    }
    if (opts.origin !== undefined && opts.origin !== null) {
      postBody['origin'] = opts.origin
    }
    if (opts.period !== undefined && opts.period !== null) {
      postBody['period'] = opts.period
    }
    if (opts.groupBy !== undefined && opts.groupBy !== null) {
      postBody['groupBy'] = opts.groupBy
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryStatisticsDataGroupByArea with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/vodStatistics:groupByArea',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询统计数据并进行汇总加和
      * @param {Object} opts - parameters
      * @param {} [opts.startTime] - 查询起始时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.endTime] - 查询截止时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.domain] - 需要查询的域名, 必须为用户pin下有权限的域名  optional
      * @param {} [opts.subDomain] - 待查询的子域名  optional
      * @param {} [opts.fields] - 需要查询的字段  optional
      * @param {} [opts.area]   optional
      * @param {} [opts.isp]   optional
      * @param {} [opts.origin]   optional
      * @param {} [opts.period] - 时间粒度，可选值:[oneMin,fiveMin,followTime],followTime只会返回一个汇总后的数据  optional
      * @param {} [opts.groupBy] - 分组依据  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param string startTime
      * @param string endTime
      * @param string domain
      * @param statisticsGroupSumDataItem statistics
      */

  queryStatisticsDataGroupSum (opts, callback) {
    opts = opts || {}

    let postBody = {}
    if (opts.startTime !== undefined && opts.startTime !== null) {
      postBody['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      postBody['endTime'] = opts.endTime
    }
    if (opts.domain !== undefined && opts.domain !== null) {
      postBody['domain'] = opts.domain
    }
    if (opts.subDomain !== undefined && opts.subDomain !== null) {
      postBody['subDomain'] = opts.subDomain
    }
    if (opts.fields !== undefined && opts.fields !== null) {
      postBody['fields'] = opts.fields
    }
    if (opts.area !== undefined && opts.area !== null) {
      postBody['area'] = opts.area
    }
    if (opts.isp !== undefined && opts.isp !== null) {
      postBody['isp'] = opts.isp
    }
    if (opts.origin !== undefined && opts.origin !== null) {
      postBody['origin'] = opts.origin
    }
    if (opts.period !== undefined && opts.period !== null) {
      postBody['period'] = opts.period
    }
    if (opts.groupBy !== undefined && opts.groupBy !== null) {
      postBody['groupBy'] = opts.groupBy
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryStatisticsDataGroupSum with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/vodStatistics:groupSum',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询统计数据
      * @param {Object} opts - parameters
      * @param {} [opts.startTime] - 查询起始时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.endTime] - 查询截止时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.domain] - 需要查询的域名, 必须为用户pin下有权限的域名  optional
      * @param {} [opts.appname] - app名  optional
      * @param {} [opts.streamname] - 流名  optional
      * @param {} [opts.subDomain] - 子域名  optional
      * @param {} [opts.fields] - 需要查询的字段  optional
      * @param {} [opts.area]   optional
      * @param {} [opts.isp]   optional
      * @param {} [opts.reqMethod]   optional
      * @param {} [opts.scheme] - 查询的流协议类型  optional
      * @param {} [opts.period] - 时间粒度，可选值:[oneMin,fiveMin,followTime],followTime只会返回一个汇总后的数据  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param string startTime
      * @param string endTime
      * @param string domain
      * @param statisticsDataItem statistics
      */

  queryLiveStatisticsData (opts, callback) {
    opts = opts || {}

    let postBody = {}
    if (opts.startTime !== undefined && opts.startTime !== null) {
      postBody['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      postBody['endTime'] = opts.endTime
    }
    if (opts.domain !== undefined && opts.domain !== null) {
      postBody['domain'] = opts.domain
    }
    if (opts.appname !== undefined && opts.appname !== null) {
      postBody['appname'] = opts.appname
    }
    if (opts.streamname !== undefined && opts.streamname !== null) {
      postBody['streamname'] = opts.streamname
    }
    if (opts.subDomain !== undefined && opts.subDomain !== null) {
      postBody['subDomain'] = opts.subDomain
    }
    if (opts.fields !== undefined && opts.fields !== null) {
      postBody['fields'] = opts.fields
    }
    if (opts.area !== undefined && opts.area !== null) {
      postBody['area'] = opts.area
    }
    if (opts.isp !== undefined && opts.isp !== null) {
      postBody['isp'] = opts.isp
    }
    if (opts.reqMethod !== undefined && opts.reqMethod !== null) {
      postBody['reqMethod'] = opts.reqMethod
    }
    if (opts.scheme !== undefined && opts.scheme !== null) {
      postBody['scheme'] = opts.scheme
    }
    if (opts.period !== undefined && opts.period !== null) {
      postBody['period'] = opts.period
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryLiveStatisticsData with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/liveStatistics',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  分地区及运营商查询统计数据
      * @param {Object} opts - parameters
      * @param {} [opts.startTime] - 查询起始时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.endTime] - 查询截止时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.domain] - 需要查询的域名, 必须为用户pin下有权限的域名  optional
      * @param {} [opts.appName] - app名  optional
      * @param {} [opts.fields] - 需要查询的字段  optional
      * @param {} [opts.area]   optional
      * @param {} [opts.isp]   optional
      * @param {} [opts.streamName]   optional
      * @param {} [opts.period] - 时间粒度，可选值:[oneMin,fiveMin,followTime],followTime只会返回一个汇总后的数据  optional
      * @param {} [opts.groupBy] - 分组依据  optional
      * @param {} [opts.subDomain]   optional
      * @param {} [opts.scheme] - 查询的流协议  optional
      * @param {} [opts.reqMethod]   optional
      * @param {string} callback - callback
      @return {Object} result
      * @param string startTime
      * @param string endTime
      * @param string domain
      * @param statisticsWithAreaGroupDetail statistics
      */

  queryLiveStatisticsAreaDataGroupBy (opts, callback) {
    opts = opts || {}

    let postBody = {}
    if (opts.startTime !== undefined && opts.startTime !== null) {
      postBody['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      postBody['endTime'] = opts.endTime
    }
    if (opts.domain !== undefined && opts.domain !== null) {
      postBody['domain'] = opts.domain
    }
    if (opts.appName !== undefined && opts.appName !== null) {
      postBody['appName'] = opts.appName
    }
    if (opts.fields !== undefined && opts.fields !== null) {
      postBody['fields'] = opts.fields
    }
    if (opts.area !== undefined && opts.area !== null) {
      postBody['area'] = opts.area
    }
    if (opts.isp !== undefined && opts.isp !== null) {
      postBody['isp'] = opts.isp
    }
    if (opts.streamName !== undefined && opts.streamName !== null) {
      postBody['streamName'] = opts.streamName
    }
    if (opts.period !== undefined && opts.period !== null) {
      postBody['period'] = opts.period
    }
    if (opts.groupBy !== undefined && opts.groupBy !== null) {
      postBody['groupBy'] = opts.groupBy
    }
    if (opts.subDomain !== undefined && opts.subDomain !== null) {
      postBody['subDomain'] = opts.subDomain
    }
    if (opts.scheme !== undefined && opts.scheme !== null) {
      postBody['scheme'] = opts.scheme
    }
    if (opts.reqMethod !== undefined && opts.reqMethod !== null) {
      postBody['reqMethod'] = opts.reqMethod
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryLiveStatisticsAreaDataGroupBy with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/liveStatistics:groupByArea',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询统计数据并进行汇总加和
      * @param {Object} opts - parameters
      * @param {} [opts.startTime] - 查询起始时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.endTime] - 查询截止时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.domain] - 需要查询的域名, 必须为用户pin下有权限的域名  optional
      * @param {} [opts.subDomain]   optional
      * @param {} [opts.appName] - app名  optional
      * @param {} [opts.streamName] - 流名  optional
      * @param {} [opts.fields] - 需要查询的字段  optional
      * @param {} [opts.area]   optional
      * @param {} [opts.isp]   optional
      * @param {} [opts.scheme] - 查询的流协议  optional
      * @param {} [opts.period] - 时间粒度，可选值:[oneMin,fiveMin,followTime],followTime只会返回一个汇总后的数据  optional
      * @param {} [opts.groupBy] - 分组依据  optional
      * @param {} [opts.reqMethod]   optional
      * @param {string} callback - callback
      @return {Object} result
      * @param string startTime
      * @param string endTime
      * @param string domain
      * @param statisticsGroupSumDataItem statistics
      */

  queryLiveTrafficGroupSum (opts, callback) {
    opts = opts || {}

    let postBody = {}
    if (opts.startTime !== undefined && opts.startTime !== null) {
      postBody['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      postBody['endTime'] = opts.endTime
    }
    if (opts.domain !== undefined && opts.domain !== null) {
      postBody['domain'] = opts.domain
    }
    if (opts.subDomain !== undefined && opts.subDomain !== null) {
      postBody['subDomain'] = opts.subDomain
    }
    if (opts.appName !== undefined && opts.appName !== null) {
      postBody['appName'] = opts.appName
    }
    if (opts.streamName !== undefined && opts.streamName !== null) {
      postBody['streamName'] = opts.streamName
    }
    if (opts.fields !== undefined && opts.fields !== null) {
      postBody['fields'] = opts.fields
    }
    if (opts.area !== undefined && opts.area !== null) {
      postBody['area'] = opts.area
    }
    if (opts.isp !== undefined && opts.isp !== null) {
      postBody['isp'] = opts.isp
    }
    if (opts.scheme !== undefined && opts.scheme !== null) {
      postBody['scheme'] = opts.scheme
    }
    if (opts.period !== undefined && opts.period !== null) {
      postBody['period'] = opts.period
    }
    if (opts.groupBy !== undefined && opts.groupBy !== null) {
      postBody['groupBy'] = opts.groupBy
    }
    if (opts.reqMethod !== undefined && opts.reqMethod !== null) {
      postBody['reqMethod'] = opts.reqMethod
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryLiveTrafficGroupSum with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/liveStatistics:groupSum',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询TOP IP
      * @param {Object} opts - parameters
      * @param {} [opts.startTime] - 查询起始时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.endTime] - 查询截止时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.domain] - 需要查询的域名, 必须为用户pin下有权限的域名  optional
      * @param {} [opts.subDomain] - 待查询的子域名  optional
      * @param {} [opts.size]   optional
      * @param {} [opts.topBy] - 排序依据  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param string startTime
      * @param string endTime
      * @param string domain
      * @param statisticsTopIpData ipData
      */

  queryStatisticsTopIp (opts, callback) {
    opts = opts || {}

    let postBody = {}
    if (opts.startTime !== undefined && opts.startTime !== null) {
      postBody['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      postBody['endTime'] = opts.endTime
    }
    if (opts.domain !== undefined && opts.domain !== null) {
      postBody['domain'] = opts.domain
    }
    if (opts.subDomain !== undefined && opts.subDomain !== null) {
      postBody['subDomain'] = opts.subDomain
    }
    if (opts.size !== undefined && opts.size !== null) {
      postBody['size'] = opts.size
    }
    if (opts.topBy !== undefined && opts.topBy !== null) {
      postBody['topBy'] = opts.topBy
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryStatisticsTopIp with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/statistics:topIp',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询TOP Url
      * @param {Object} opts - parameters
      * @param {} [opts.startTime] - 查询起始时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.endTime] - 查询截止时间,UTC时间，格式为:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;，示例:2018-10-21T10:00:00Z  optional
      * @param {} [opts.domain] - 需要查询的域名, 必须为用户pin下有权限的域名  optional
      * @param {} [opts.subDomain] - 待查询的子域名  optional
      * @param {} [opts.size]   optional
      * @param {} [opts.topBy] - 排序依据  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param string startTime
      * @param string endTime
      * @param string domain
      * @param statisticsTopUrlData urlData
      */

  queryStatisticsTopUrl (opts, callback) {
    opts = opts || {}

    let postBody = {}
    if (opts.startTime !== undefined && opts.startTime !== null) {
      postBody['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      postBody['endTime'] = opts.endTime
    }
    if (opts.domain !== undefined && opts.domain !== null) {
      postBody['domain'] = opts.domain
    }
    if (opts.subDomain !== undefined && opts.subDomain !== null) {
      postBody['subDomain'] = opts.subDomain
    }
    if (opts.size !== undefined && opts.size !== null) {
      postBody['size'] = opts.size
    }
    if (opts.topBy !== undefined && opts.topBy !== null) {
      postBody['topBy'] = opts.topBy
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  cdn/0.8.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryStatisticsTopUrl with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/statistics:topUrl',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }
}
module.exports = JDCloud.CDN
