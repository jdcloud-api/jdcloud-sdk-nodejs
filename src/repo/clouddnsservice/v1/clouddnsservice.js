/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 网站监控
 * 云解析OpenAPI网站监控接口
 *
 * OpenAPI spec version: v1
 * Contact:
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

require('../../../lib/node_loader')
var JDCloud = require('../../../lib/core')
var Service = JDCloud.Service
var serviceId = 'clouddnsservice'
Service._services[serviceId] = true

/**
 * clouddnsservice service.
 * @version 1.0.3
 */

JDCloud.CLOUDDNSSERVICE = class CLOUDDNSSERVICE extends Service {
  constructor (options = {}) {
    options._defaultEndpoint = {}
    options._defaultEndpoint.protocol =
      options._defaultEndpoint.protocol || 'https'
    options._defaultEndpoint.host =
      options._defaultEndpoint.host || 'clouddnsservice.jdcloud-api.com'
    options.basePath = '/v1' // 默认要设为空""
    super(serviceId, options)
  }

  /**
      *  查询用户名下的主域名列表
      * @param {Object} opts - parameters
      * @param {integer} opts.pageNumber - 分页查询时查询的每页的序号，起始值为1，默认为1
      * @param {integer} opts.pageSize - 分页查询时设置的每页行数，默认为10
      * @param {string} [opts.domainName] - 关键字，按照”%domainName%”模式匹配主域名  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param domain dataList
      * @param integer currentCount  当前页的域名列表里域名的个数
      * @param integer totalCount  所有匹配的域名列表的个数
      * @param integer totalPage  所有匹配的域名列表按照分页参数一共的页数
      */

  getDomains (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  getDomains"
      )
    }

    opts = opts || {}

    if (opts.pageNumber === undefined || opts.pageNumber === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageNumber' when calling getDomains"
      )
    }
    if (opts.pageSize === undefined || opts.pageSize === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageSize' when calling getDomains"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
      queryParams['pageNumber'] = opts.pageNumber
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    if (opts.domainName !== undefined && opts.domainName !== null) {
      queryParams['domainName'] = opts.domainName
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  clouddnsservice/1.0.3'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call getDomains with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/domain',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加主域名
      * @param {Object} opts - parameters
      * @param {integer} opts.packId - 域名的套餐类型, 0-&gt;免费 ,1-&gt;企业版, 2-&gt;高级版
      * @param {string} opts.domainName - 要添加的域名
      * @param {integer} [opts.domainId] - 域名ID，升级高级版必填  optional
      * @param {integer} [opts.buyType] - 1-&gt;新购买、2-&gt;升级，收费套餐的域名必填  optional
      * @param {integer} [opts.timeSpan] - 1，2，3 ，时长，收费套餐的域名必填  optional
      * @param {integer} [opts.timeUnit] - 时间单位，收费套餐的域名必填  optional
      * @param {integer} [opts.billingType] - 计费类型，收费套餐的域名必填  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param domain data  新添加的的域名结构
      * @param string order  添加收费版域名的订单号
      */

  addDomain (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  addDomain"
      )
    }

    opts = opts || {}

    if (opts.packId === undefined || opts.packId === null) {
      throw new Error(
        "Missing the required parameter 'opts.packId' when calling addDomain"
      )
    }
    if (opts.domainName === undefined || opts.domainName === null) {
      throw new Error(
        "Missing the required parameter 'opts.domainName' when calling addDomain"
      )
    }

    let postBody = {}
    if (opts.packId !== undefined && opts.packId !== null) {
      postBody['packId'] = opts.packId
    }
    if (opts.domainName !== undefined && opts.domainName !== null) {
      postBody['domainName'] = opts.domainName
    }
    if (opts.domainId !== undefined && opts.domainId !== null) {
      postBody['domainId'] = opts.domainId
    }
    if (opts.buyType !== undefined && opts.buyType !== null) {
      postBody['buyType'] = opts.buyType
    }
    if (opts.timeSpan !== undefined && opts.timeSpan !== null) {
      postBody['timeSpan'] = opts.timeSpan
    }
    if (opts.timeUnit !== undefined && opts.timeUnit !== null) {
      postBody['timeUnit'] = opts.timeUnit
    }
    if (opts.billingType !== undefined && opts.billingType !== null) {
      postBody['billingType'] = opts.billingType
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  clouddnsservice/1.0.3'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call addDomain with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/domainAdd',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除主域名
      * @param {Object} opts - parameters
      * @param {integer} opts.domainId - 需要删除的域名ID
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  delDomain (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  delDomain"
      )
    }

    opts = opts || {}

    if (opts.domainId === undefined || opts.domainId === null) {
      throw new Error(
        "Missing the required parameter 'opts.domainId' when calling delDomain"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.domainId !== undefined && opts.domainId !== null) {
      queryParams['domainId'] = opts.domainId
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  clouddnsservice/1.0.3'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call delDomain with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/domainDel',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  修改主域名
      * @param {Object} opts - parameters
      * @param {string} opts.domainName - 需要修改的域名
      * @param {integer} opts.id - 需要修改的域名ID
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param domain updateDomain  修改后的域名结构
      */

  updateDomain (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  updateDomain"
      )
    }

    opts = opts || {}

    if (opts.domainName === undefined || opts.domainName === null) {
      throw new Error(
        "Missing the required parameter 'opts.domainName' when calling updateDomain"
      )
    }
    if (opts.id === undefined || opts.id === null) {
      throw new Error(
        "Missing the required parameter 'opts.id' when calling updateDomain"
      )
    }

    let postBody = {}
    if (opts.domainName !== undefined && opts.domainName !== null) {
      postBody['domainName'] = opts.domainName
    }
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  clouddnsservice/1.0.3'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call updateDomain with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/domainUpdate',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查看域名的解析次数
      * @param {Object} opts - parameters
      * @param {string} opts.domainId - 域名ID
      * @param {string} opts.domainName - 查询的域名
      * @param {string} opts.start - 起始时间, UTC时间例如2017-11-10T23:00:00Z
      * @param {string} opts.end - 终止时间, UTC时间例如2017-11-10T23:00:00Z
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer time
      * @param integer traffic
      */

  getDomainQueryCount (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  getDomainQueryCount"
      )
    }

    opts = opts || {}

    if (opts.domainId === undefined || opts.domainId === null) {
      throw new Error(
        "Missing the required parameter 'opts.domainId' when calling getDomainQueryCount"
      )
    }
    if (opts.domainName === undefined || opts.domainName === null) {
      throw new Error(
        "Missing the required parameter 'opts.domainName' when calling getDomainQueryCount"
      )
    }
    if (opts.start === undefined || opts.start === null) {
      throw new Error(
        "Missing the required parameter 'opts.start' when calling getDomainQueryCount"
      )
    }
    if (opts.end === undefined || opts.end === null) {
      throw new Error(
        "Missing the required parameter 'opts.end' when calling getDomainQueryCount"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.domainName !== undefined && opts.domainName !== null) {
      queryParams['domainName'] = opts.domainName
    }
    if (opts.start !== undefined && opts.start !== null) {
      queryParams['start'] = opts.start
    }
    if (opts.end !== undefined && opts.end !== null) {
      queryParams['end'] = opts.end
    }

    let pathParams = {
      regionId: regionId,
      domainId: opts.domainId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  clouddnsservice/1.0.3'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call getDomainQueryCount with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/domain/{domainId}/queryCount',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查看域名的查询流量
      * @param {Object} opts - parameters
      * @param {string} opts.domainId - 域名ID
      * @param {string} opts.domainName - 域名
      * @param {string} opts.start - 起始时间, UTC时间例如2017-11-10T23:00:00Z
      * @param {string} opts.end - 终止时间, UTC时间例如2017-11-10T23:00:00Z
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer time
      * @param string unit  数据的单位
      * @param number traffic
      */

  getDomainQueryTraffic (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  getDomainQueryTraffic"
      )
    }

    opts = opts || {}

    if (opts.domainId === undefined || opts.domainId === null) {
      throw new Error(
        "Missing the required parameter 'opts.domainId' when calling getDomainQueryTraffic"
      )
    }
    if (opts.domainName === undefined || opts.domainName === null) {
      throw new Error(
        "Missing the required parameter 'opts.domainName' when calling getDomainQueryTraffic"
      )
    }
    if (opts.start === undefined || opts.start === null) {
      throw new Error(
        "Missing the required parameter 'opts.start' when calling getDomainQueryTraffic"
      )
    }
    if (opts.end === undefined || opts.end === null) {
      throw new Error(
        "Missing the required parameter 'opts.end' when calling getDomainQueryTraffic"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.domainName !== undefined && opts.domainName !== null) {
      queryParams['domainName'] = opts.domainName
    }
    if (opts.start !== undefined && opts.start !== null) {
      queryParams['start'] = opts.start
    }
    if (opts.end !== undefined && opts.end !== null) {
      queryParams['end'] = opts.end
    }

    let pathParams = {
      regionId: regionId,
      domainId: opts.domainId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  clouddnsservice/1.0.3'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call getDomainQueryTraffic with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/domain/{domainId}/queryTraffic',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询主域名的解析记录
      * @param {Object} opts - parameters
      * @param {string} opts.domainId - 域名ID
      * @param {integer} [opts.pageNumber] - 当前页数，起始值为1，默认为1  optional
      * @param {integer} [opts.pageSize] - 分页查询时设置的每页行数, 默认为10  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param rR dataList
      * @param integer totalCount  所有解析记录的个数
      * @param integer totalPage  所有解析记录的页数
      * @param integer currentCount  当前页解析记录的个数
      */

  searchRR (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  searchRR"
      )
    }

    opts = opts || {}

    if (opts.domainId === undefined || opts.domainId === null) {
      throw new Error(
        "Missing the required parameter 'opts.domainId' when calling searchRR"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
      queryParams['pageNumber'] = opts.pageNumber
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }

    let pathParams = {
      regionId: regionId,
      domainId: opts.domainId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  clouddnsservice/1.0.3'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call searchRR with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/domain/{domainId}/RR',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询云解析所有的基础解析线路
      * @param {Object} opts - parameters
      * @param {string} opts.domainId - 域名ID
      * @param {integer} [opts.loadMode] - 展示方式  optional
      * @param {integer} opts.packId - 套餐ID
      * @param {integer} opts.viewId - view ID，默认为0
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param viewTree data
      */

  getViewTree (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  getViewTree"
      )
    }

    opts = opts || {}

    if (opts.domainId === undefined || opts.domainId === null) {
      throw new Error(
        "Missing the required parameter 'opts.domainId' when calling getViewTree"
      )
    }
    if (opts.packId === undefined || opts.packId === null) {
      throw new Error(
        "Missing the required parameter 'opts.packId' when calling getViewTree"
      )
    }
    if (opts.viewId === undefined || opts.viewId === null) {
      throw new Error(
        "Missing the required parameter 'opts.viewId' when calling getViewTree"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.loadMode !== undefined && opts.loadMode !== null) {
      queryParams['loadMode'] = opts.loadMode
    }
    if (opts.packId !== undefined && opts.packId !== null) {
      queryParams['packId'] = opts.packId
    }
    if (opts.viewId !== undefined && opts.viewId !== null) {
      queryParams['viewId'] = opts.viewId
    }

    let pathParams = {
      regionId: regionId,
      domainId: opts.domainId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  clouddnsservice/1.0.3'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call getViewTree with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/domain/{domainId}/viewTree',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加域名的解析记录
      * @param {Object} opts - parameters
      * @param {string} opts.domainId - 域名ID
      * @param {addRR} opts.req - RR参数
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param rR dataList  添加成功后的解析记录结果
      */

  addRR (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  addRR"
      )
    }

    opts = opts || {}

    if (opts.domainId === undefined || opts.domainId === null) {
      throw new Error(
        "Missing the required parameter 'opts.domainId' when calling addRR"
      )
    }
    if (opts.req === undefined || opts.req === null) {
      throw new Error(
        "Missing the required parameter 'opts.req' when calling addRR"
      )
    }

    let postBody = {}
    if (opts.req !== undefined && opts.req !== null) {
      postBody['req'] = opts.req
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      domainId: opts.domainId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  clouddnsservice/1.0.3'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call addRR with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/domain/{domainId}/RRAdd',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  修改主域名的某个解析记录
      * @param {Object} opts - parameters
      * @param {string} opts.domainId - 域名ID
      * @param {updateRR} opts.req - updateRR参数
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  updateRR (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  updateRR"
      )
    }

    opts = opts || {}

    if (opts.domainId === undefined || opts.domainId === null) {
      throw new Error(
        "Missing the required parameter 'opts.domainId' when calling updateRR"
      )
    }
    if (opts.req === undefined || opts.req === null) {
      throw new Error(
        "Missing the required parameter 'opts.req' when calling updateRR"
      )
    }

    let postBody = {}
    if (opts.req !== undefined && opts.req !== null) {
      postBody['req'] = opts.req
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      domainId: opts.domainId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  clouddnsservice/1.0.3'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call updateRR with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/domain/{domainId}/RRUpdate',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  启用、停用、删除主域名下的解析记录
      * @param {Object} opts - parameters
      * @param {string} opts.domainId - 域名ID
      * @param {array} [opts.ids] - 需要操作的解析记录ID  optional
      * @param {string} opts.action - 操作类型，on-&gt;启用 off-&gt;停用 del-&gt;删除
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  operateRR (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  operateRR"
      )
    }

    opts = opts || {}

    if (opts.domainId === undefined || opts.domainId === null) {
      throw new Error(
        "Missing the required parameter 'opts.domainId' when calling operateRR"
      )
    }
    if (opts.action === undefined || opts.action === null) {
      throw new Error(
        "Missing the required parameter 'opts.action' when calling operateRR"
      )
    }

    let postBody = {}
    if (opts.ids !== undefined && opts.ids !== null) {
      postBody['ids'] = opts.ids
    }
    if (opts.action !== undefined && opts.action !== null) {
      postBody['action'] = opts.action
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      domainId: opts.domainId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  clouddnsservice/1.0.3'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call operateRR with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/domain/{domainId}/RROperate',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查看主域名的监控项的配置以及状态
      * @param {Object} opts - parameters
      * @param {string} opts.domainId - 域名ID
      * @param {integer} [opts.pageIndex] - 当前页数，起始值为1，默认为1  optional
      * @param {integer} [opts.pageSize] - 分页查询时设置的每页行数  optional
      * @param {string} [opts.searchValue] - 查询的值  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer currentCount  当前页面网站监控项的个数
      * @param integer totalCount  所有网站监控项的个数
      * @param integer totalPage  所有网站监控项的页数
      * @param monitor dataList
      */

  getMonitor (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  getMonitor"
      )
    }

    opts = opts || {}

    if (opts.domainId === undefined || opts.domainId === null) {
      throw new Error(
        "Missing the required parameter 'opts.domainId' when calling getMonitor"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.pageIndex !== undefined && opts.pageIndex !== null) {
      queryParams['pageIndex'] = opts.pageIndex
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    if (opts.searchValue !== undefined && opts.searchValue !== null) {
      queryParams['searchValue'] = opts.searchValue
    }

    let pathParams = {
      regionId: regionId,
      domainId: opts.domainId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  clouddnsservice/1.0.3'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call getMonitor with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/domain/{domainId}/monitor',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加子域名的监控项，默认把子域名的所有监控项都添加上监控
      * @param {Object} opts - parameters
      * @param {string} opts.domainId - 域名ID
      * @param {string} opts.subDomainName - 子域名
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  addMonitor (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  addMonitor"
      )
    }

    opts = opts || {}

    if (opts.domainId === undefined || opts.domainId === null) {
      throw new Error(
        "Missing the required parameter 'opts.domainId' when calling addMonitor"
      )
    }
    if (opts.subDomainName === undefined || opts.subDomainName === null) {
      throw new Error(
        "Missing the required parameter 'opts.subDomainName' when calling addMonitor"
      )
    }

    let postBody = {}
    if (opts.subDomainName !== undefined && opts.subDomainName !== null) {
      postBody['subDomainName'] = opts.subDomainName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      domainId: opts.domainId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  clouddnsservice/1.0.3'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call addMonitor with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/domain/{domainId}/monitorAdd',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询子域名的可用监控对象
      * @param {Object} opts - parameters
      * @param {string} opts.domainId - 域名ID
      * @param {string} opts.subDomainName - 子域名
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string data
      */

  getTargets (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  getTargets"
      )
    }

    opts = opts || {}

    if (opts.domainId === undefined || opts.domainId === null) {
      throw new Error(
        "Missing the required parameter 'opts.domainId' when calling getTargets"
      )
    }
    if (opts.subDomainName === undefined || opts.subDomainName === null) {
      throw new Error(
        "Missing the required parameter 'opts.subDomainName' when calling getTargets"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.subDomainName !== undefined && opts.subDomainName !== null) {
      queryParams['subDomainName'] = opts.subDomainName
    }

    let pathParams = {
      regionId: regionId,
      domainId: opts.domainId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  clouddnsservice/1.0.3'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call getTargets with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/domain/{domainId}/getTargets',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加子域名的某些特定监控对象为监控项
      * @param {Object} opts - parameters
      * @param {string} opts.domainId - 域名ID
      * @param {string} opts.subDomainName - 子域名
      * @param {array} [opts.targets] - 子域名可用监控对象的数组  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  addMonitorTarget (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  addMonitorTarget"
      )
    }

    opts = opts || {}

    if (opts.domainId === undefined || opts.domainId === null) {
      throw new Error(
        "Missing the required parameter 'opts.domainId' when calling addMonitorTarget"
      )
    }
    if (opts.subDomainName === undefined || opts.subDomainName === null) {
      throw new Error(
        "Missing the required parameter 'opts.subDomainName' when calling addMonitorTarget"
      )
    }

    let postBody = {}
    if (opts.subDomainName !== undefined && opts.subDomainName !== null) {
      postBody['subDomainName'] = opts.subDomainName
    }
    if (opts.targets !== undefined && opts.targets !== null) {
      postBody['targets'] = opts.targets
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      domainId: opts.domainId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  clouddnsservice/1.0.3'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call addMonitorTarget with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/domain/{domainId}/monitorAddTarget',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  监控项的操作集合，包括：删除，暂停，启动, 手动恢复, 手动切换
      * @param {Object} opts - parameters
      * @param {string} opts.domainId - 域名ID
      * @param {string} opts.action - 删除del, 暂停stop, 开启start, 手动恢复recover，手动切换switch
      * @param {array} [opts.ids] - 监控项ID  optional
      * @param {string} [opts.switchTarget] - 监控项的主机值, 手动切换时必填  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  operateMonitor (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  operateMonitor"
      )
    }

    opts = opts || {}

    if (opts.domainId === undefined || opts.domainId === null) {
      throw new Error(
        "Missing the required parameter 'opts.domainId' when calling operateMonitor"
      )
    }
    if (opts.action === undefined || opts.action === null) {
      throw new Error(
        "Missing the required parameter 'opts.action' when calling operateMonitor"
      )
    }

    let postBody = {}
    if (opts.action !== undefined && opts.action !== null) {
      postBody['action'] = opts.action
    }
    if (opts.ids !== undefined && opts.ids !== null) {
      postBody['ids'] = opts.ids
    }
    if (opts.switchTarget !== undefined && opts.switchTarget !== null) {
      postBody['switchTarget'] = opts.switchTarget
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      domainId: opts.domainId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  clouddnsservice/1.0.3'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call operateMonitor with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/domain/{domainId}/monitorOperate',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  域名的监控项修改
      * @param {Object} opts - parameters
      * @param {string} opts.domainId - 域名ID
      * @param {updateMonitor} opts.updateMonitor - 监控项设置信息
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  updateMonitor (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  updateMonitor"
      )
    }

    opts = opts || {}

    if (opts.domainId === undefined || opts.domainId === null) {
      throw new Error(
        "Missing the required parameter 'opts.domainId' when calling updateMonitor"
      )
    }
    if (opts.updateMonitor === undefined || opts.updateMonitor === null) {
      throw new Error(
        "Missing the required parameter 'opts.updateMonitor' when calling updateMonitor"
      )
    }

    let postBody = {}
    if (opts.updateMonitor !== undefined && opts.updateMonitor !== null) {
      postBody['updateMonitor'] = opts.updateMonitor
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      domainId: opts.domainId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  clouddnsservice/1.0.3'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call updateMonitor with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/domain/{domainId}/monitorUpdate',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  主域名的监控项的报警信息
      * @param {Object} opts - parameters
      * @param {string} opts.domainId - 域名ID
      * @param {integer} [opts.pageIndex] - 当前页数，起始值为1，默认为1  optional
      * @param {integer} [opts.pageSize] - 分页查询时设置的每页行数  optional
      * @param {string} [opts.searchValue] - 关键字  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer currentCount  当前页面报警信息的个数
      * @param integer totalCount  所有报警信息的个数
      * @param integer totalPage  所有报警信息的页数
      * @param monitorAlarmInfo dataList
      */

  getMonitorAlarmInfo (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  getMonitorAlarmInfo"
      )
    }

    opts = opts || {}

    if (opts.domainId === undefined || opts.domainId === null) {
      throw new Error(
        "Missing the required parameter 'opts.domainId' when calling getMonitorAlarmInfo"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.pageIndex !== undefined && opts.pageIndex !== null) {
      queryParams['pageIndex'] = opts.pageIndex
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    if (opts.searchValue !== undefined && opts.searchValue !== null) {
      queryParams['searchValue'] = opts.searchValue
    }

    let pathParams = {
      regionId: regionId,
      domainId: opts.domainId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  clouddnsservice/1.0.3'
    }

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call getMonitorAlarmInfo with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/domain/{domainId}/monitor/alarminfo',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }
}
module.exports = JDCloud.CLOUDDNSSERVICE
