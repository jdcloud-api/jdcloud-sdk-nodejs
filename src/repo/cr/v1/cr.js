/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Repository
 * 容器镜像仓库相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

require('../../../lib/node_loader');
var JDCloud = require('../../../lib/core');
var Service = JDCloud.Service;
var serviceId = "cr"
Service._services[serviceId] = true;

/**
* cr service.
* @version 0.2.0
*/

JDCloud.CR= class CR extends Service {
    constructor(options = {}) {
            options._defaultEndpoint = {};
            options._defaultEndpoint.protocol = options._defaultEndpoint.protocol || 'https';
            options._defaultEndpoint.host = options._defaultEndpoint.host || 'openapi.cr.jdcloud.com';
            options.basePath = '/v1'; //默认要设为空""
            super( serviceId , options);
    }

      /**
      *  &lt;p&gt;申请12小时有效期的令牌。 使用&lt;code&gt;docker&lt;/code&gt; CLI push和pull镜像。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;authorizationToken&lt;/code&gt;为每个registry返回一个base64编码的字符串，解码后&lt;code&gt;docker login&lt;/code&gt;命令
可完成指定registry的鉴权。JCR CLI提供&lt;code&gt;jcr get-login&lt;/code&gt;进行认证处理。&lt;/p&gt;

      * @param {Object} opts - parameters
      * @param {string} opts.registryName - 注册表名称 
      * @param {integer} [opts.expiredAfterHours] - issue新token的过期时间, 可选参数为新生成令牌的过期时间，最大值为24小时，最小值为1小时，为空则默认为12小时过期时间。
  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string authorizationToken  
      * @param string loginCmdLine  
      * @param string expiresAt  
      */

    getAuthorizationToken(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  getAuthorizationToken');
          }

         opts = opts || {};

          if (opts.registryName === undefined || opts.registryName === null) {
               throw new Error('Missing the required parameter \'opts.registryName\' when calling getAuthorizationToken');
          }

         let postBody =   {
          };
           if (opts.expiredAfterHours !== undefined && opts.expiredAfterHours !== null) {
               postBody['expiredAfterHours'] = opts.expiredAfterHours
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'registryName': opts.registryName 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cr/0.2.0',
          };
          
          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }
          }

          let formParams = {};

          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          let returnType = null;

          this.config.logger(`call getAuthorizationToken with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/registries/{registryName}:getAuthorizationToken', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
                 if (callback) {
                          return callback(null, result);
                 }
                          return result
                 }, function (error) {
                          if (callback) {
                              return callback(error);
                          }
                          return Promise.reject(error)
                 });
    }

      /**
      *  &lt;p&gt;批量查询令牌。&lt;/p&gt; 
&lt;p&gt;暂时不支持分页和过滤条件。&lt;/p&gt;

      * @param {Object} opts - parameters
      * @param {string} opts.registryName - 注册表名称 
      * @param {integer} [opts.pageNumber] - 页码；默认为1  optional 
      * @param {integer} [opts.pageSize] - 分页大小；默认为20；取值范围[10, 100]  optional 
      * @param {filter} [opts.filters] - token - 令牌 ID，支持多个
  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param authorizationData authorizationTokens  
      * @param number totalCount  
      */

    describeAuthorizationTokens(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeAuthorizationTokens');
          }

         opts = opts || {};

          if (opts.registryName === undefined || opts.registryName === null) {
               throw new Error('Missing the required parameter \'opts.registryName\' when calling describeAuthorizationTokens');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));

          let pathParams = {
               'regionId': regionId,
               'registryName': opts.registryName 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cr/0.2.0',
          };
          
          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }
          }

          let formParams = {};

          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          let returnType = null;

          this.config.logger(`call describeAuthorizationTokens with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/registries/{registryName}/tokens', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
                 if (callback) {
                          return callback(null, result);
                 }
                          return result
                 }, function (error) {
                          if (callback) {
                              return callback(error);
                          }
                          return Promise.reject(error)
                 });
    }

      /**
      *  释放用户 registry 的 token。

      * @param {Object} opts - parameters
      * @param {string} opts.registryName - 注册表名称 
      * @param {string} [opts.authorizationToken] - 准备释放的 token ID，功能为指定token释放。  optional 
      * @param {boolean} [opts.forceAll] - true 表示强制删除用户当前registry下所有有效token的标志；false 表示删除所有有效token。  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    releaseAuthorizationToken(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  releaseAuthorizationToken');
          }

         opts = opts || {};

          if (opts.registryName === undefined || opts.registryName === null) {
               throw new Error('Missing the required parameter \'opts.registryName\' when calling releaseAuthorizationToken');
          }

         let postBody =   {
          };
           if (opts.authorizationToken !== undefined && opts.authorizationToken !== null) {
               postBody['authorizationToken'] = opts.authorizationToken
           }
           if (opts.forceAll !== undefined && opts.forceAll !== null) {
               postBody['forceAll'] = opts.forceAll
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'registryName': opts.registryName 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cr/0.2.0',
          };
          
          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }
          }

          let formParams = {};

          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          let returnType = null;

          this.config.logger(`call releaseAuthorizationToken with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/registries/{registryName}:releaseAuthorizationToken', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
                 if (callback) {
                          return callback(null, result);
                 }
                          return result
                 }, function (error) {
                          if (callback) {
                              return callback(error);
                          }
                          return Promise.reject(error)
                 });
    }

      /**
      *  返回指定repository中images的元数据，包括image size, image tags和creation date。

      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNumber] - 页码；默认为1  optional 
      * @param {integer} [opts.pageSize] - 分页大小；默认为20；取值范围[10, 100]  optional 
      * @param {filter} [opts.filters] - registryName - 镜像仓储名称 
repositoryName - 镜像库名称 
imageDigest - 镜像哈希值 
imageTag - 镜像标签 
tagStatus - 打标TAGGED或没打标UNTAGGED 
  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param imageDetail imageDetails  
      * @param number totalCount  
      */

    describeImages(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeImages');
          }

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cr/0.2.0',
          };
          
          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }
          }

          let formParams = {};

          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          let returnType = null;

          this.config.logger(`call describeImages with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/images', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
                 if (callback) {
                          return callback(null, result);
                 }
                          return result
                 }, function (error) {
                          if (callback) {
                              return callback(error);
                          }
                          return Promise.reject(error)
                 });
    }

      /**
      *  删除镜像
imageDigest imageTag imageTagStatus 三者只能且必须传一个。
可根据Tag状态删除Image，例如删除所有tagged的镜像。
digest和tag唯一表征单个镜像，其中imageDigest为sha256哈希，image manifest的digest。
例如 sha256:examplee6d1e504117a17000003d3753086354a38375961f2e665416ef4b1b2f；image使用的tag, 如  &quot;precise&quot; 

      * @param {Object} opts - parameters
      * @param {string} opts.registryName - 注册表名称 
      * @param {string} opts.repositoryName - 镜像仓库表名称 
      * @param {string} [opts.imageDigest] - sha256哈希，image manifest的digest.  optional 
      * @param {string} [opts.imageTag] - image使用的tag  optional 
      * @param {string} [opts.imageTagStatus] - 枚举中的一个值，如 tagged 和 untagged.  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteImage(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  deleteImage');
          }

         opts = opts || {};

          if (opts.registryName === undefined || opts.registryName === null) {
               throw new Error('Missing the required parameter \'opts.registryName\' when calling deleteImage');
          }
          if (opts.repositoryName === undefined || opts.repositoryName === null) {
               throw new Error('Missing the required parameter \'opts.repositoryName\' when calling deleteImage');
          }

         let postBody =   {
          };
           if (opts.imageDigest !== undefined && opts.imageDigest !== null) {
               postBody['imageDigest'] = opts.imageDigest
           }
           if (opts.imageTag !== undefined && opts.imageTag !== null) {
               postBody['imageTag'] = opts.imageTag
           }
           if (opts.imageTagStatus !== undefined && opts.imageTagStatus !== null) {
               postBody['imageTagStatus'] = opts.imageTagStatus
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'registryName': opts.registryName ,
               'repositoryName': opts.repositoryName 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cr/0.2.0',
          };
          
          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }
          }

          let formParams = {};

          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          let returnType = null;

          this.config.logger(`call deleteImage with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/registries/{registryName}/repositories/{repositoryName}:deleteImage', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
                 if (callback) {
                          return callback(null, result);
                 }
                          return result
                 }, function (error) {
                          if (callback) {
                              return callback(error);
                          }
                          return Promise.reject(error)
                 });
    }

      /**
      *  查询配额
      * @param {Object} opts - parameters
      * @param {filter} [opts.filters] - resourceTypes - 资源类型，暂时只支持 [registry, repository]，支持同时查询两种配额。
  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param quota quotas  
      */

    describeQuotas(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeQuotas');
          }

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cr/0.2.0',
          };
          
          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }
          }

          let formParams = {};

          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          let returnType = null;

          this.config.logger(`call describeQuotas with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/quotas', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
                 if (callback) {
                          return callback(null, result);
                 }
                          return result
                 }, function (error) {
                          if (callback) {
                              return callback(error);
                          }
                          return Promise.reject(error)
                 });
    }

      /**
      *  批量查询指定用户下所有 registry 详情。
暂不支持 filter.

      * @param {Object} opts - parameters
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param registry registries  
      */

    describeRegistries(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeRegistries');
          }

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cr/0.2.0',
          };
          
          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }
          }

          let formParams = {};

          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          let returnType = null;

          this.config.logger(`call describeRegistries with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/registries', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
                 if (callback) {
                          return callback(null, result);
                 }
                          return result
                 }, function (error) {
                          if (callback) {
                              return callback(error);
                          }
                          return Promise.reject(error)
                 });
    }

      /**
      *  通过参数创建注册表。

      * @param {Object} opts - parameters
      * @param {string} opts.registryName - 用户定义的registry名称。&lt;br&gt; DNS兼容registry名称规则如下：
 &lt;br&gt; 不可为空，且不能超过32字符 &lt;br&gt; 以小写字母开始和结尾，支持使用小写字母、数字、中划线(-)
 
      * @param {string} [opts.description] - 注册表描述，&lt;a href&#x3D;&quot;https://www.jdcloud.com/help/detail/3870/isCatalog/1&quot;&gt;参考公共参数规范&lt;/a&gt;。
  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param registry registry  
      */

    createRegistry(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  createRegistry');
          }

         opts = opts || {};

          if (opts.registryName === undefined || opts.registryName === null) {
               throw new Error('Missing the required parameter \'opts.registryName\' when calling createRegistry');
          }

         let postBody =   {
          };
           if (opts.registryName !== undefined && opts.registryName !== null) {
               postBody['registryName'] = opts.registryName
           }
           if (opts.description !== undefined && opts.description !== null) {
               postBody['description'] = opts.description
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cr/0.2.0',
          };
          
          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }
          }

          let formParams = {};

          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          let returnType = null;

          this.config.logger(`call createRegistry with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/registries', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
                 if (callback) {
                          return callback(null, result);
                 }
                          return result
                 }, function (error) {
                          if (callback) {
                              return callback(error);
                          }
                          return Promise.reject(error)
                 });
    }

      /**
      *  查询指定用户下某个 registry 详情。

      * @param {Object} opts - parameters
      * @param {string} opts.registryName - 注册表名称 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param registry registry  
      */

    describeRegistry(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeRegistry');
          }

         opts = opts || {};

          if (opts.registryName === undefined || opts.registryName === null) {
               throw new Error('Missing the required parameter \'opts.registryName\' when calling describeRegistry');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'registryName': opts.registryName 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cr/0.2.0',
          };
          
          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }
          }

          let formParams = {};

          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          let returnType = null;

          this.config.logger(`call describeRegistry with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/registries/{registryName}', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
                 if (callback) {
                          return callback(null, result);
                 }
                          return result
                 }, function (error) {
                          if (callback) {
                              return callback(error);
                          }
                          return Promise.reject(error)
                 });
    }

      /**
      *  删除指定用户下某个 registry.

      * @param {Object} opts - parameters
      * @param {string} opts.registryName - 注册表名称 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteRegistry(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  deleteRegistry');
          }

         opts = opts || {};

          if (opts.registryName === undefined || opts.registryName === null) {
               throw new Error('Missing the required parameter \'opts.registryName\' when calling deleteRegistry');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'registryName': opts.registryName 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cr/0.2.0',
          };
          
          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }
          }

          let formParams = {};

          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          let returnType = null;

          this.config.logger(`call deleteRegistry with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/registries/{registryName}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
                 if (callback) {
                          return callback(null, result);
                 }
                          return result
                 }, function (error) {
                          if (callback) {
                              return callback(error);
                          }
                          return Promise.reject(error)
                 });
    }

      /**
      *  查询指定注册表名称是否已经存在以及是否符合命名规范。

      * @param {Object} opts - parameters
      * @param {string} opts.registryName - 待验证的注册表名。 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer code  表示用户指定的注册表是否通过校验， 0 通过 1 名称为空 2 不符合规范 3 重名
      * @param string reason  code字段非零时，给出详细原因。
      */

    checkRegistryName(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  checkRegistryName');
          }

         opts = opts || {};

          if (opts.registryName === undefined || opts.registryName === null) {
               throw new Error('Missing the required parameter \'opts.registryName\' when calling checkRegistryName');
          }

         let postBody =   {
          };
           if (opts.registryName !== undefined && opts.registryName !== null) {
               postBody['registryName'] = opts.registryName
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cr/0.2.0',
          };
          
          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }
          }

          let formParams = {};

          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          let returnType = null;

          this.config.logger(`call checkRegistryName with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/registries:checkRegistryName', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
                 if (callback) {
                          return callback(null, result);
                 }
                          return result
                 }, function (error) {
                          if (callback) {
                              return callback(error);
                          }
                          return Promise.reject(error)
                 });
    }

      /**
      *  通过参数创建镜像仓库。
仓库名称可以分解为多个路径名，每个名称必须至少包含一个小写字母数字，考虑URL规范。
支持包含段划线或者下划线进行分割，但不允许点&#39;.&#39;，多个路径名之间通过(&quot;/&quot;)连接，总长度不超过256个字符，当前只支持二级目录。

      * @param {Object} opts - parameters
      * @param {string} opts.registryName - 注册表名称 
      * @param {string} opts.repositoryName - 镜像仓库名称。
可以专有模式如默认命名空间nginx-web-app；或者和命名空间一起将多个仓库聚集在一起如 project-a/nginx-web-app。
 
      * @param {string} [opts.description] - 注册表描述，&lt;a href&#x3D;&quot;https://www.jdcloud.com/help/detail/3870/isCatalog/1&quot;&gt;参考公共参数规范&lt;/a&gt;。
  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param repositoryShort repository  
      */

    createRepository(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  createRepository');
          }

         opts = opts || {};

          if (opts.registryName === undefined || opts.registryName === null) {
               throw new Error('Missing the required parameter \'opts.registryName\' when calling createRepository');
          }
          if (opts.repositoryName === undefined || opts.repositoryName === null) {
               throw new Error('Missing the required parameter \'opts.repositoryName\' when calling createRepository');
          }

         let postBody =   {
          };
           if (opts.repositoryName !== undefined && opts.repositoryName !== null) {
               postBody['repositoryName'] = opts.repositoryName
           }
           if (opts.description !== undefined && opts.description !== null) {
               postBody['description'] = opts.description
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'registryName': opts.registryName 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cr/0.2.0',
          };
          
          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }
          }

          let formParams = {};

          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          let returnType = null;

          this.config.logger(`call createRepository with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/registries/{registryName}/repositories', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
                 if (callback) {
                          return callback(null, result);
                 }
                          return result
                 }, function (error) {
                          if (callback) {
                              return callback(error);
                          }
                          return Promise.reject(error)
                 });
    }

      /**
      *  描述用户指定 registry 下的 repository.

      * @param {Object} opts - parameters
      * @param {array} [opts.filters] - name - 仓库名称，模糊匹配，支持单个
  optional 
      * @param {integer} [opts.pageNumber] - 页码；默认为1  optional 
      * @param {integer} [opts.pageSize] - 分页大小；默认为20；取值范围[10, 100]  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param repository repositories  
      * @param number totalCount  
      */

    describeRepositories(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeRepositories');
          }

         opts = opts || {};


         let postBody =   {
          };
           if (opts.filters !== undefined && opts.filters !== null) {
               postBody['filters'] = opts.filters
           }
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               postBody['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               postBody['pageSize'] = opts.pageSize
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cr/0.2.0',
          };
          
          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }
          }

          let formParams = {};

          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          let returnType = null;

          this.config.logger(`call describeRepositories with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/listRepositories', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
                 if (callback) {
                          return callback(null, result);
                 }
                          return result
                 }, function (error) {
                          if (callback) {
                              return callback(error);
                          }
                          return Promise.reject(error)
                 });
    }

      /**
      *  删除指定用户下某个镜像仓库.

      * @param {Object} opts - parameters
      * @param {string} opts.registryName - 注册表名称 
      * @param {string} opts.repositoryName - 镜像仓库名称 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteRepository(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  deleteRepository');
          }

         opts = opts || {};

          if (opts.registryName === undefined || opts.registryName === null) {
               throw new Error('Missing the required parameter \'opts.registryName\' when calling deleteRepository');
          }
          if (opts.repositoryName === undefined || opts.repositoryName === null) {
               throw new Error('Missing the required parameter \'opts.repositoryName\' when calling deleteRepository');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'registryName': opts.registryName ,
               'repositoryName': opts.repositoryName 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cr/0.2.0',
          };
          
          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }
          }

          let formParams = {};

          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          let returnType = null;

          this.config.logger(`call deleteRepository with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/registries/{registryName}/repositories/{repositoryName}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
                 if (callback) {
                          return callback(null, result);
                 }
                          return result
                 }, function (error) {
                          if (callback) {
                              return callback(error);
                          }
                          return Promise.reject(error)
                 });
    }

      /**
      *  查询指定镜像仓库名称是否已经存在以及是否符合命名规范。

      * @param {Object} opts - parameters
      * @param {string} opts.registryName - 注册表名。 
      * @param {string} opts.repositoryName - 待验证的镜像仓库名。 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer code  表示用户指定的镜像仓库名是否通过校验， 0 通过 1 名称为空 2 不符合规范 3 重名
      * @param string reason  code字段非零时，给出详细原因。
      */

    checkRepositoryName(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  checkRepositoryName');
          }

         opts = opts || {};

          if (opts.registryName === undefined || opts.registryName === null) {
               throw new Error('Missing the required parameter \'opts.registryName\' when calling checkRepositoryName');
          }
          if (opts.repositoryName === undefined || opts.repositoryName === null) {
               throw new Error('Missing the required parameter \'opts.repositoryName\' when calling checkRepositoryName');
          }

         let postBody =   {
          };
           if (opts.registryName !== undefined && opts.registryName !== null) {
               postBody['registryName'] = opts.registryName
           }
           if (opts.repositoryName !== undefined && opts.repositoryName !== null) {
               postBody['repositoryName'] = opts.repositoryName
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  cr/0.2.0',
          };
          
          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }
          }

          let formParams = {};

          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          let returnType = null;

          this.config.logger(`call checkRepositoryName with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/repositories:checkRepositoryName', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
                 if (callback) {
                          return callback(null, result);
                 }
                          return result
                 }, function (error) {
                          if (callback) {
                              return callback(error);
                          }
                          return Promise.reject(error)
                 });
    }

};
module.exports = JDCloud.CR
