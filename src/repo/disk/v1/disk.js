/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 售罄相关接口
 * 查询售罄情况
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

require('../../../lib/node_loader');
var JDCloud = require('../../../lib/core');
var Service = JDCloud.Service;
var serviceId = "disk"
Service._services[serviceId] = true;

/**
* disk service.
* @version 0.12.0
*/

JDCloud.DISK= class DISK extends Service {
    constructor(options = {}) {
            options._defaultEndpoint = {};
            options._defaultEndpoint.protocol = options._defaultEndpoint.protocol || 'https';
            options._defaultEndpoint.host = options._defaultEndpoint.host || 'disk.jdcloud-api.com';
            options.basePath = '/v1'; //默认要设为空""
            super( serviceId , options);
    }

      /**
      *  -   查询您已经创建的云硬盘。
-   filters多个过滤条件之间是逻辑与(AND)，每个条件内部的多个取值是逻辑或(OR)

      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNumber] - 页码, 默认为1, 取值范围：[1,∞)  optional 
      * @param {integer} [opts.pageSize] - 分页大小，默认为20，取值范围：[10,100]  optional 
      * @param {filter} [opts.filters] - diskId - 云硬盘ID，精确匹配，支持多个
diskType - 云硬盘类型，精确匹配，支持多个，取值为 ssd,premium-hdd,ssd.io1,ssd.gp1,hdd.std1
instanceId - 云硬盘所挂载主机的ID，精确匹配，支持多个
instanceType - 云硬盘所挂载主机的类型，精确匹配，支持多个
status - 可用区，精确匹配，支持多个
az - 云硬盘状态，精确匹配，支持多个
name - 云硬盘名称，模糊匹配，支持单个
multiAttach - 云硬盘是否多点挂载，精确匹配，支持单个
encrypted - 云硬盘是否加密，精确匹配，支持单个
  optional 
      * @param {tagFilter} [opts.tags] - Tag筛选条件  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param disk disks  
      * @param integer totalCount  查询的云硬盘数目
      */

    describeDisks(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeDisks');
          }

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));
          Object.assign(queryParams, this.buildTagFilterParam(opts.tags, 'tags'));

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  disk/0.12.0',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeDisks with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/disks', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  -   创建一块或多块按配置或者按使用时长付费的云硬盘。
-   云硬盘类型包括高效云盘(premium-hdd)、SSD云盘(ssd)、通用型SSD(ssd.gp1)、性能型SSD(ssd.io1)、容量型HDD(hdd.std1)。
-   计费方式默认为按配置付费。
-   创建完成后，云硬盘状态为 available。
-   可选参数快照 ID用于从快照创建新盘。
-   批量创建时，云硬盘的命名为 硬盘名称-数字，例如 myDisk-1，myDisk-2。
-   maxCount为最大努力，不保证一定能达到maxCount。

      * @param {Object} opts - parameters
      * @param {diskSpec} opts.diskSpec - 创建云硬盘规格 
      * @param {integer} opts.maxCount - 购买实例数量；取值范围：[1,100] 
      * @param {string} opts.clientToken - 幂等性校验参数 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string diskIds  
      */

    createDisks(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  createDisks');
          }

         opts = opts || {};

          if (opts.diskSpec === undefined || opts.diskSpec === null) {
               throw new Error('Missing the required parameter \'opts.diskSpec\' when calling createDisks');
          }
          if (opts.maxCount === undefined || opts.maxCount === null) {
               throw new Error('Missing the required parameter \'opts.maxCount\' when calling createDisks');
          }
          if (opts.clientToken === undefined || opts.clientToken === null) {
               throw new Error('Missing the required parameter \'opts.clientToken\' when calling createDisks');
          }

         let postBody =   {
          };
           if (opts.diskSpec !== undefined && opts.diskSpec !== null) {
               postBody['diskSpec'] = opts.diskSpec
           }
           if (opts.maxCount !== undefined && opts.maxCount !== null) {
               postBody['maxCount'] = opts.maxCount
           }
           if (opts.clientToken !== undefined && opts.clientToken !== null) {
               postBody['clientToken'] = opts.clientToken
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  disk/0.12.0',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call createDisks with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/disks', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询某一块云硬盘的信息详情
      * @param {Object} opts - parameters
      * @param {string} opts.diskId - 云硬盘ID 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param disk disk  
      */

    describeDisk(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeDisk');
          }

         opts = opts || {};

          if (opts.diskId === undefined || opts.diskId === null) {
               throw new Error('Missing the required parameter \'opts.diskId\' when calling describeDisk');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'diskId': opts.diskId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  disk/0.12.0',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeDisk with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/disks/{diskId}', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  修改云硬盘的名字或描述信息，名字或描述信息至少要指定一个。
      * @param {Object} opts - parameters
      * @param {string} opts.diskId - 云硬盘ID 
      * @param {string} [opts.name] - 云硬盘名称，只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符。  optional 
      * @param {string} [opts.description] - 云硬盘描述，允许输入UTF-8编码下的全部字符，不超过256字符。  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    modifyDiskAttribute(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  modifyDiskAttribute');
          }

         opts = opts || {};

          if (opts.diskId === undefined || opts.diskId === null) {
               throw new Error('Missing the required parameter \'opts.diskId\' when calling modifyDiskAttribute');
          }

         let postBody =   {
          };
           if (opts.name !== undefined && opts.name !== null) {
               postBody['name'] = opts.name
           }
           if (opts.description !== undefined && opts.description !== null) {
               postBody['description'] = opts.description
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'diskId': opts.diskId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  disk/0.12.0',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call modifyDiskAttribute with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/disks/{diskId}', 'PATCH', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  -   删除一块按配置计费的云硬盘，云盘类型包括高效云盘、SSD云盘、通用型SSD、性能型SSD和容量型HDD。
-   删除云盘时，云盘的状态必须为 待挂载（Available）。
-   云盘被删除后，云硬盘快照可以被保留。

      * @param {Object} opts - parameters
      * @param {string} opts.diskId - 云硬盘ID 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteDisk(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  deleteDisk');
          }

         opts = opts || {};

          if (opts.diskId === undefined || opts.diskId === null) {
               throw new Error('Missing the required parameter \'opts.diskId\' when calling deleteDisk');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'diskId': opts.diskId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  disk/0.12.0',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteDisk with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/disks/{diskId}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  -   仅可对制作快照的源硬盘进行数据恢复操作。
-   仅源硬盘处于可用状态时才能使用快照进行数据恢复操作。
-   云硬盘恢复后，当前数据将被清除，请您谨慎操作。

      * @param {Object} opts - parameters
      * @param {string} opts.diskId - 云硬盘ID 
      * @param {string} opts.snapshotId - 用于恢复云盘的快照ID 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    restoreDisk(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  restoreDisk');
          }

         opts = opts || {};

          if (opts.diskId === undefined || opts.diskId === null) {
               throw new Error('Missing the required parameter \'opts.diskId\' when calling restoreDisk');
          }
          if (opts.snapshotId === undefined || opts.snapshotId === null) {
               throw new Error('Missing the required parameter \'opts.snapshotId\' when calling restoreDisk');
          }

         let postBody =   {
          };
           if (opts.snapshotId !== undefined && opts.snapshotId !== null) {
               postBody['snapshotId'] = opts.snapshotId
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'diskId': opts.diskId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  disk/0.12.0',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call restoreDisk with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/disks/{diskId}:restore', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  -   扩容云硬盘到指定大小，云硬盘状态必须为 available。
-   当云硬盘正在创建快照时，不允许扩容。

      * @param {Object} opts - parameters
      * @param {string} opts.diskId - 云硬盘ID 
      * @param {integer} opts.diskSizeGB - 扩容后的云硬盘大小，单位为GiB 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    extendDisk(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  extendDisk');
          }

         opts = opts || {};

          if (opts.diskId === undefined || opts.diskId === null) {
               throw new Error('Missing the required parameter \'opts.diskId\' when calling extendDisk');
          }
          if (opts.diskSizeGB === undefined || opts.diskSizeGB === null) {
               throw new Error('Missing the required parameter \'opts.diskSizeGB\' when calling extendDisk');
          }

         let postBody =   {
          };
           if (opts.diskSizeGB !== undefined && opts.diskSizeGB !== null) {
               postBody['diskSizeGB'] = opts.diskSizeGB
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'diskId': opts.diskId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  disk/0.12.0',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call extendDisk with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/disks/{diskId}:extend', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询云硬盘快照列表，filters多个过滤条件之间是逻辑与(AND)，每个条件内部的多个取值是逻辑或(OR)
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNumber] - 页码, 默认为1, 取值范围：[1,∞)  optional 
      * @param {integer} [opts.pageSize] - 分页大小，默认为20，取值范围：[10,100]  optional 
      * @param {string} [opts.snapshotSource] - 查找快照的类型，可以为private，others，shared，默认为private  optional 
      * @param {filter} [opts.filters] - snapshotId - 云硬盘快照ID，支持多个
diskId - 生成快照的云硬盘ID，支持多个
status - 快照状态，精确匹配，支持多个,取值为 creating、available、copying、deleting、error_create、error_delete
name - 快照名称，模糊匹配，支持单个
  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param snapshot snapshots  
      * @param integer totalCount  查询的快照数目
      */

    describeSnapshots(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeSnapshots');
          }

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
           if (opts.snapshotSource !== undefined && opts.snapshotSource !== null) {
               queryParams['snapshotSource'] = opts.snapshotSource
           }
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  disk/0.12.0',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeSnapshots with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/snapshots', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  -   为指定云硬盘创建快照，新生成的快照的状态为creating。
-   同一地域下单用户快照的配额为15块。
-   为保证数据完整性，请您在创建快照之前，停止对云硬盘进行写入操作，以保证快照数据的完整性。
-   在执行创建快照前，建议您对云硬盘进行卸载操作，创建快照后再重新挂载到云主机上。
-   手动快照的生命周期独立于云硬盘，请您及时删除不需要的快照。
-   创建快照所需时间取决于云硬盘容量的大小，云硬盘容量越大耗时越长。

      * @param {Object} opts - parameters
      * @param {snapshotSpec} opts.snapshotSpec - 创建快照规格 
      * @param {string} opts.clientToken - 幂等性校验参数 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string snapshotId  创建的快照ID
      */

    createSnapshot(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  createSnapshot');
          }

         opts = opts || {};

          if (opts.snapshotSpec === undefined || opts.snapshotSpec === null) {
               throw new Error('Missing the required parameter \'opts.snapshotSpec\' when calling createSnapshot');
          }
          if (opts.clientToken === undefined || opts.clientToken === null) {
               throw new Error('Missing the required parameter \'opts.clientToken\' when calling createSnapshot');
          }

         let postBody =   {
          };
           if (opts.snapshotSpec !== undefined && opts.snapshotSpec !== null) {
               postBody['snapshotSpec'] = opts.snapshotSpec
           }
           if (opts.clientToken !== undefined && opts.clientToken !== null) {
               postBody['clientToken'] = opts.clientToken
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  disk/0.12.0',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call createSnapshot with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/snapshots', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询云硬盘快照信息详情
      * @param {Object} opts - parameters
      * @param {string} opts.snapshotId - 快照ID 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param snapshot snapshot  
      */

    describeSnapshot(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeSnapshot');
          }

         opts = opts || {};

          if (opts.snapshotId === undefined || opts.snapshotId === null) {
               throw new Error('Missing the required parameter \'opts.snapshotId\' when calling describeSnapshot');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'snapshotId': opts.snapshotId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  disk/0.12.0',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeSnapshot with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/snapshots/{snapshotId}', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  修改快照的名字或描述信息
      * @param {Object} opts - parameters
      * @param {string} opts.snapshotId - 快照ID 
      * @param {string} [opts.name] - 快照名称  optional 
      * @param {string} [opts.description] - 快照描述，name和description必须要指定一个  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    modifySnapshotAttribute(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  modifySnapshotAttribute');
          }

         opts = opts || {};

          if (opts.snapshotId === undefined || opts.snapshotId === null) {
               throw new Error('Missing the required parameter \'opts.snapshotId\' when calling modifySnapshotAttribute');
          }

         let postBody =   {
          };
           if (opts.name !== undefined && opts.name !== null) {
               postBody['name'] = opts.name
           }
           if (opts.description !== undefined && opts.description !== null) {
               postBody['description'] = opts.description
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'snapshotId': opts.snapshotId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  disk/0.12.0',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call modifySnapshotAttribute with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/snapshots/{snapshotId}', 'PATCH', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  -   删除单个云硬盘快照:快照状态必须为 available 或 error 状态。
-   快照独立于云硬盘生命周期，删除快照不会对创建快照的云硬盘有任何影响。
-   快照删除后不可恢复，请谨慎操作。

      * @param {Object} opts - parameters
      * @param {string} opts.snapshotId - 快照ID 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteSnapshot(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  deleteSnapshot');
          }

         opts = opts || {};

          if (opts.snapshotId === undefined || opts.snapshotId === null) {
               throw new Error('Missing the required parameter \'opts.snapshotId\' when calling deleteSnapshot');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'snapshotId': opts.snapshotId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  disk/0.12.0',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteSnapshot with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/snapshots/{snapshotId}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

};
module.exports = JDCloud.DISK
