/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 域名
 * httpdns OpenAPI域名接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

require('../../../lib/node_loader');
var JDCloud = require('../../../lib/core');
var Service = JDCloud.Service;
var serviceId = "httpdns"
Service._services[serviceId] = true;

/**
* httpdns service.
* @version 1.0.0
*/

JDCloud.HTTPDNS= class HTTPDNS extends Service {
    constructor(options = {}) {
            options._defaultEndpoint = {};
            options._defaultEndpoint.protocol = options._defaultEndpoint.protocol || 'https';
            options._defaultEndpoint.host = options._defaultEndpoint.host || 'httpdns.jdcloud-api.com';
            options.basePath = '/v1'; //默认要设为空""
            super( serviceId , options);
    }

      /**
      *  查询用户名下httpdns的账户ID
      * @param {Object} opts - parameters
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param accountId data  查询得到的账户ID结构
      */

    getAccountId(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  getAccountId');
          }

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  httpdns/1.0.0',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call getAccountId with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/account', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  创建httpdns账户
      * @param {Object} opts - parameters
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param account data  开户成功后得到的账户结构
      */

    createAccount(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  createAccount');
          }

         opts = opts || {};


         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  httpdns/1.0.0',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call createAccount with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/account/createAccount', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询httpdns账户的基本信息
      * @param {Object} opts - parameters
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param account data  查询得到的账户结构
      */

    getAccountInfo(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  getAccountInfo');
          }

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  httpdns/1.0.0',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call getAccountInfo with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/accountInfo', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  创建，启用，禁用httpdns服务密钥
      * @param {Object} opts - parameters
      * @param {} [opts.action] - 操作类型, create创建, enable启用, disable禁用  optional 
      * @param {} [opts.key] - 操作的密钥  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    operateKey(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  operateKey');
          }

         opts = opts || {};


         let postBody =   {
          };
           if (opts.action !== undefined && opts.action !== null) {
               postBody['action'] = opts.action
           }
           if (opts.key !== undefined && opts.key !== null) {
               postBody['key'] = opts.key
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  httpdns/1.0.0',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call operateKey with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/account/operateKey', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询使用httpdns服务的域名
      * @param {Object} opts - parameters
      * @param {integer} opts.pageIndex - 当前页数，起始值为1 
      * @param {integer} opts.pageSize - 分页查询时设置的每页行数 
      * @param {string} [opts.domainName] - 关键字，按照”%domainName%”模式搜索域名  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param domainData data  分页查询返回的域名数据结构
      */

    getDomains(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  getDomains');
          }

         opts = opts || {};

          if (opts.pageIndex === undefined || opts.pageIndex === null) {
               throw new Error('Missing the required parameter \'opts.pageIndex\' when calling getDomains');
          }
          if (opts.pageSize === undefined || opts.pageSize === null) {
               throw new Error('Missing the required parameter \'opts.pageSize\' when calling getDomains');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.pageIndex !== undefined && opts.pageIndex !== null) {
               queryParams['pageIndex'] = opts.pageIndex
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
           if (opts.domainName !== undefined && opts.domainName !== null) {
               queryParams['domainName'] = opts.domainName
           }

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  httpdns/1.0.0',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call getDomains with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/domain', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  添加域名。&lt;br&gt;
可以添加顶级域名除外的多级域名。

      * @param {Object} opts - parameters
      * @param {array} opts.domainNames - 需要添加的域名数组 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    addDomains(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  addDomains');
          }

         opts = opts || {};

          if (opts.domainNames === undefined || opts.domainNames === null) {
               throw new Error('Missing the required parameter \'opts.domainNames\' when calling addDomains');
          }

         let postBody =   {
          };
           if (opts.domainNames !== undefined && opts.domainNames !== null) {
               postBody['domainNames'] = opts.domainNames
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  httpdns/1.0.0',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call addDomains with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/domain/addDomain', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除域名
      * @param {Object} opts - parameters
      * @param {array} opts.domainNames - 需要删除的域名数组 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    delDomains(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  delDomains');
          }

         opts = opts || {};

          if (opts.domainNames === undefined || opts.domainNames === null) {
               throw new Error('Missing the required parameter \'opts.domainNames\' when calling delDomains');
          }

         let postBody =   {
          };
           if (opts.domainNames !== undefined && opts.domainNames !== null) {
               postBody['domainNames'] = opts.domainNames
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  httpdns/1.0.0',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call delDomains with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/domain/delDomain', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

};
module.exports = JDCloud.HTTPDNS
