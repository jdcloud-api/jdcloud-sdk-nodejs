/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Secret Management Service
 * 基于硬件保护机密的安全数据托管服务
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

require('../../../lib/node_loader');
var JDCloud = require('../../../lib/core');
var Service = JDCloud.Service;
var serviceId = "kms"
Service._services[serviceId] = true;

/**
* kms service.
* @version 0.1.1
*/

JDCloud.KMS= class KMS extends Service {
    constructor(options = {}) {
            options._defaultEndpoint = {};
            options._defaultEndpoint.protocol = options._defaultEndpoint.protocol || 'https';
            options._defaultEndpoint.host = options._defaultEndpoint.host || 'kms.jdcloud-api.com';
            options.basePath = '/v1'; //默认要设为空""
            super( serviceId , options);
    }

      /**
      *  获取密钥列表
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNumber] - 页码；默认为1  optional 
      * @param {integer} [opts.pageSize] - 分页大小；默认为10；取值范围[10, 100]  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param keyInfo keyList  
      * @param integer totalCount  Key的数量
      */

    describeKeyList(opts, callback){

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeKeyList with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/key', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  创建一个CMK（用户主密钥），默认为启用状态
      * @param {Object} opts - parameters
      * @param {keyCfg} opts.keyCfg  
      * @param {string} callback - callback
      @return {Object} result
      */

    createKey(opts, callback){

         opts = opts || {};

          if (opts.keyCfg === undefined || opts.keyCfg === null) {
               throw new Error('Missing the required parameter \'opts.keyCfg\' when calling createKey');
          }

         let postBody =   {
          };
           if (opts.keyCfg !== undefined && opts.keyCfg !== null) {
               postBody['keyCfg'] = opts.keyCfg
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call createKey with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/key:create', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  获取密钥详情
      * @param {Object} opts - parameters
      * @param {string} opts.keyId - 密钥ID 
      * @param {string} callback - callback
      @return {Object} result
      * @param keyInfo keyInfo  
      */

    describeKey(opts, callback){

         opts = opts || {};

          if (opts.keyId === undefined || opts.keyId === null) {
               throw new Error('Missing the required parameter \'opts.keyId\' when calling describeKey');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'keyId': opts.keyId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeKey with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/key/{keyId}', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  修改密钥配置，包括key的名称、用途、是否自动轮换和轮换周期等
      * @param {Object} opts - parameters
      * @param {string} opts.keyId - 密钥ID 
      * @param {keyCfg} opts.keyCfg  
      * @param {string} callback - callback
      @return {Object} result
      */

    updateKeyDescription(opts, callback){

         opts = opts || {};

          if (opts.keyId === undefined || opts.keyId === null) {
               throw new Error('Missing the required parameter \'opts.keyId\' when calling updateKeyDescription');
          }
          if (opts.keyCfg === undefined || opts.keyCfg === null) {
               throw new Error('Missing the required parameter \'opts.keyCfg\' when calling updateKeyDescription');
          }

         let postBody =   {
          };
           if (opts.keyCfg !== undefined && opts.keyCfg !== null) {
               postBody['keyCfg'] = opts.keyCfg
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'keyId': opts.keyId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call updateKeyDescription with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/key/{keyId}', 'PATCH', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  启用当前状态为&#x60;已禁用&#x60;的密钥
      * @param {Object} opts - parameters
      * @param {string} opts.keyId - 密钥ID 
      * @param {string} callback - callback
      @return {Object} result
      */

    enableKey(opts, callback){

         opts = opts || {};

          if (opts.keyId === undefined || opts.keyId === null) {
               throw new Error('Missing the required parameter \'opts.keyId\' when calling enableKey');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'keyId': opts.keyId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call enableKey with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/key/{keyId}:enable', 'PATCH', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  禁用当前状态为&#x60;已启用&#x60;的密钥
      * @param {Object} opts - parameters
      * @param {string} opts.keyId - 密钥ID 
      * @param {string} callback - callback
      @return {Object} result
      */

    disableKey(opts, callback){

         opts = opts || {};

          if (opts.keyId === undefined || opts.keyId === null) {
               throw new Error('Missing the required parameter \'opts.keyId\' when calling disableKey');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'keyId': opts.keyId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call disableKey with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/key/{keyId}:disable', 'PATCH', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  计划在以后的是个时间点删除密钥，默认为7天
      * @param {Object} opts - parameters
      * @param {string} opts.keyId - 密钥ID 
      * @param {integer} [opts.delayDays] - 延迟删除时间，单位（天），默认为7天；支持时间范围：7~30天  optional 
      * @param {string} callback - callback
      @return {Object} result
      */

    scheduleKeyDeletion(opts, callback){

         opts = opts || {};

          if (opts.keyId === undefined || opts.keyId === null) {
               throw new Error('Missing the required parameter \'opts.keyId\' when calling scheduleKeyDeletion');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.delayDays !== undefined && opts.delayDays !== null) {
               queryParams['delayDays'] = opts.delayDays
           }

          let pathParams = {
               'regionId': 'jdcloud',
               'keyId': opts.keyId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call scheduleKeyDeletion with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/key/{keyId}:delete', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  取消删除密钥
      * @param {Object} opts - parameters
      * @param {string} opts.keyId - 密钥ID 
      * @param {string} callback - callback
      @return {Object} result
      */

    cancelKeyDeletion(opts, callback){

         opts = opts || {};

          if (opts.keyId === undefined || opts.keyId === null) {
               throw new Error('Missing the required parameter \'opts.keyId\' when calling cancelKeyDeletion');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'keyId': opts.keyId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call cancelKeyDeletion with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/key/{keyId}:cancelDelete', 'PATCH', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  立即轮换密钥，自动轮换周期顺延
      * @param {Object} opts - parameters
      * @param {string} opts.keyId - 密钥ID 
      * @param {string} callback - callback
      @return {Object} result
      */

    keyRotation(opts, callback){

         opts = opts || {};

          if (opts.keyId === undefined || opts.keyId === null) {
               throw new Error('Missing the required parameter \'opts.keyId\' when calling keyRotation');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'keyId': opts.keyId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call keyRotation with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/key/{keyId}:rotate', 'PATCH', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  使用密钥对数据进行加密
      * @param {Object} opts - parameters
      * @param {string} opts.keyId - 密钥ID 
      * @param {} [opts.plaintext] - 明文数据 Base64-encoded binary data object  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param string ciphertextBlob  密文数据 Base64-encoded binary data object
      */

    encrypt(opts, callback){

         opts = opts || {};

          if (opts.keyId === undefined || opts.keyId === null) {
               throw new Error('Missing the required parameter \'opts.keyId\' when calling encrypt');
          }

         let postBody =   {
          };
           if (opts.plaintext !== undefined && opts.plaintext !== null) {
               postBody['plaintext'] = opts.plaintext
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'keyId': opts.keyId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call encrypt with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/key/{keyId}:Encrypt', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  使用密钥对数据进行解密
      * @param {Object} opts - parameters
      * @param {string} opts.keyId - 密钥ID 
      * @param {} [opts.ciphertextBlob] - 密文数据 Base64-encoded binary data object  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param string plaintext  明文数据 Base64-encoded binary data object
      */

    decrypt(opts, callback){

         opts = opts || {};

          if (opts.keyId === undefined || opts.keyId === null) {
               throw new Error('Missing the required parameter \'opts.keyId\' when calling decrypt');
          }

         let postBody =   {
          };
           if (opts.ciphertextBlob !== undefined && opts.ciphertextBlob !== null) {
               postBody['ciphertextBlob'] = opts.ciphertextBlob
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'keyId': opts.keyId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call decrypt with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/key/{keyId}:Decrypt', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  从KMS中获取一对数据密钥的明文/密文
      * @param {Object} opts - parameters
      * @param {string} opts.keyId - 密钥ID 
      * @param {string} callback - callback
      @return {Object} result
      * @param string plaintext  明文DEK Base64-encoded binary data object
      * @param string ciphertextBlob  密文DEK Base64-encoded binary data object
      */

    generateDataKey(opts, callback){

         opts = opts || {};

          if (opts.keyId === undefined || opts.keyId === null) {
               throw new Error('Missing the required parameter \'opts.keyId\' when calling generateDataKey');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'keyId': opts.keyId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call generateDataKey with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/key/{keyId}:GenerateDataKey', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  获取版本详情
      * @param {Object} opts - parameters
      * @param {string} opts.keyId - 密钥ID 
      * @param {integer} [opts.pageNumber] - 页码；默认为1  optional 
      * @param {integer} [opts.pageSize] - 分页大小；默认为10；取值范围[10, 100]  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param keyDetail keyDetail  
      */

    describeKeyDetail(opts, callback){

         opts = opts || {};

          if (opts.keyId === undefined || opts.keyId === null) {
               throw new Error('Missing the required parameter \'opts.keyId\' when calling describeKeyDetail');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }

          let pathParams = {
               'regionId': 'jdcloud',
               'keyId': opts.keyId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeKeyDetail with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/key/{keyId}:describeKeyDetail', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  启用指定版本密钥
      * @param {Object} opts - parameters
      * @param {string} opts.keyId - 密钥ID 
      * @param {string} opts.version - 密钥版本 
      * @param {string} callback - callback
      @return {Object} result
      */

    enableKeyVersion(opts, callback){

         opts = opts || {};

          if (opts.keyId === undefined || opts.keyId === null) {
               throw new Error('Missing the required parameter \'opts.keyId\' when calling enableKeyVersion');
          }
          if (opts.version === undefined || opts.version === null) {
               throw new Error('Missing the required parameter \'opts.version\' when calling enableKeyVersion');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'keyId': opts.keyId ,
               'version': opts.version 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call enableKeyVersion with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/key/{keyId}/version/{version}:enable', 'PATCH', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  禁用指定版本密钥
      * @param {Object} opts - parameters
      * @param {string} opts.keyId - 密钥ID 
      * @param {string} opts.version - 密钥版本 
      * @param {string} callback - callback
      @return {Object} result
      */

    disableKeyVersion(opts, callback){

         opts = opts || {};

          if (opts.keyId === undefined || opts.keyId === null) {
               throw new Error('Missing the required parameter \'opts.keyId\' when calling disableKeyVersion');
          }
          if (opts.version === undefined || opts.version === null) {
               throw new Error('Missing the required parameter \'opts.version\' when calling disableKeyVersion');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'keyId': opts.keyId ,
               'version': opts.version 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call disableKeyVersion with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/key/{keyId}/version/{version}:disable', 'PATCH', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  计划在以后的是个时间点删除指定版本密钥，默认为7天
      * @param {Object} opts - parameters
      * @param {string} opts.keyId - 密钥ID 
      * @param {string} opts.version - 密钥版本 
      * @param {integer} [opts.delayDays] - 延迟删除时间，单位（天），默认为7天；支持时间范围：7~30天  optional 
      * @param {string} callback - callback
      @return {Object} result
      */

    scheduleKeyVersionDeletion(opts, callback){

         opts = opts || {};

          if (opts.keyId === undefined || opts.keyId === null) {
               throw new Error('Missing the required parameter \'opts.keyId\' when calling scheduleKeyVersionDeletion');
          }
          if (opts.version === undefined || opts.version === null) {
               throw new Error('Missing the required parameter \'opts.version\' when calling scheduleKeyVersionDeletion');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.delayDays !== undefined && opts.delayDays !== null) {
               queryParams['delayDays'] = opts.delayDays
           }

          let pathParams = {
               'regionId': 'jdcloud',
               'keyId': opts.keyId ,
               'version': opts.version 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call scheduleKeyVersionDeletion with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/key/{keyId}/version/{version}:delete', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  取消删除指定版本密钥
      * @param {Object} opts - parameters
      * @param {string} opts.keyId - 密钥ID 
      * @param {string} opts.version - 密钥版本 
      * @param {string} callback - callback
      @return {Object} result
      */

    cancelKeyVersionDeletion(opts, callback){

         opts = opts || {};

          if (opts.keyId === undefined || opts.keyId === null) {
               throw new Error('Missing the required parameter \'opts.keyId\' when calling cancelKeyVersionDeletion');
          }
          if (opts.version === undefined || opts.version === null) {
               throw new Error('Missing the required parameter \'opts.version\' when calling cancelKeyVersionDeletion');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'keyId': opts.keyId ,
               'version': opts.version 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call cancelKeyVersionDeletion with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/key/{keyId}/version/{version}:cancelDelete', 'PATCH', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  获取机密列表
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNumber] - 页码；默认为1  optional 
      * @param {integer} [opts.pageSize] - 分页大小；默认为10；取值范围[10, 100]  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param secretInfo secretList  
      * @param integer totalCount  Secret的数量
      */

    describeSecretList(opts, callback){

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeSecretList with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/secret', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  创建机密
      * @param {Object} opts - parameters
      * @param {secretCfg} opts.secretCfg  
      * @param {string} callback - callback
      @return {Object} result
      */

    createSecret(opts, callback){

         opts = opts || {};

          if (opts.secretCfg === undefined || opts.secretCfg === null) {
               throw new Error('Missing the required parameter \'opts.secretCfg\' when calling createSecret');
          }

         let postBody =   {
          };
           if (opts.secretCfg !== undefined && opts.secretCfg !== null) {
               postBody['secretCfg'] = opts.secretCfg
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call createSecret with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/secret:create', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  导入机密
      * @param {Object} opts - parameters
      * @param {} [opts.secretPackage] - 密钥包的内容  optional 
      * @param {string} callback - callback
      @return {Object} result
      */

    importSecret(opts, callback){

         opts = opts || {};


         let postBody =   {
          };
           if (opts.secretPackage !== undefined && opts.secretPackage !== null) {
               postBody['secretPackage'] = opts.secretPackage
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call importSecret with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/secret:import', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  获取机密详情
      * @param {Object} opts - parameters
      * @param {string} opts.secretId - 机密ID 
      * @param {integer} [opts.pageNumber] - 页码；默认为1  optional 
      * @param {integer} [opts.pageSize] - 分页大小；默认为10；取值范围[10, 100]  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param secretDetail secretDetail  
      */

    describeSecretVersionList(opts, callback){

         opts = opts || {};

          if (opts.secretId === undefined || opts.secretId === null) {
               throw new Error('Missing the required parameter \'opts.secretId\' when calling describeSecretVersionList');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }

          let pathParams = {
               'regionId': 'jdcloud',
               'secretId': opts.secretId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeSecretVersionList with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/secret/{secretId}', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  修改机密描述
      * @param {Object} opts - parameters
      * @param {string} opts.secretId - 机密ID 
      * @param {secretDescCfg} opts.secretDescCfg  
      * @param {string} callback - callback
      @return {Object} result
      */

    updateSecret(opts, callback){

         opts = opts || {};

          if (opts.secretId === undefined || opts.secretId === null) {
               throw new Error('Missing the required parameter \'opts.secretId\' when calling updateSecret');
          }
          if (opts.secretDescCfg === undefined || opts.secretDescCfg === null) {
               throw new Error('Missing the required parameter \'opts.secretDescCfg\' when calling updateSecret');
          }

         let postBody =   {
          };
           if (opts.secretDescCfg !== undefined && opts.secretDescCfg !== null) {
               postBody['secretDescCfg'] = opts.secretDescCfg
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'secretId': opts.secretId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call updateSecret with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/secret/{secretId}', 'PATCH', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  启用机密
      * @param {Object} opts - parameters
      * @param {string} opts.secretId - 机密ID 
      * @param {string} callback - callback
      @return {Object} result
      */

    enableSecret(opts, callback){

         opts = opts || {};

          if (opts.secretId === undefined || opts.secretId === null) {
               throw new Error('Missing the required parameter \'opts.secretId\' when calling enableSecret');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'secretId': opts.secretId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call enableSecret with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/secret/{secretId}:enable', 'PATCH', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  禁用机密
      * @param {Object} opts - parameters
      * @param {string} opts.secretId - 机密ID 
      * @param {string} callback - callback
      @return {Object} result
      */

    disableSecret(opts, callback){

         opts = opts || {};

          if (opts.secretId === undefined || opts.secretId === null) {
               throw new Error('Missing the required parameter \'opts.secretId\' when calling disableSecret');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'secretId': opts.secretId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call disableSecret with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/secret/{secretId}:disable', 'PATCH', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除机密
      * @param {Object} opts - parameters
      * @param {string} opts.secretId - 机密ID 
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteSecret(opts, callback){

         opts = opts || {};

          if (opts.secretId === undefined || opts.secretId === null) {
               throw new Error('Missing the required parameter \'opts.secretId\' when calling deleteSecret');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'secretId': opts.secretId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteSecret with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/secret/{secretId}:delete', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  创建机密新的版本，默认为已启用状态
      * @param {Object} opts - parameters
      * @param {string} opts.secretId - 机密ID 
      * @param {secretVersionCfg} opts.secretVersionCfg  
      * @param {string} callback - callback
      @return {Object} result
      */

    createSecretVersion(opts, callback){

         opts = opts || {};

          if (opts.secretId === undefined || opts.secretId === null) {
               throw new Error('Missing the required parameter \'opts.secretId\' when calling createSecretVersion');
          }
          if (opts.secretVersionCfg === undefined || opts.secretVersionCfg === null) {
               throw new Error('Missing the required parameter \'opts.secretVersionCfg\' when calling createSecretVersion');
          }

         let postBody =   {
          };
           if (opts.secretVersionCfg !== undefined && opts.secretVersionCfg !== null) {
               postBody['secretVersionCfg'] = opts.secretVersionCfg
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'secretId': opts.secretId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call createSecretVersion with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/secret/{secretId}:createSecretVersion', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  导出机密
      * @param {Object} opts - parameters
      * @param {string} opts.secretId - 机密ID 
      * @param {string} callback - callback
      @return {Object} result
      * @param string secretPackage  机密包
      */

    exportSecret(opts, callback){

         opts = opts || {};

          if (opts.secretId === undefined || opts.secretId === null) {
               throw new Error('Missing the required parameter \'opts.secretId\' when calling exportSecret');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'secretId': opts.secretId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call exportSecret with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/secret/{secretId}:export', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  获取指定机密版本的详细信息
      * @param {Object} opts - parameters
      * @param {string} opts.secretId - 机密ID 
      * @param {string} opts.version - 机密版本 
      * @param {string} callback - callback
      @return {Object} result
      * @param secretVersionItem secretVersionItem  
      */

    describeSecretVersionInfo(opts, callback){

         opts = opts || {};

          if (opts.secretId === undefined || opts.secretId === null) {
               throw new Error('Missing the required parameter \'opts.secretId\' when calling describeSecretVersionInfo');
          }
          if (opts.version === undefined || opts.version === null) {
               throw new Error('Missing the required parameter \'opts.version\' when calling describeSecretVersionInfo');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'secretId': opts.secretId ,
               'version': opts.version 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeSecretVersionInfo with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/secret/{secretId}/version/{version}', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  修改机密指定版本配置
      * @param {Object} opts - parameters
      * @param {string} opts.secretId - 机密ID 
      * @param {string} opts.version - 机密版本 
      * @param {secretTimeCfg} opts.secretTimeCfg  
      * @param {string} callback - callback
      @return {Object} result
      */

    updateSecretVersion(opts, callback){

         opts = opts || {};

          if (opts.secretId === undefined || opts.secretId === null) {
               throw new Error('Missing the required parameter \'opts.secretId\' when calling updateSecretVersion');
          }
          if (opts.version === undefined || opts.version === null) {
               throw new Error('Missing the required parameter \'opts.version\' when calling updateSecretVersion');
          }
          if (opts.secretTimeCfg === undefined || opts.secretTimeCfg === null) {
               throw new Error('Missing the required parameter \'opts.secretTimeCfg\' when calling updateSecretVersion');
          }

         let postBody =   {
          };
           if (opts.secretTimeCfg !== undefined && opts.secretTimeCfg !== null) {
               postBody['secretTimeCfg'] = opts.secretTimeCfg
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'secretId': opts.secretId ,
               'version': opts.version 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call updateSecretVersion with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/secret/{secretId}/version/{version}', 'PATCH', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  启用指定版本机密
      * @param {Object} opts - parameters
      * @param {string} opts.secretId - 机密ID 
      * @param {string} opts.version - 机密版本 
      * @param {string} callback - callback
      @return {Object} result
      */

    enableSecretVersion(opts, callback){

         opts = opts || {};

          if (opts.secretId === undefined || opts.secretId === null) {
               throw new Error('Missing the required parameter \'opts.secretId\' when calling enableSecretVersion');
          }
          if (opts.version === undefined || opts.version === null) {
               throw new Error('Missing the required parameter \'opts.version\' when calling enableSecretVersion');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'secretId': opts.secretId ,
               'version': opts.version 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call enableSecretVersion with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/secret/{secretId}/version/{version}:enable', 'PATCH', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  禁用指定版本机密
      * @param {Object} opts - parameters
      * @param {string} opts.secretId - 机密ID 
      * @param {string} opts.version - 机密版本 
      * @param {string} callback - callback
      @return {Object} result
      */

    disableSecretVersion(opts, callback){

         opts = opts || {};

          if (opts.secretId === undefined || opts.secretId === null) {
               throw new Error('Missing the required parameter \'opts.secretId\' when calling disableSecretVersion');
          }
          if (opts.version === undefined || opts.version === null) {
               throw new Error('Missing the required parameter \'opts.version\' when calling disableSecretVersion');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'secretId': opts.secretId ,
               'version': opts.version 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call disableSecretVersion with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/secret/{secretId}/version/{version}:disable', 'PATCH', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除指定版本机密
      * @param {Object} opts - parameters
      * @param {string} opts.secretId - 机密ID 
      * @param {string} opts.version - 机密版本 
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteSecretVersion(opts, callback){

         opts = opts || {};

          if (opts.secretId === undefined || opts.secretId === null) {
               throw new Error('Missing the required parameter \'opts.secretId\' when calling deleteSecretVersion');
          }
          if (opts.version === undefined || opts.version === null) {
               throw new Error('Missing the required parameter \'opts.version\' when calling deleteSecretVersion');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'secretId': opts.secretId ,
               'version': opts.version 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  kms/0.1.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteSecretVersion with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/secret/{secretId}/version/{version}:delete', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

};
module.exports = JDCloud.KMS
