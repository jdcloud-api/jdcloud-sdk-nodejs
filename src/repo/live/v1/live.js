/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Live API
 * 直播管理API
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

require('../../../lib/node_loader');
var JDCloud = require('../../../lib/core');
var Service = JDCloud.Service;
var serviceId = "live"
Service._services[serviceId] = true;

/**
* live service.
* @version 1.0.1
*/

JDCloud.LIVE= class LIVE extends Service {
    constructor(options = {}) {
            options._defaultEndpoint = {};
            options._defaultEndpoint.protocol = options._defaultEndpoint.protocol || 'https';
            options._defaultEndpoint.host = options._defaultEndpoint.host || 'live.jdcloud-api.com';
            options.basePath = '/v1'; //默认要设为空""
            super( serviceId , options);
    }

      /**
      *  查询域名下的APP列表
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNum] - 页码；默认为1；取值范围[1, 100000]  optional 
      * @param {integer} [opts.pageSize] - 分页大小；默认为10；取值范围[10, 100]  optional 
      * @param {filter} [opts.filters] - 域名下的app列表过滤条件, 不传递分页参数时默认返回10条  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param number totalCount  查询总数
      * @param app apps  
      */

    describeLiveApp(opts, callback){

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNum !== undefined && opts.pageNum !== null) {
               queryParams['pageNum'] = opts.pageNum
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeLiveApp with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/apps', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  添加直播APP
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 直播的推流域名 
      * @param {string} opts.appName - appName 
      * @param {string} callback - callback
      @return {Object} result
      */

    addLiveApp(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling addLiveApp');
          }
          if (opts.appName === undefined || opts.appName === null) {
               throw new Error('Missing the required parameter \'opts.appName\' when calling addLiveApp');
          }

         let postBody =   {
          };
           if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
               postBody['publishDomain'] = opts.publishDomain
           }
           if (opts.appName !== undefined && opts.appName !== null) {
               postBody['appName'] = opts.appName
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call addLiveApp with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/apps', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  启用APP
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 直播的推流域名 
      * @param {string} opts.appName - appName 
      * @param {string} callback - callback
      @return {Object} result
      */

    startLiveApp(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling startLiveApp');
          }
          if (opts.appName === undefined || opts.appName === null) {
               throw new Error('Missing the required parameter \'opts.appName\' when calling startLiveApp');
          }

         let postBody =   {
          };
           if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
               postBody['publishDomain'] = opts.publishDomain
           }
           if (opts.appName !== undefined && opts.appName !== null) {
               postBody['appName'] = opts.appName
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call startLiveApp with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/apps:start', 'PUT', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  停用APP
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 直播的推流域名 
      * @param {string} opts.appName - appName 
      * @param {string} callback - callback
      @return {Object} result
      */

    stopLiveApp(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling stopLiveApp');
          }
          if (opts.appName === undefined || opts.appName === null) {
               throw new Error('Missing the required parameter \'opts.appName\' when calling stopLiveApp');
          }

         let postBody =   {
          };
           if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
               postBody['publishDomain'] = opts.publishDomain
           }
           if (opts.appName !== undefined && opts.appName !== null) {
               postBody['appName'] = opts.appName
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call stopLiveApp with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/apps:stop', 'PUT', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除APP
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名 
      * @param {string} opts.appName - 直播流所属应用名称 
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteLiveApp(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling deleteLiveApp');
          }
          if (opts.appName === undefined || opts.appName === null) {
               throw new Error('Missing the required parameter \'opts.appName\' when calling deleteLiveApp');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'publishDomain': opts.publishDomain ,
               'appName': opts.appName 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteLiveApp with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/apps/{publishDomain}/appNames/{appName}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询域名列表
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNum] - 页码；默认为1；取值范围[1, 100000]  optional 
      * @param {integer} [opts.pageSize] - 分页大小；默认为10；取值范围[10, 100]  optional 
      * @param {string} [opts.publishDomain] - 域名  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param number totalCount  查询总数
      * @param domainDetails domainDetails  
      */

    describeLiveDomains(opts, callback){

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNum !== undefined && opts.pageNum !== null) {
               queryParams['pageNum'] = opts.pageNum
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
           if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
               queryParams['publishDomain'] = opts.publishDomain
           }

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeLiveDomains with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/domains', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  添加直播域名
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 直播的推流域名 
      * @param {string} opts.playDomain - 直播的播放域名 
      * @param {string} callback - callback
      @return {Object} result
      */

    addLiveDomain(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling addLiveDomain');
          }
          if (opts.playDomain === undefined || opts.playDomain === null) {
               throw new Error('Missing the required parameter \'opts.playDomain\' when calling addLiveDomain');
          }

         let postBody =   {
          };
           if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
               postBody['publishDomain'] = opts.publishDomain
           }
           if (opts.playDomain !== undefined && opts.playDomain !== null) {
               postBody['playDomain'] = opts.playDomain
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call addLiveDomain with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/domains', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  启动域名
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 要启动的域名 
      * @param {string} callback - callback
      @return {Object} result
      */

    startLiveDomain(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling startLiveDomain');
          }

         let postBody =   {
          };
           if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
               postBody['publishDomain'] = opts.publishDomain
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call startLiveDomain with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/domains:start', 'PUT', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  停用域名
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 要停用的域名 
      * @param {string} callback - callback
      @return {Object} result
      */

    stopLiveDomain(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling stopLiveDomain');
          }

         let postBody =   {
          };
           if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
               postBody['publishDomain'] = opts.publishDomain
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call stopLiveDomain with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/domains:stop', 'PUT', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询指定域名相关信息
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名 
      * @param {string} callback - callback
      @return {Object} result
      * @param publishDomain publishDomains  
      * @param playDomain playDomains  
      */

    describeLiveDomainDetail(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling describeLiveDomainDetail');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'publishDomain': opts.publishDomain 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeLiveDomainDetail with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/domains/{publishDomain}', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除域名
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名 
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteLiveDomain(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling deleteLiveDomain');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'publishDomain': opts.publishDomain 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteLiveDomain with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/domains/{publishDomain}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询录制模板列表
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNum] - 页码；默认为1；取值范围[1, 100000]  optional 
      * @param {integer} [opts.pageSize] - 分页大小；默认为10；取值范围[10, 100]  optional 
      * @param {filter} [opts.filters] - 域名列表查询过滤条件, 不传递分页参数时默认返回10条  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param number totalCount  查询总数
      * @param recordTemplate recordTemplates  
      */

    describeCustomLiveStreamRecordTemplates(opts, callback){

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNum !== undefined && opts.pageNum !== null) {
               queryParams['pageNum'] = opts.pageNum
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeCustomLiveStreamRecordTemplates with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/recordCustoms:template', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  添加直播录制模板
      * @param {Object} opts - parameters
      * @param {integer} opts.recordPeriod - 自动录制周期 
      * @param {string} opts.saveBucket - null 
      * @param {string} opts.saveEndpoint - null 
      * @param {string} opts.recordFileType - 录制文件格式 
      * @param {string} opts.template - 录制模板自定义名称 
      * @param {string} callback - callback
      @return {Object} result
      */

    addCustomLiveStreamRecordTemplate(opts, callback){

         opts = opts || {};

          if (opts.recordPeriod === undefined || opts.recordPeriod === null) {
               throw new Error('Missing the required parameter \'opts.recordPeriod\' when calling addCustomLiveStreamRecordTemplate');
          }
          if (opts.saveBucket === undefined || opts.saveBucket === null) {
               throw new Error('Missing the required parameter \'opts.saveBucket\' when calling addCustomLiveStreamRecordTemplate');
          }
          if (opts.saveEndpoint === undefined || opts.saveEndpoint === null) {
               throw new Error('Missing the required parameter \'opts.saveEndpoint\' when calling addCustomLiveStreamRecordTemplate');
          }
          if (opts.recordFileType === undefined || opts.recordFileType === null) {
               throw new Error('Missing the required parameter \'opts.recordFileType\' when calling addCustomLiveStreamRecordTemplate');
          }
          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling addCustomLiveStreamRecordTemplate');
          }

         let postBody =   {
          };
           if (opts.recordPeriod !== undefined && opts.recordPeriod !== null) {
               postBody['recordPeriod'] = opts.recordPeriod
           }
           if (opts.saveBucket !== undefined && opts.saveBucket !== null) {
               postBody['saveBucket'] = opts.saveBucket
           }
           if (opts.saveEndpoint !== undefined && opts.saveEndpoint !== null) {
               postBody['saveEndpoint'] = opts.saveEndpoint
           }
           if (opts.recordFileType !== undefined && opts.recordFileType !== null) {
               postBody['recordFileType'] = opts.recordFileType
           }
           if (opts.template !== undefined && opts.template !== null) {
               postBody['template'] = opts.template
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call addCustomLiveStreamRecordTemplate with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/recordCustoms:template', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  添加APP录制配置
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 直播流所属应用名称 
      * @param {string} opts.publishDomain - 您的推流加速域名 
      * @param {string} opts.template - 录制模版 
      * @param {string} callback - callback
      @return {Object} result
      */

    addLiveStreamAppRecord(opts, callback){

         opts = opts || {};

          if (opts.appName === undefined || opts.appName === null) {
               throw new Error('Missing the required parameter \'opts.appName\' when calling addLiveStreamAppRecord');
          }
          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling addLiveStreamAppRecord');
          }
          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling addLiveStreamAppRecord');
          }

         let postBody =   {
          };
           if (opts.appName !== undefined && opts.appName !== null) {
               postBody['appName'] = opts.appName
           }
           if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
               postBody['publishDomain'] = opts.publishDomain
           }
           if (opts.template !== undefined && opts.template !== null) {
               postBody['template'] = opts.template
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call addLiveStreamAppRecord with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/recordApps:config', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  添加域名录制配置
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 您的推流加速域名 
      * @param {string} opts.template - 录制模版 
      * @param {string} callback - callback
      @return {Object} result
      */

    addLiveStreamDomainRecord(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling addLiveStreamDomainRecord');
          }
          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling addLiveStreamDomainRecord');
          }

         let postBody =   {
          };
           if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
               postBody['publishDomain'] = opts.publishDomain
           }
           if (opts.template !== undefined && opts.template !== null) {
               postBody['template'] = opts.template
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call addLiveStreamDomainRecord with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/recordDomains:config', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询录制配置
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNum] - 页码；默认为1；取值范围[1, 100000]  optional 
      * @param {integer} [opts.pageSize] - 分页大小；默认为10；取值范围[10, 100]  optional 
      * @param {filter} [opts.filters] - 转码模板查询过滤条件, 不传递分页参数时默认返回10条  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param number totalCount  查询总数
      * @param liveRecordConfig recordConfigs  
      */

    describeCustomLiveStreamRecordConfig(opts, callback){

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNum !== undefined && opts.pageNum !== null) {
               queryParams['pageNum'] = opts.pageNum
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeCustomLiveStreamRecordConfig with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/records:config', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  设置录制回调通知
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 您的推流加速域名 
      * @param {string} opts.notifyUrl - 设置直播流信息推送到的 URL 地址 
      * @param {string} callback - callback
      @return {Object} result
      */

    setLiveStreamRecordNotifyConfig(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling setLiveStreamRecordNotifyConfig');
          }
          if (opts.notifyUrl === undefined || opts.notifyUrl === null) {
               throw new Error('Missing the required parameter \'opts.notifyUrl\' when calling setLiveStreamRecordNotifyConfig');
          }

         let postBody =   {
          };
           if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
               postBody['publishDomain'] = opts.publishDomain
           }
           if (opts.notifyUrl !== undefined && opts.notifyUrl !== null) {
               postBody['notifyUrl'] = opts.notifyUrl
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call setLiveStreamRecordNotifyConfig with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/recordNotifys:config', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除用户自定义录制模板
      * @param {Object} opts - parameters
      * @param {string} opts.template - 录制模板自定义名称 
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteCustomLiveStreamRecordTemplate(opts, callback){

         opts = opts || {};

          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling deleteCustomLiveStreamRecordTemplate');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'template': opts.template 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteCustomLiveStreamRecordTemplate with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/recordCustoms/{template}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除APP录制配置
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流加速域名 
      * @param {string} opts.appName - 直播流所属应用名称 
      * @param {string} opts.template - 录制模板自定义名称 
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteLiveStreamAppRecord(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling deleteLiveStreamAppRecord');
          }
          if (opts.appName === undefined || opts.appName === null) {
               throw new Error('Missing the required parameter \'opts.appName\' when calling deleteLiveStreamAppRecord');
          }
          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling deleteLiveStreamAppRecord');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'publishDomain': opts.publishDomain ,
               'appName': opts.appName ,
               'template': opts.template 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteLiveStreamAppRecord with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/recordApps/{publishDomain}/appNames/{appName}/templates/{template}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除域名录制配置
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流加速域名 
      * @param {string} opts.template - 录制模板自定义名称 
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteLiveStreamDomainRecord(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling deleteLiveStreamDomainRecord');
          }
          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling deleteLiveStreamDomainRecord');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'publishDomain': opts.publishDomain ,
               'template': opts.template 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteLiveStreamDomainRecord with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/recordDomains/{publishDomain}/templates/{template}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询录制回调配置
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流加速域名 
      * @param {string} callback - callback
      @return {Object} result
      * @param string publishDomain  您的加速域名
      * @param string notifyUrl  回调地址
      */

    describeLiveStreamRecordNotifyConfig(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling describeLiveStreamRecordNotifyConfig');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'publishDomain': opts.publishDomain 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeLiveStreamRecordNotifyConfig with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/recordNotifys/{publishDomain}', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除录制回调配置
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流加速域名 
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteLiveStreamRecordNotifyConfig(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling deleteLiveStreamRecordNotifyConfig');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'publishDomain': opts.publishDomain 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteLiveStreamRecordNotifyConfig with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/recordNotifys/{publishDomain}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  添加录制打点任务
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流加速域名 
      * @param {string} opts.appName - 直播流所属应用名称 
      * @param {string} opts.streamName - 直播流名称 
      * @param {array} [opts.recordTimes] - 您的推流加速域名  optional 
      * @param {string} opts.saveBucket - 存储桶 
      * @param {string} opts.saveEndpoint - 存储地址 
      * @param {string} opts.recordFileType - 录制文件类型 
      * @param {string} [opts.saveObject] - 录制文件存储路径  optional 
      * @param {string} callback - callback
      @return {Object} result
      */

    addLiveRecordTask(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling addLiveRecordTask');
          }
          if (opts.appName === undefined || opts.appName === null) {
               throw new Error('Missing the required parameter \'opts.appName\' when calling addLiveRecordTask');
          }
          if (opts.streamName === undefined || opts.streamName === null) {
               throw new Error('Missing the required parameter \'opts.streamName\' when calling addLiveRecordTask');
          }
          if (opts.saveBucket === undefined || opts.saveBucket === null) {
               throw new Error('Missing the required parameter \'opts.saveBucket\' when calling addLiveRecordTask');
          }
          if (opts.saveEndpoint === undefined || opts.saveEndpoint === null) {
               throw new Error('Missing the required parameter \'opts.saveEndpoint\' when calling addLiveRecordTask');
          }
          if (opts.recordFileType === undefined || opts.recordFileType === null) {
               throw new Error('Missing the required parameter \'opts.recordFileType\' when calling addLiveRecordTask');
          }

         let postBody =   {
          };
           if (opts.recordTimes !== undefined && opts.recordTimes !== null) {
               postBody['recordTimes'] = opts.recordTimes
           }
           if (opts.saveBucket !== undefined && opts.saveBucket !== null) {
               postBody['saveBucket'] = opts.saveBucket
           }
           if (opts.saveEndpoint !== undefined && opts.saveEndpoint !== null) {
               postBody['saveEndpoint'] = opts.saveEndpoint
           }
           if (opts.recordFileType !== undefined && opts.recordFileType !== null) {
               postBody['recordFileType'] = opts.recordFileType
           }
           if (opts.saveObject !== undefined && opts.saveObject !== null) {
               postBody['saveObject'] = opts.saveObject
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'publishDomain': opts.publishDomain ,
               'appName': opts.appName ,
               'streamName': opts.streamName 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call addLiveRecordTask with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/records/{publishDomain}/appNames/{appName}/streamNames/{streamName}/task', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  添加直播截图模板
      * @param {Object} opts - parameters
      * @param {string} opts.format - 图片格式 
      * @param {integer} opts.width - 图片宽度 
      * @param {integer} opts.height - 范围 
      * @param {integer} opts.fillType - 截图与设定的宽高不匹配时的处理规则 
      * @param {integer} opts.snapshotInterval - 截图周期 
      * @param {integer} opts.saveMode - 存储模式 
      * @param {string} opts.saveBucket - 保存bucket 
      * @param {string} opts.saveEndpoint - 保存endPoint 
      * @param {string} opts.template - 录制模板自定义名称 
      * @param {string} callback - callback
      @return {Object} result
      */

    addCustomLiveStreamSnapshotTemplate(opts, callback){

         opts = opts || {};

          if (opts.format === undefined || opts.format === null) {
               throw new Error('Missing the required parameter \'opts.format\' when calling addCustomLiveStreamSnapshotTemplate');
          }
          if (opts.width === undefined || opts.width === null) {
               throw new Error('Missing the required parameter \'opts.width\' when calling addCustomLiveStreamSnapshotTemplate');
          }
          if (opts.height === undefined || opts.height === null) {
               throw new Error('Missing the required parameter \'opts.height\' when calling addCustomLiveStreamSnapshotTemplate');
          }
          if (opts.fillType === undefined || opts.fillType === null) {
               throw new Error('Missing the required parameter \'opts.fillType\' when calling addCustomLiveStreamSnapshotTemplate');
          }
          if (opts.snapshotInterval === undefined || opts.snapshotInterval === null) {
               throw new Error('Missing the required parameter \'opts.snapshotInterval\' when calling addCustomLiveStreamSnapshotTemplate');
          }
          if (opts.saveMode === undefined || opts.saveMode === null) {
               throw new Error('Missing the required parameter \'opts.saveMode\' when calling addCustomLiveStreamSnapshotTemplate');
          }
          if (opts.saveBucket === undefined || opts.saveBucket === null) {
               throw new Error('Missing the required parameter \'opts.saveBucket\' when calling addCustomLiveStreamSnapshotTemplate');
          }
          if (opts.saveEndpoint === undefined || opts.saveEndpoint === null) {
               throw new Error('Missing the required parameter \'opts.saveEndpoint\' when calling addCustomLiveStreamSnapshotTemplate');
          }
          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling addCustomLiveStreamSnapshotTemplate');
          }

         let postBody =   {
          };
           if (opts.format !== undefined && opts.format !== null) {
               postBody['format'] = opts.format
           }
           if (opts.width !== undefined && opts.width !== null) {
               postBody['width'] = opts.width
           }
           if (opts.height !== undefined && opts.height !== null) {
               postBody['height'] = opts.height
           }
           if (opts.fillType !== undefined && opts.fillType !== null) {
               postBody['fillType'] = opts.fillType
           }
           if (opts.snapshotInterval !== undefined && opts.snapshotInterval !== null) {
               postBody['snapshotInterval'] = opts.snapshotInterval
           }
           if (opts.saveMode !== undefined && opts.saveMode !== null) {
               postBody['saveMode'] = opts.saveMode
           }
           if (opts.saveBucket !== undefined && opts.saveBucket !== null) {
               postBody['saveBucket'] = opts.saveBucket
           }
           if (opts.saveEndpoint !== undefined && opts.saveEndpoint !== null) {
               postBody['saveEndpoint'] = opts.saveEndpoint
           }
           if (opts.template !== undefined && opts.template !== null) {
               postBody['template'] = opts.template
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call addCustomLiveStreamSnapshotTemplate with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/snapshotCustoms:template', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询直播截图配置
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNum] - 页码；默认为1；取值范围[1, 100000]  optional 
      * @param {integer} [opts.pageSize] - 分页大小；默认为10；取值范围[10, 100]  optional 
      * @param {filter} [opts.filters] - 直播截图查询过滤条件, 不传递分页参数时默认返回10条  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param number totalCount  查询总数
      * @param snapshotConfig snapshotConfigs  
      */

    describeCustomLiveStreamSnapshotConfig(opts, callback){

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNum !== undefined && opts.pageNum !== null) {
               queryParams['pageNum'] = opts.pageNum
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeCustomLiveStreamSnapshotConfig with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/snapshotCustoms:config', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询直播截图模板列表
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNum] - 页码；默认为1；取值范围[1, 100000]  optional 
      * @param {integer} [opts.pageSize] - 分页大小；默认为10；取值范围[10, 100]  optional 
      * @param {filter} [opts.filters] - 域名列表查询过滤条件, 不传递分页参数时默认返回10条  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param number totalCount  查询总数
      * @param snapshotTemplate snapshotTemplates  
      */

    describeCustomLiveStreamSnapshotTemplates(opts, callback){

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNum !== undefined && opts.pageNum !== null) {
               queryParams['pageNum'] = opts.pageNum
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeCustomLiveStreamSnapshotTemplates with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/snapshotCustoms', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  添加APP直播截图配置
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 直播流所属应用名称 
      * @param {string} opts.publishDomain - 您的推流加速域名 
      * @param {string} opts.template - 截图模版 
      * @param {string} callback - callback
      @return {Object} result
      */

    addLiveStreamAppSnapshot(opts, callback){

         opts = opts || {};

          if (opts.appName === undefined || opts.appName === null) {
               throw new Error('Missing the required parameter \'opts.appName\' when calling addLiveStreamAppSnapshot');
          }
          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling addLiveStreamAppSnapshot');
          }
          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling addLiveStreamAppSnapshot');
          }

         let postBody =   {
          };
           if (opts.appName !== undefined && opts.appName !== null) {
               postBody['appName'] = opts.appName
           }
           if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
               postBody['publishDomain'] = opts.publishDomain
           }
           if (opts.template !== undefined && opts.template !== null) {
               postBody['template'] = opts.template
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call addLiveStreamAppSnapshot with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/snapshotApps:template', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  添加域名直播截图配置
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 您的推流加速域名 
      * @param {string} opts.template - 截图模版 
      * @param {string} callback - callback
      @return {Object} result
      */

    addLiveStreamDomainSnapshot(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling addLiveStreamDomainSnapshot');
          }
          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling addLiveStreamDomainSnapshot');
          }

         let postBody =   {
          };
           if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
               postBody['publishDomain'] = opts.publishDomain
           }
           if (opts.template !== undefined && opts.template !== null) {
               postBody['template'] = opts.template
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call addLiveStreamDomainSnapshot with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/snapshotDomains:template', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  设置截图回调通知
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 您的推流加速域名 
      * @param {string} opts.notifyUrl - 设置直播流信息推送到的 URL 地址 
      * @param {string} callback - callback
      @return {Object} result
      */

    setLiveStreamSnapshotNotifyConfig(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling setLiveStreamSnapshotNotifyConfig');
          }
          if (opts.notifyUrl === undefined || opts.notifyUrl === null) {
               throw new Error('Missing the required parameter \'opts.notifyUrl\' when calling setLiveStreamSnapshotNotifyConfig');
          }

         let postBody =   {
          };
           if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
               postBody['publishDomain'] = opts.publishDomain
           }
           if (opts.notifyUrl !== undefined && opts.notifyUrl !== null) {
               postBody['notifyUrl'] = opts.notifyUrl
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call setLiveStreamSnapshotNotifyConfig with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/snapshotNotifys:config', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除用户自定义直播截图模板
      * @param {Object} opts - parameters
      * @param {string} opts.template - 录制模板自定义名称 
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteCustomLiveStreamSnapshotTemplate(opts, callback){

         opts = opts || {};

          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling deleteCustomLiveStreamSnapshotTemplate');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'template': opts.template 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteCustomLiveStreamSnapshotTemplate with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/snapshotCustoms/{template}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除APP截图配置
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流加速域名 
      * @param {string} opts.appName - 直播流所属应用名称 
      * @param {string} opts.template - 录制模板自定义名称 
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteLiveStreamAppSnapshot(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling deleteLiveStreamAppSnapshot');
          }
          if (opts.appName === undefined || opts.appName === null) {
               throw new Error('Missing the required parameter \'opts.appName\' when calling deleteLiveStreamAppSnapshot');
          }
          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling deleteLiveStreamAppSnapshot');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'publishDomain': opts.publishDomain ,
               'appName': opts.appName ,
               'template': opts.template 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteLiveStreamAppSnapshot with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/snapshotApps/{publishDomain}/appNames/{appName}/templates/{template}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除域名截图配置
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流加速域名 
      * @param {string} opts.template - 录制模板自定义名称 
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteLiveStreamDomainSnapshot(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling deleteLiveStreamDomainSnapshot');
          }
          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling deleteLiveStreamDomainSnapshot');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'publishDomain': opts.publishDomain ,
               'template': opts.template 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteLiveStreamDomainSnapshot with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/snapshotDomains/{publishDomain}/templates/{template}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询截图回调配置
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流加速域名 
      * @param {string} callback - callback
      @return {Object} result
      * @param string publishDomain  您的加速域名
      * @param string notifyUrl  回调地址
      */

    describeLiveStreamSnapshotNotifyConfig(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling describeLiveStreamSnapshotNotifyConfig');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'publishDomain': opts.publishDomain 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeLiveStreamSnapshotNotifyConfig with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/snapshotNotifys/{publishDomain}:config', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除截图回调配置
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流加速域名 
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteLiveStreamSnapshotNotifyConfig(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling deleteLiveStreamSnapshotNotifyConfig');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'publishDomain': opts.publishDomain 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteLiveStreamSnapshotNotifyConfig with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/snapshotNotifys/{publishDomain}:config', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  禁止直播流推送
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称 
      * @param {string} opts.publishDomain - 您的加速域名 
      * @param {string} opts.streamName - 流名称 
      * @param {string} callback - callback
      @return {Object} result
      */

    forbidLiveStream(opts, callback){

         opts = opts || {};

          if (opts.appName === undefined || opts.appName === null) {
               throw new Error('Missing the required parameter \'opts.appName\' when calling forbidLiveStream');
          }
          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling forbidLiveStream');
          }
          if (opts.streamName === undefined || opts.streamName === null) {
               throw new Error('Missing the required parameter \'opts.streamName\' when calling forbidLiveStream');
          }

         let postBody =   {
          };
           if (opts.appName !== undefined && opts.appName !== null) {
               postBody['appName'] = opts.appName
           }
           if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
               postBody['publishDomain'] = opts.publishDomain
           }
           if (opts.streamName !== undefined && opts.streamName !== null) {
               postBody['streamName'] = opts.streamName
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call forbidLiveStream with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/streams:forbid', 'PUT', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  恢复直播流推送
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称 
      * @param {string} opts.publishDomain - 您的加速域名 
      * @param {string} opts.streamName - 流名称 
      * @param {string} callback - callback
      @return {Object} result
      */

    resumeLiveStream(opts, callback){

         opts = opts || {};

          if (opts.appName === undefined || opts.appName === null) {
               throw new Error('Missing the required parameter \'opts.appName\' when calling resumeLiveStream');
          }
          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling resumeLiveStream');
          }
          if (opts.streamName === undefined || opts.streamName === null) {
               throw new Error('Missing the required parameter \'opts.streamName\' when calling resumeLiveStream');
          }

         let postBody =   {
          };
           if (opts.appName !== undefined && opts.appName !== null) {
               postBody['appName'] = opts.appName
           }
           if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
               postBody['publishDomain'] = opts.publishDomain
           }
           if (opts.streamName !== undefined && opts.streamName !== null) {
               postBody['streamName'] = opts.streamName
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call resumeLiveStream with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/streams:resume', 'PUT', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  设置直播流状态通知
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 您的加速域名 
      * @param {string} opts.notifyUrl - 设置直播流信息推送到的 URL 地址 
      * @param {string} callback - callback
      @return {Object} result
      */

    setLiveStreamNotifyConfig(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling setLiveStreamNotifyConfig');
          }
          if (opts.notifyUrl === undefined || opts.notifyUrl === null) {
               throw new Error('Missing the required parameter \'opts.notifyUrl\' when calling setLiveStreamNotifyConfig');
          }

         let postBody =   {
          };
           if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
               postBody['publishDomain'] = opts.publishDomain
           }
           if (opts.notifyUrl !== undefined && opts.notifyUrl !== null) {
               postBody['notifyUrl'] = opts.notifyUrl
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call setLiveStreamNotifyConfig with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/streamNotifys', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询直播流状态通知
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名 
      * @param {string} callback - callback
      @return {Object} result
      * @param string publishDomain  您的加速域名
      * @param string notifyUrl  回调地址
      */

    describeLiveStreamNotifyConfig(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling describeLiveStreamNotifyConfig');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'publishDomain': opts.publishDomain 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeLiveStreamNotifyConfig with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/streamNotifys/{publishDomain}', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除直播流状态通知
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名 
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteLiveStreamNotifyConfig(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling deleteLiveStreamNotifyConfig');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'publishDomain': opts.publishDomain 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteLiveStreamNotifyConfig with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/streamNotifys/{publishDomain}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查看域名下所有的正在推的流的信息
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名 
      * @param {integer} [opts.pageNum] - 页码；默认为1；取值范围[1, 100000]  optional 
      * @param {integer} [opts.pageSize] - 分页大小；默认为10；取值范围[10, 100]  optional 
      * @param {string} [opts.appName] - 应用名称（APP）  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param number totalCount  查询总数
      * @param onlineStreamInfo onlineStreamInfos  
      */

    describeLiveStreamOnlineList(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling describeLiveStreamOnlineList');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNum !== undefined && opts.pageNum !== null) {
               queryParams['pageNum'] = opts.pageNum
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
           if (opts.appName !== undefined && opts.appName !== null) {
               queryParams['appName'] = opts.appName
           }

          let pathParams = {
               'regionId': 'jdcloud',
               'publishDomain': opts.publishDomain 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeLiveStreamOnlineList with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/streams/{publishDomain}/onlineList', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查看域名下推流记录
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名 
      * @param {integer} [opts.pageNum] - 页码；默认为1；取值范围[1, 100000]  optional 
      * @param {integer} [opts.pageSize] - 分页大小；默认为10；取值范围[10, 100]  optional 
      * @param {string} [opts.appName] - 直播流所属应用名称  optional 
      * @param {string} [opts.streamName] - 直播流名称  optional 
      * @param {string} opts.startTime - 起始时间 
      * @param {string} [opts.endTime] - 结束时间  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param number totalCount  查询总数
      * @param liveStreamPublishInfo liveStreamPublishInfos  
      */

    describeLiveStreamPublishList(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling describeLiveStreamPublishList');
          }
          if (opts.startTime === undefined || opts.startTime === null) {
               throw new Error('Missing the required parameter \'opts.startTime\' when calling describeLiveStreamPublishList');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNum !== undefined && opts.pageNum !== null) {
               queryParams['pageNum'] = opts.pageNum
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
           if (opts.appName !== undefined && opts.appName !== null) {
               queryParams['appName'] = opts.appName
           }
           if (opts.streamName !== undefined && opts.streamName !== null) {
               queryParams['streamName'] = opts.streamName
           }
           if (opts.startTime !== undefined && opts.startTime !== null) {
               queryParams['startTime'] = opts.startTime
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               queryParams['endTime'] = opts.endTime
           }

          let pathParams = {
               'regionId': 'jdcloud',
               'publishDomain': opts.publishDomain 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeLiveStreamPublishList with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/streams/{publishDomain}/publishList', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  添加域名转码配置
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 直播的推流域名 
      * @param {string} opts.template - 转码模版 
      * @param {string} callback - callback
      @return {Object} result
      */

    addLiveStreamDomainTranscode(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling addLiveStreamDomainTranscode');
          }
          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling addLiveStreamDomainTranscode');
          }

         let postBody =   {
          };
           if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
               postBody['publishDomain'] = opts.publishDomain
           }
           if (opts.template !== undefined && opts.template !== null) {
               postBody['template'] = opts.template
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call addLiveStreamDomainTranscode with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/transcodeDomains:config', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  添加APP转码配置
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 直播的推流域名 
      * @param {string} opts.template - 转码模版 
      * @param {string} opts.appName - 直播流所属应用名称 
      * @param {string} callback - callback
      @return {Object} result
      */

    addLiveStreamAppTranscode(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling addLiveStreamAppTranscode');
          }
          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling addLiveStreamAppTranscode');
          }
          if (opts.appName === undefined || opts.appName === null) {
               throw new Error('Missing the required parameter \'opts.appName\' when calling addLiveStreamAppTranscode');
          }

         let postBody =   {
          };
           if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
               postBody['publishDomain'] = opts.publishDomain
           }
           if (opts.template !== undefined && opts.template !== null) {
               postBody['template'] = opts.template
           }
           if (opts.appName !== undefined && opts.appName !== null) {
               postBody['appName'] = opts.appName
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call addLiveStreamAppTranscode with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/transcodeApps:config', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  添加自定义转码模板
      * @param {Object} opts - parameters
      * @param {integer} opts.videoCodeRate - 转码输出的码率值 
      * @param {string} opts.videoFrameRate - 转码输出的帧率值 
      * @param {integer} opts.width - 转码输出视频宽度 
      * @param {integer} opts.height - 转码输出视频宽度 
      * @param {string} opts.template - 转码模板自定义名称 
      * @param {string} opts.audioCodec - 转码输出音频编码格式 
      * @param {string} opts.audioFormat - 转码输出音频格式 
      * @param {integer} opts.audioSampleRate - 转码输出音频采样率 
      * @param {integer} opts.audioChannel - 转码输出音频通道数 
      * @param {integer} opts.audioCodeRate - 转码输出音频码率 
      * @param {string} callback - callback
      @return {Object} result
      */

    addCustomLiveStreamTranscodeTemplate(opts, callback){

         opts = opts || {};

          if (opts.videoCodeRate === undefined || opts.videoCodeRate === null) {
               throw new Error('Missing the required parameter \'opts.videoCodeRate\' when calling addCustomLiveStreamTranscodeTemplate');
          }
          if (opts.videoFrameRate === undefined || opts.videoFrameRate === null) {
               throw new Error('Missing the required parameter \'opts.videoFrameRate\' when calling addCustomLiveStreamTranscodeTemplate');
          }
          if (opts.width === undefined || opts.width === null) {
               throw new Error('Missing the required parameter \'opts.width\' when calling addCustomLiveStreamTranscodeTemplate');
          }
          if (opts.height === undefined || opts.height === null) {
               throw new Error('Missing the required parameter \'opts.height\' when calling addCustomLiveStreamTranscodeTemplate');
          }
          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling addCustomLiveStreamTranscodeTemplate');
          }
          if (opts.audioCodec === undefined || opts.audioCodec === null) {
               throw new Error('Missing the required parameter \'opts.audioCodec\' when calling addCustomLiveStreamTranscodeTemplate');
          }
          if (opts.audioFormat === undefined || opts.audioFormat === null) {
               throw new Error('Missing the required parameter \'opts.audioFormat\' when calling addCustomLiveStreamTranscodeTemplate');
          }
          if (opts.audioSampleRate === undefined || opts.audioSampleRate === null) {
               throw new Error('Missing the required parameter \'opts.audioSampleRate\' when calling addCustomLiveStreamTranscodeTemplate');
          }
          if (opts.audioChannel === undefined || opts.audioChannel === null) {
               throw new Error('Missing the required parameter \'opts.audioChannel\' when calling addCustomLiveStreamTranscodeTemplate');
          }
          if (opts.audioCodeRate === undefined || opts.audioCodeRate === null) {
               throw new Error('Missing the required parameter \'opts.audioCodeRate\' when calling addCustomLiveStreamTranscodeTemplate');
          }

         let postBody =   {
          };
           if (opts.videoCodeRate !== undefined && opts.videoCodeRate !== null) {
               postBody['videoCodeRate'] = opts.videoCodeRate
           }
           if (opts.videoFrameRate !== undefined && opts.videoFrameRate !== null) {
               postBody['videoFrameRate'] = opts.videoFrameRate
           }
           if (opts.width !== undefined && opts.width !== null) {
               postBody['width'] = opts.width
           }
           if (opts.height !== undefined && opts.height !== null) {
               postBody['height'] = opts.height
           }
           if (opts.template !== undefined && opts.template !== null) {
               postBody['template'] = opts.template
           }
           if (opts.audioCodec !== undefined && opts.audioCodec !== null) {
               postBody['audioCodec'] = opts.audioCodec
           }
           if (opts.audioFormat !== undefined && opts.audioFormat !== null) {
               postBody['audioFormat'] = opts.audioFormat
           }
           if (opts.audioSampleRate !== undefined && opts.audioSampleRate !== null) {
               postBody['audioSampleRate'] = opts.audioSampleRate
           }
           if (opts.audioChannel !== undefined && opts.audioChannel !== null) {
               postBody['audioChannel'] = opts.audioChannel
           }
           if (opts.audioCodeRate !== undefined && opts.audioCodeRate !== null) {
               postBody['audioCodeRate'] = opts.audioCodeRate
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call addCustomLiveStreamTranscodeTemplate with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/transcodeCustoms:template', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询用户自定义转码模板列表
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNum] - 页码；默认为1；取值范围[1, 100000]  optional 
      * @param {integer} [opts.pageSize] - 分页大小；默认为10；取值范围[10, 100]  optional 
      * @param {filter} [opts.filters] - 转码模板查询过滤条件, 不传递分页参数时默认返回10条  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param number totalCount  查询总数
      * @param transcodeInfo transcodeTemplates  
      */

    describeCustomLiveStreamTranscodeTemplates(opts, callback){

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNum !== undefined && opts.pageNum !== null) {
               queryParams['pageNum'] = opts.pageNum
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeCustomLiveStreamTranscodeTemplates with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/transcodeCustoms', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询转码模板配置
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNum] - 页码；默认为1；取值范围[1, 100000]  optional 
      * @param {integer} [opts.pageSize] - 分页大小；默认为10；取值范围[10, 100]  optional 
      * @param {filter} [opts.filters] - 转码模板查询过滤条件, 不传递分页参数时默认返回10条  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param number totalCount  查询总数
      * @param templateConfig transcodeConfigs  
      */

    describeLiveStreamTranscodeConfig(opts, callback){

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNum !== undefined && opts.pageNum !== null) {
               queryParams['pageNum'] = opts.pageNum
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeLiveStreamTranscodeConfig with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/transcodes:config', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除域名转码配置
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流加速域名 
      * @param {string} opts.template - 转码模版 
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteLiveStreamDomainTranscode(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling deleteLiveStreamDomainTranscode');
          }
          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling deleteLiveStreamDomainTranscode');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'publishDomain': opts.publishDomain ,
               'template': opts.template 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteLiveStreamDomainTranscode with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/transcodeDomains/{publishDomain}/templates/{template}:config', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除APP转码配置
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流加速域名 
      * @param {string} opts.appName - 直播流所属应用名称 
      * @param {string} opts.template - 转码模版 
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteLiveStreamAppTranscode(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling deleteLiveStreamAppTranscode');
          }
          if (opts.appName === undefined || opts.appName === null) {
               throw new Error('Missing the required parameter \'opts.appName\' when calling deleteLiveStreamAppTranscode');
          }
          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling deleteLiveStreamAppTranscode');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'publishDomain': opts.publishDomain ,
               'appName': opts.appName ,
               'template': opts.template 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteLiveStreamAppTranscode with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/transcodeApps/{publishDomain}/appNames/{appName}/templates/{template}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询用户自定义转码模板详情
      * @param {Object} opts - parameters
      * @param {string} opts.template - 转码模版 
      * @param {string} callback - callback
      @return {Object} result
      * @param integer videoCodeRate  转码输出的码率值
      * @param string videoFrameRate  转码输出的帧率值
      * @param integer width  转码输出视频宽度
      * @param integer height  转码输出视频宽度
      * @param string template  转码模板自定义名称
      * @param string audioCodec  转码输出音频编码格式
      * @param string audioFormat  转码输出音频格式
      * @param integer audioSampleRate  转码输出音频采样率
      * @param integer audioChannel  转码输出音频通道数
      * @param integer audioCodeRate  转码输出音频码率
      */

    describeCustomLiveStreamTranscodeTemplate(opts, callback){

         opts = opts || {};

          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling describeCustomLiveStreamTranscodeTemplate');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'template': opts.template 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeCustomLiveStreamTranscodeTemplate with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/transcodeCustoms/{template}', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除用户自定义转码模板
      * @param {Object} opts - parameters
      * @param {string} opts.template - 转码模版 
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteCustomLiveStreamTranscodeTemplate(opts, callback){

         opts = opts || {};

          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling deleteCustomLiveStreamTranscodeTemplate');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'template': opts.template 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteCustomLiveStreamTranscodeTemplate with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/transcodeCustoms/{template}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  添加直播水印模板
      * @param {Object} opts - parameters
      * @param {integer} opts.offsetX - x轴偏移量 单位：像素 
      * @param {integer} opts.offsetY - y轴偏移量 单位：像素 
      * @param {integer} opts.width - 宽 
      * @param {integer} opts.height - 高 
      * @param {string} opts.template - 录制模板自定义名称 
      * @param {string} opts.url - 高 
      * @param {string} callback - callback
      @return {Object} result
      */

    addCustomLiveStreamWatermarkTemplate(opts, callback){

         opts = opts || {};

          if (opts.offsetX === undefined || opts.offsetX === null) {
               throw new Error('Missing the required parameter \'opts.offsetX\' when calling addCustomLiveStreamWatermarkTemplate');
          }
          if (opts.offsetY === undefined || opts.offsetY === null) {
               throw new Error('Missing the required parameter \'opts.offsetY\' when calling addCustomLiveStreamWatermarkTemplate');
          }
          if (opts.width === undefined || opts.width === null) {
               throw new Error('Missing the required parameter \'opts.width\' when calling addCustomLiveStreamWatermarkTemplate');
          }
          if (opts.height === undefined || opts.height === null) {
               throw new Error('Missing the required parameter \'opts.height\' when calling addCustomLiveStreamWatermarkTemplate');
          }
          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling addCustomLiveStreamWatermarkTemplate');
          }
          if (opts.url === undefined || opts.url === null) {
               throw new Error('Missing the required parameter \'opts.url\' when calling addCustomLiveStreamWatermarkTemplate');
          }

         let postBody =   {
          };
           if (opts.offsetX !== undefined && opts.offsetX !== null) {
               postBody['offsetX'] = opts.offsetX
           }
           if (opts.offsetY !== undefined && opts.offsetY !== null) {
               postBody['offsetY'] = opts.offsetY
           }
           if (opts.width !== undefined && opts.width !== null) {
               postBody['width'] = opts.width
           }
           if (opts.height !== undefined && opts.height !== null) {
               postBody['height'] = opts.height
           }
           if (opts.template !== undefined && opts.template !== null) {
               postBody['template'] = opts.template
           }
           if (opts.url !== undefined && opts.url !== null) {
               postBody['url'] = opts.url
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call addCustomLiveStreamWatermarkTemplate with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/watermarkCustoms:template', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询录制模板列表
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNum] - 页码；默认为1；取值范围[1, 100000]  optional 
      * @param {integer} [opts.pageSize] - 分页大小；默认为10；取值范围[10, 100]  optional 
      * @param {filter} [opts.filters] - 录制模板列表查询过滤条件, 不传递分页参数时默认返回10条  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param number totalCount  查询总数
      * @param watermarkTemplate watermarkTemplates  
      */

    describeCustomLiveStreamWatermarkTemplates(opts, callback){

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNum !== undefined && opts.pageNum !== null) {
               queryParams['pageNum'] = opts.pageNum
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeCustomLiveStreamWatermarkTemplates with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/watermarkCustoms', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  添加APP水印配置
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 直播流所属应用名称 
      * @param {string} opts.publishDomain - 您的推流加速域名 
      * @param {string} opts.template - 录制模版 
      * @param {string} callback - callback
      @return {Object} result
      */

    addLiveStreamAppWatermark(opts, callback){

         opts = opts || {};

          if (opts.appName === undefined || opts.appName === null) {
               throw new Error('Missing the required parameter \'opts.appName\' when calling addLiveStreamAppWatermark');
          }
          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling addLiveStreamAppWatermark');
          }
          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling addLiveStreamAppWatermark');
          }

         let postBody =   {
          };
           if (opts.appName !== undefined && opts.appName !== null) {
               postBody['appName'] = opts.appName
           }
           if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
               postBody['publishDomain'] = opts.publishDomain
           }
           if (opts.template !== undefined && opts.template !== null) {
               postBody['template'] = opts.template
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call addLiveStreamAppWatermark with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/watermarkApps:config', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  添加域名水印配置
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 您的推流加速域名 
      * @param {string} opts.template - 录制模版 
      * @param {string} callback - callback
      @return {Object} result
      */

    addLiveStreamDomainWatermark(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling addLiveStreamDomainWatermark');
          }
          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling addLiveStreamDomainWatermark');
          }

         let postBody =   {
          };
           if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
               postBody['publishDomain'] = opts.publishDomain
           }
           if (opts.template !== undefined && opts.template !== null) {
               postBody['template'] = opts.template
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call addLiveStreamDomainWatermark with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/watermarkDomains:config', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询水印配置
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNum] - 页码；默认为1；取值范围[1, 100000]  optional 
      * @param {integer} [opts.pageSize] - 分页大小；默认为10；取值范围[10, 100]  optional 
      * @param {filter} [opts.filters] - 录制模板列表查询过滤条件, 不传递分页参数时默认返回10条  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param number totalCount  查询总数
      * @param liveStreamRecordConfig watermarkConfigs  
      */

    describeCustomLiveStreamWatermarkConfig(opts, callback){

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNum !== undefined && opts.pageNum !== null) {
               queryParams['pageNum'] = opts.pageNum
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeCustomLiveStreamWatermarkConfig with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/watermarks:config', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除用户自定义水印模板
      * @param {Object} opts - parameters
      * @param {string} opts.template - 转码模版 
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteCustomLiveStreamWatermarkTemplate(opts, callback){

         opts = opts || {};

          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling deleteCustomLiveStreamWatermarkTemplate');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'template': opts.template 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteCustomLiveStreamWatermarkTemplate with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/watermarkCustoms/{template}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除APP水印配置
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流加速域名 
      * @param {string} opts.appName - 直播流所属应用名称 
      * @param {string} opts.template - 转码模版 
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteLiveStreamAppWatermark(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling deleteLiveStreamAppWatermark');
          }
          if (opts.appName === undefined || opts.appName === null) {
               throw new Error('Missing the required parameter \'opts.appName\' when calling deleteLiveStreamAppWatermark');
          }
          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling deleteLiveStreamAppWatermark');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'publishDomain': opts.publishDomain ,
               'appName': opts.appName ,
               'template': opts.template 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteLiveStreamAppWatermark with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/watermarkApps/{publishDomain}/appNames/{appName}/templates/{template}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除域名水印配置
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流加速域名 
      * @param {string} opts.template - 转码模版 
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteLiveStreamDomainWatermark(opts, callback){

         opts = opts || {};

          if (opts.publishDomain === undefined || opts.publishDomain === null) {
               throw new Error('Missing the required parameter \'opts.publishDomain\' when calling deleteLiveStreamDomainWatermark');
          }
          if (opts.template === undefined || opts.template === null) {
               throw new Error('Missing the required parameter \'opts.template\' when calling deleteLiveStreamDomainWatermark');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'publishDomain': opts.publishDomain ,
               'template': opts.template 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteLiveStreamDomainWatermark with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/watermarkDomains/{publishDomain}/templates/{template}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

};
module.exports = JDCloud.LIVE
