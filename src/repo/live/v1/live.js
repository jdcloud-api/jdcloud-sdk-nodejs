/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Live-Video
 * 直播管理API
 *
 * OpenAPI spec version: v1
 * Contact:
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

require('../../../lib/node_loader')
var JDCloud = require('../../../lib/core')
var Service = JDCloud.Service
var serviceId = 'live'
Service._services[serviceId] = true

/**
 * live service.
 * @version 1.0.3
 */

JDCloud.LIVE = class LIVE extends Service {
  constructor (options = {}) {
    options._defaultEndpoint = {}
    options._defaultEndpoint.protocol =
      options._defaultEndpoint.protocol || 'https'
    options._defaultEndpoint.host =
      options._defaultEndpoint.host || 'live.jdcloud-api.com'
    options.basePath = '/v1' // 默认要设为空""
    super(serviceId, options)
  }

  /**
      *  查询域名下的APP列表
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNum] - 页码
- 取值范围: [1, 100000]
  optional
      * @param {integer} [opts.pageSize] - 分页大小
- 取值范围: [10, 100]
  optional
      * @param {filter} [opts.filters] - 域名下的app列表过滤条件:
  - name: publishDomain 直播的推流域名
  - values: 如果参数为空,则查询全部
  - 过滤条件为空,则表示查询用户下的所有应用名
  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param integer totalCount  查询总数
      * @param app apps
      */

  describeLiveApp (opts, callback) {
    opts = opts || {}

    let postBody = null
    let queryParams = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      queryParams['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'))

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeLiveApp with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/apps',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加直播应用名
- 需要提前在应用(app)级别绑定功能模板时才需要提前新建应用名
- 新的应用名可以推流时自动创建

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 直播的推流域名
      * @param {string} opts.appName - 应用名称
- 取值: 数字字母中划线(&quot;-&quot;)下划线(&quot;_&quot;) 50个字符以内

      * @param {string} callback - callback
      @return {Object} result
      */

  addLiveApp (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling addLiveApp"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling addLiveApp"
      )
    }

    let postBody = {}
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      postBody['publishDomain'] = opts.publishDomain
    }
    if (opts.appName !== undefined && opts.appName !== null) {
      postBody['appName'] = opts.appName
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call addLiveApp with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/apps',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  启用应用
- 启用 停用 状态的应用

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 直播的推流域名
      * @param {string} opts.appName - 应用名称
      * @param {string} callback - callback
      @return {Object} result
      */

  startLiveApp (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling startLiveApp"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling startLiveApp"
      )
    }

    let postBody = {}
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      postBody['publishDomain'] = opts.publishDomain
    }
    if (opts.appName !== undefined && opts.appName !== null) {
      postBody['appName'] = opts.appName
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call startLiveApp with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/apps:start',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  停用 运行中 状态的应用
- 停用应用之后,不能再用此应用名推流

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 直播的推流域名
      * @param {string} opts.appName - 应用名称
      * @param {string} callback - callback
      @return {Object} result
      */

  stopLiveApp (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling stopLiveApp"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling stopLiveApp"
      )
    }

    let postBody = {}
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      postBody['publishDomain'] = opts.publishDomain
    }
    if (opts.appName !== undefined && opts.appName !== null) {
      postBody['appName'] = opts.appName
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call stopLiveApp with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/apps:stop',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除应用
- 删除应用之前需要先停用应用
- 删除应用同时会删除此应用下的所有数据

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.appName - 应用名称
      * @param {string} callback - callback
      @return {Object} result
      */

  deleteLiveApp (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling deleteLiveApp"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling deleteLiveApp"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      publishDomain: opts.publishDomain,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteLiveApp with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/apps/{publishDomain}/appNames/{appName}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询播放鉴权KEY
      * @param {Object} opts - parameters
      * @param {string} opts.playDomain - 直播的播放域名
- 仅支持精确匹配

      * @param {string} callback - callback
      @return {Object} result
      * @param string playDomain  播放域名
      * @param string authStatus  播放鉴权状态
  on: 开启
  off: 关闭

      * @param string authKey  播放鉴权key
      */

  describeLivePlayAuthKey (opts, callback) {
    opts = opts || {}

    if (opts.playDomain === undefined || opts.playDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.playDomain' when calling describeLivePlayAuthKey"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.playDomain !== undefined && opts.playDomain !== null) {
      queryParams['playDomain'] = opts.playDomain
    }

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeLivePlayAuthKey with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/livePlayAuthKey',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置播放鉴权KEY
      * @param {Object} opts - parameters
      * @param {string} opts.playDomain - 播放域名
      * @param {string} [opts.authStatus] - 播放鉴权状态
  on: 开启
  off: 关闭
- 当推流鉴权状态on(开启)时,authKey不能为空
  optional
      * @param {string} [opts.authKey] - 播放鉴权key
- 取值: 支持大小写字母和数字 长度6-32位
  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  setLivePlayAuthKey (opts, callback) {
    opts = opts || {}

    if (opts.playDomain === undefined || opts.playDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.playDomain' when calling setLivePlayAuthKey"
      )
    }

    let postBody = {}
    if (opts.playDomain !== undefined && opts.playDomain !== null) {
      postBody['playDomain'] = opts.playDomain
    }
    if (opts.authStatus !== undefined && opts.authStatus !== null) {
      postBody['authStatus'] = opts.authStatus
    }
    if (opts.authKey !== undefined && opts.authKey !== null) {
      postBody['authKey'] = opts.authKey
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setLivePlayAuthKey with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/livePlayAuthKey',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询域名列表
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNum] - 页码
- 取值范围[1, 100000]
  optional
      * @param {integer} [opts.pageSize] - 分页大小
- 取值范围[10, 100]
  optional
      * @param {string} [opts.publishDomain] - 推流域名
- 目前仅支持精确查询
- 为空时,查询用户所有直播域名
  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param integer totalCount  查询总数
      * @param domainDetails domainDetails
      */

  describeLiveDomains (opts, callback) {
    opts = opts || {}

    let postBody = null
    let queryParams = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      queryParams['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      queryParams['publishDomain'] = opts.publishDomain
    }

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeLiveDomains with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domains',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加直播域名
- 创建直播域名之前,必须先开通直播服务
- 直播域名必须已经备案完成

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 直播的推流域名
- 不支持泛域名

      * @param {string} opts.playDomain - 直播的播放域名
- 不支持泛域名

      * @param {string} callback - callback
      @return {Object} result
      */

  addLiveDomain (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling addLiveDomain"
      )
    }
    if (opts.playDomain === undefined || opts.playDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.playDomain' when calling addLiveDomain"
      )
    }

    let postBody = {}
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      postBody['publishDomain'] = opts.publishDomain
    }
    if (opts.playDomain !== undefined && opts.playDomain !== null) {
      postBody['playDomain'] = opts.playDomain
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call addLiveDomain with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domains',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  启动域名
- 启用状态为 停用 的直播域名对(推流域名,播放域名)将DomainStatus变更为online

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
- 需要启动的域名对(推流域名,播放域名)中的推流域名

      * @param {string} callback - callback
      @return {Object} result
      */

  startLiveDomain (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling startLiveDomain"
      )
    }

    let postBody = {}
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      postBody['publishDomain'] = opts.publishDomain
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call startLiveDomain with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domains:start',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  停用域名
- 停用直播域名对(推流域名,播放域名),将DomainStatus变更为offline
- 停用该直播域名对后,直播域名信息仍保留,但用户将不能再用该推流域名推流或播放域名播放

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
- 需要停用的域名对(推流域名,播放域名)中的推流域名

      * @param {string} callback - callback
      @return {Object} result
      */

  stopLiveDomain (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling stopLiveDomain"
      )
    }

    let postBody = {}
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      postBody['publishDomain'] = opts.publishDomain
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call stopLiveDomain with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domains:stop',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询指定域名相关信息
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
- 需要停用的域名对(推流域名,播放域名)中的推流域名

      * @param {string} callback - callback
      @return {Object} result
      * @param publishDomain publishDomains
      * @param playDomain playDomains
      */

  describeLiveDomainDetail (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling describeLiveDomainDetail"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      publishDomain: opts.publishDomain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeLiveDomainDetail with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domains/{publishDomain}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除直播域名
- 请慎重操作（建议在进行域名删除前到域名解析服务商处恢复域名A记录），以免导致删除操作后此域名不可访问。
  deleteLiveDomain调用成功后将删除本条直播域名的全部相关记录，对于仅需要暂停使用该直播域名，推荐stopLiveDomain接口

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名

      * @param {string} callback - callback
      @return {Object} result
      */

  deleteLiveDomain (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling deleteLiveDomain"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      publishDomain: opts.publishDomain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteLiveDomain with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/domains/{publishDomain}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询用户自定义直播录制模板列表

      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNum] - 页码
- 取值范围[1, 100000]
  optional
      * @param {integer} [opts.pageSize] - 分页大小
- 取值范围[10, 100]
  optional
      * @param {filter} [opts.filters] - 录制模板列表查询过滤条件:
  - name:   template 录制模板自定义名称
  - value:  如果参数为空，则查询全部
  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param integer totalCount  查询总数
      * @param recordTemplate recordTemplates
      */

  describeCustomLiveStreamRecordTemplates (opts, callback) {
    opts = opts || {}

    let postBody = null
    let queryParams = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      queryParams['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'))

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeCustomLiveStreamRecordTemplates with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/recordCustoms:template',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加用户自定义直播录制模板

      * @param {Object} opts - parameters
      * @param {integer} opts.recordPeriod - 自动录制周期
- 取值: [15,360]
- 单位: 分钟

      * @param {string} opts.saveBucket - 存储桶

      * @param {string} opts.saveEndpoint - endpoint

      * @param {string} opts.recordFileType - 录制文件格式:
- 取值: ts,flv,mp4 (多种类型之间用;隔开)
- 不区分大小写

      * @param {string} opts.template - 录制模板自定义名称:
 - 取值要求：数字、大小写字母或短横线(&quot;-&quot;)
 - &lt;b&gt;注意: 不能与已定义命名重复&lt;/b&gt;

      * @param {string} callback - callback
      @return {Object} result
      */

  addCustomLiveStreamRecordTemplate (opts, callback) {
    opts = opts || {}

    if (opts.recordPeriod === undefined || opts.recordPeriod === null) {
      throw new Error(
        "Missing the required parameter 'opts.recordPeriod' when calling addCustomLiveStreamRecordTemplate"
      )
    }
    if (opts.saveBucket === undefined || opts.saveBucket === null) {
      throw new Error(
        "Missing the required parameter 'opts.saveBucket' when calling addCustomLiveStreamRecordTemplate"
      )
    }
    if (opts.saveEndpoint === undefined || opts.saveEndpoint === null) {
      throw new Error(
        "Missing the required parameter 'opts.saveEndpoint' when calling addCustomLiveStreamRecordTemplate"
      )
    }
    if (opts.recordFileType === undefined || opts.recordFileType === null) {
      throw new Error(
        "Missing the required parameter 'opts.recordFileType' when calling addCustomLiveStreamRecordTemplate"
      )
    }
    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling addCustomLiveStreamRecordTemplate"
      )
    }

    let postBody = {}
    if (opts.recordPeriod !== undefined && opts.recordPeriod !== null) {
      postBody['recordPeriod'] = opts.recordPeriod
    }
    if (opts.saveBucket !== undefined && opts.saveBucket !== null) {
      postBody['saveBucket'] = opts.saveBucket
    }
    if (opts.saveEndpoint !== undefined && opts.saveEndpoint !== null) {
      postBody['saveEndpoint'] = opts.saveEndpoint
    }
    if (opts.recordFileType !== undefined && opts.recordFileType !== null) {
      postBody['recordFileType'] = opts.recordFileType
    }
    if (opts.template !== undefined && opts.template !== null) {
      postBody['template'] = opts.template
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call addCustomLiveStreamRecordTemplate with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/recordCustoms:template',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加应用级别直播录制配置
- 添加应用级别的直播录制模板配置

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.template - 录制模版
      * @param {string} callback - callback
      @return {Object} result
      */

  addLiveStreamAppRecord (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling addLiveStreamAppRecord"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling addLiveStreamAppRecord"
      )
    }
    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling addLiveStreamAppRecord"
      )
    }

    let postBody = {}
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      postBody['publishDomain'] = opts.publishDomain
    }
    if (opts.appName !== undefined && opts.appName !== null) {
      postBody['appName'] = opts.appName
    }
    if (opts.template !== undefined && opts.template !== null) {
      postBody['template'] = opts.template
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call addLiveStreamAppRecord with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/recordApps:config',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加域名级别直播录制配置
- 添加域名级别的直播录制模板配置

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.template - 录制模版
      * @param {string} callback - callback
      @return {Object} result
      */

  addLiveStreamDomainRecord (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling addLiveStreamDomainRecord"
      )
    }
    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling addLiveStreamDomainRecord"
      )
    }

    let postBody = {}
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      postBody['publishDomain'] = opts.publishDomain
    }
    if (opts.template !== undefined && opts.template !== null) {
      postBody['template'] = opts.template
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call addLiveStreamDomainRecord with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/recordDomains:config',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询直播直播录制配置
- 录制模板配置按照 域名,应用,流 3级配置添加,以最小的粒度配置生效
- 域名、应用、流 依次粒度递减 即: 域名&gt;应用&gt;流
- 该查询旨在查询域名、应用、流最终生效的录制模板配置,并非各级的模板绑定情况

      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNum] - 页码
- 取值范围 [1, 100000]
  optional
      * @param {integer} [opts.pageSize] - 分页大小
- 取值范围 [10, 100]
  optional
      * @param {filter} [opts.filters] - 录制配置查询过滤条件:
  - name:   publishDomain，必填(推流域名)
  - value:  参数
  - name:   appName，必填(应用名称)
  - value:  参数
  - name:   streamName，非必填(流名称)
  - value:  参数
  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param integer totalCount  查询总数
      * @param liveRecordConfig recordConfigs
      */

  describeCustomLiveStreamRecordConfig (opts, callback) {
    opts = opts || {}

    let postBody = null
    let queryParams = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      queryParams['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'))

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeCustomLiveStreamRecordConfig with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/records:config',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置直播录制回调通知

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.notifyUrl - 录制回调通知的URL地址
- 以 http:// 开头,外网可访问的地址

      * @param {string} callback - callback
      @return {Object} result
      */

  setLiveStreamRecordNotifyConfig (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling setLiveStreamRecordNotifyConfig"
      )
    }
    if (opts.notifyUrl === undefined || opts.notifyUrl === null) {
      throw new Error(
        "Missing the required parameter 'opts.notifyUrl' when calling setLiveStreamRecordNotifyConfig"
      )
    }

    let postBody = {}
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      postBody['publishDomain'] = opts.publishDomain
    }
    if (opts.notifyUrl !== undefined && opts.notifyUrl !== null) {
      postBody['notifyUrl'] = opts.notifyUrl
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setLiveStreamRecordNotifyConfig with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/recordNotifys:config',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除用户自定义录制模板
- 删除用户自定义录制模板之前必须先删除此模板在各域名、应用、流级别的录制设置

      * @param {Object} opts - parameters
      * @param {string} opts.template - 录制模板
      * @param {string} callback - callback
      @return {Object} result
      */

  deleteCustomLiveStreamRecordTemplate (opts, callback) {
    opts = opts || {}

    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling deleteCustomLiveStreamRecordTemplate"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      template: opts.template
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteCustomLiveStreamRecordTemplate with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/recordCustoms/{template}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除应用级别录制模板配置
- 删除应用级别的录制模板配置,重新推流后生效

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.template - 录制模板

      * @param {string} callback - callback
      @return {Object} result
      */

  deleteLiveStreamAppRecord (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling deleteLiveStreamAppRecord"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling deleteLiveStreamAppRecord"
      )
    }
    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling deleteLiveStreamAppRecord"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      publishDomain: opts.publishDomain,
      appName: opts.appName,
      template: opts.template
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteLiveStreamAppRecord with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/recordApps/{publishDomain}/appNames/{appName}/templates/{template}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除域名级别录制模板配置
- 删除域名级别录制模板配置,重新推流后生效

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.template - 录制模板

      * @param {string} callback - callback
      @return {Object} result
      */

  deleteLiveStreamDomainRecord (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling deleteLiveStreamDomainRecord"
      )
    }
    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling deleteLiveStreamDomainRecord"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      publishDomain: opts.publishDomain,
      template: opts.template
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteLiveStreamDomainRecord with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/recordDomains/{publishDomain}/templates/{template}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询录制回调配置

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} callback - callback
      @return {Object} result
      * @param string publishDomain  推流域名
      * @param string notifyUrl  回调地址
      */

  describeLiveStreamRecordNotifyConfig (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling describeLiveStreamRecordNotifyConfig"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      publishDomain: opts.publishDomain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeLiveStreamRecordNotifyConfig with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/recordNotifys/{publishDomain}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除录制回调配置

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} callback - callback
      @return {Object} result
      */

  deleteLiveStreamRecordNotifyConfig (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling deleteLiveStreamRecordNotifyConfig"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      publishDomain: opts.publishDomain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteLiveStreamRecordNotifyConfig with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/recordNotifys/{publishDomain}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加打点录制任务
- 您可以调用此接口精确提取已录制的文件中所需要的部分

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.streamName - 流名称
      * @param {array} [opts.recordTimes] - 录制时间集合 - 最大支持10段,多段合并成一个文件 - 多段时间跨度最小不能小于10s - 多段时间跨度最大不能超过8小时  optional
      * @param {string} opts.saveBucket - 存储桶
      * @param {string} opts.saveEndpoint - 存储地址
      * @param {string} opts.recordFileType - 录制文件类型:
- 取值: ts,flv,mp4 (多种类型之前用;隔开)
- 不区分大小写

      * @param {string} [opts.saveObject] - 录制文件存储路径:
- 默认地址: record/{Date}/{ServerId}/{AppName}/{StreamName}/{StartTime}_{EndTime}.{format}
  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  addLiveRecordTask (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling addLiveRecordTask"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling addLiveRecordTask"
      )
    }
    if (opts.streamName === undefined || opts.streamName === null) {
      throw new Error(
        "Missing the required parameter 'opts.streamName' when calling addLiveRecordTask"
      )
    }
    if (opts.saveBucket === undefined || opts.saveBucket === null) {
      throw new Error(
        "Missing the required parameter 'opts.saveBucket' when calling addLiveRecordTask"
      )
    }
    if (opts.saveEndpoint === undefined || opts.saveEndpoint === null) {
      throw new Error(
        "Missing the required parameter 'opts.saveEndpoint' when calling addLiveRecordTask"
      )
    }
    if (opts.recordFileType === undefined || opts.recordFileType === null) {
      throw new Error(
        "Missing the required parameter 'opts.recordFileType' when calling addLiveRecordTask"
      )
    }

    let postBody = {}
    if (opts.recordTimes !== undefined && opts.recordTimes !== null) {
      postBody['recordTimes'] = opts.recordTimes
    }
    if (opts.saveBucket !== undefined && opts.saveBucket !== null) {
      postBody['saveBucket'] = opts.saveBucket
    }
    if (opts.saveEndpoint !== undefined && opts.saveEndpoint !== null) {
      postBody['saveEndpoint'] = opts.saveEndpoint
    }
    if (opts.recordFileType !== undefined && opts.recordFileType !== null) {
      postBody['recordFileType'] = opts.recordFileType
    }
    if (opts.saveObject !== undefined && opts.saveObject !== null) {
      postBody['saveObject'] = opts.saveObject
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      publishDomain: opts.publishDomain,
      appName: opts.appName,
      streamName: opts.streamName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call addLiveRecordTask with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/records/{publishDomain}/appNames/{appName}/streamNames/{streamName}/task',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询直播截图张数数据
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} [opts.appName] - 应用名称  optional
      * @param {string} [opts.streamName] - 流名称  optional
      * @param {string} opts.startTime - 起始时间:
- UTC时间
  格式: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
  示例: 2018-10-21T10:00:00Z
- 支持最大查询90天以内的数据

      * @param {string} [opts.endTime] - 结束时间:
- UTC时间
  格式: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
  示例: 2018-10-21T10:00:00Z
- 为空,默认当前时间
  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param snapshotData snapshotData
      */

  describeLiveSnapshotData (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling describeLiveSnapshotData"
      )
    }
    if (opts.startTime === undefined || opts.startTime === null) {
      throw new Error(
        "Missing the required parameter 'opts.startTime' when calling describeLiveSnapshotData"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      queryParams['publishDomain'] = opts.publishDomain
    }
    if (opts.appName !== undefined && opts.appName !== null) {
      queryParams['appName'] = opts.appName
    }
    if (opts.streamName !== undefined && opts.streamName !== null) {
      queryParams['streamName'] = opts.streamName
    }
    if (opts.startTime !== undefined && opts.startTime !== null) {
      queryParams['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      queryParams['endTime'] = opts.endTime
    }

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeLiveSnapshotData with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/liveSnapshotData',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询直播鉴黄张数数据
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} [opts.appName] - 应用名称  optional
      * @param {string} [opts.streamName] - 流名称  optional
      * @param {string} opts.startTime - 起始时间
- UTC时间
  格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
  示例:2018-10-21T10:00:00Z
- 支持最大查询90天以内的数据

      * @param {string} [opts.endTime] - 结束时间:
- UTC时间
  格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
  示例:2018-10-21T10:00:00Z
- 为空,默认为当前时间
  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param pornData pornData
      */

  describeLivePornData (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling describeLivePornData"
      )
    }
    if (opts.startTime === undefined || opts.startTime === null) {
      throw new Error(
        "Missing the required parameter 'opts.startTime' when calling describeLivePornData"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      queryParams['publishDomain'] = opts.publishDomain
    }
    if (opts.appName !== undefined && opts.appName !== null) {
      queryParams['appName'] = opts.appName
    }
    if (opts.streamName !== undefined && opts.streamName !== null) {
      queryParams['streamName'] = opts.streamName
    }
    if (opts.startTime !== undefined && opts.startTime !== null) {
      queryParams['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      queryParams['endTime'] = opts.endTime
    }

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeLivePornData with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/livePornData',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加直播截图模板
      * @param {Object} opts - parameters
      * @param {string} opts.format - 截图格式
- 取值: jpg, png
- 不区分大小写

      * @param {integer} [opts.width] - 截图宽度
- 取值: [8,8192]
- 如果(width,height)只设置其中之一,则按所设置参数项等比缩放另一项输出截图
- 如果(width,height)都不设置，则按源流大小输出截图
  optional
      * @param {integer} [opts.height] - 截图高度
- 取值: [8,8192]
- 如果(width,height)只设置其中之一,则按所设置参数项等比缩放另一项输出截图
- 如果(width,height)都不设置，则按源流大小输出截图
  optional
      * @param {integer} opts.fillType - 截图与设定的宽高不匹配时的处理规则
  1: 拉伸
  2: 留黑
  3: 留白
  4: 高斯模糊
- 1是按照设定宽高拉伸
- 2,3,4是等比例的缩放多余或不足处按调置处理

      * @param {integer} opts.snapshotInterval - 截图周期
- 取值范围 [5,3600]
- 单位: 秒

      * @param {integer} opts.saveMode - 存储模式
  1: 覆盖存储
  2: 顺序存储

      * @param {string} opts.saveBucket - 存储桶
      * @param {string} opts.saveEndpoint - 存储地址
      * @param {string} opts.template - 截图模板自定义名称:
- 取值要求: 数字、大小写字母或短横线(&quot;-&quot;),
  首尾不能有特殊字符(&quot;-&quot;)
- &lt;b&gt;注意: 不能与已定义命名重复&lt;/b&gt;

      * @param {string} callback - callback
      @return {Object} result
      */

  addCustomLiveStreamSnapshotTemplate (opts, callback) {
    opts = opts || {}

    if (opts.format === undefined || opts.format === null) {
      throw new Error(
        "Missing the required parameter 'opts.format' when calling addCustomLiveStreamSnapshotTemplate"
      )
    }
    if (opts.fillType === undefined || opts.fillType === null) {
      throw new Error(
        "Missing the required parameter 'opts.fillType' when calling addCustomLiveStreamSnapshotTemplate"
      )
    }
    if (opts.snapshotInterval === undefined || opts.snapshotInterval === null) {
      throw new Error(
        "Missing the required parameter 'opts.snapshotInterval' when calling addCustomLiveStreamSnapshotTemplate"
      )
    }
    if (opts.saveMode === undefined || opts.saveMode === null) {
      throw new Error(
        "Missing the required parameter 'opts.saveMode' when calling addCustomLiveStreamSnapshotTemplate"
      )
    }
    if (opts.saveBucket === undefined || opts.saveBucket === null) {
      throw new Error(
        "Missing the required parameter 'opts.saveBucket' when calling addCustomLiveStreamSnapshotTemplate"
      )
    }
    if (opts.saveEndpoint === undefined || opts.saveEndpoint === null) {
      throw new Error(
        "Missing the required parameter 'opts.saveEndpoint' when calling addCustomLiveStreamSnapshotTemplate"
      )
    }
    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling addCustomLiveStreamSnapshotTemplate"
      )
    }

    let postBody = {}
    if (opts.format !== undefined && opts.format !== null) {
      postBody['format'] = opts.format
    }
    if (opts.width !== undefined && opts.width !== null) {
      postBody['width'] = opts.width
    }
    if (opts.height !== undefined && opts.height !== null) {
      postBody['height'] = opts.height
    }
    if (opts.fillType !== undefined && opts.fillType !== null) {
      postBody['fillType'] = opts.fillType
    }
    if (opts.snapshotInterval !== undefined && opts.snapshotInterval !== null) {
      postBody['snapshotInterval'] = opts.snapshotInterval
    }
    if (opts.saveMode !== undefined && opts.saveMode !== null) {
      postBody['saveMode'] = opts.saveMode
    }
    if (opts.saveBucket !== undefined && opts.saveBucket !== null) {
      postBody['saveBucket'] = opts.saveBucket
    }
    if (opts.saveEndpoint !== undefined && opts.saveEndpoint !== null) {
      postBody['saveEndpoint'] = opts.saveEndpoint
    }
    if (opts.template !== undefined && opts.template !== null) {
      postBody['template'] = opts.template
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call addCustomLiveStreamSnapshotTemplate with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/snapshotCustoms:template',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询直播截图配置
- 截图模板配置按照 域名,应用,流 3级配置添加,以最小的粒度配置生效
- 域名、应用、流 依次粒度递减 即: 域名&gt;应用&gt;流
- 该查询旨在查询域名、应用、流最终生效的截图模板配置,并非各级的模板绑定情况

      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNum] - 页码
- 取值范围 [1, 100000]
  optional
      * @param {integer} [opts.pageSize] - 分页大小
- 取值范围 [10, 100]
  optional
      * @param {filter} [opts.filters] - 直播截图查询过滤条件:
- name:   publishDomain 必填(推流域名)
- value:  参数
- name:   appName 必填(应用名称)
- value:  参数
- name:   streamName 非必填(流名称)
- value:  参数
  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param integer totalCount  查询总数
      * @param snapshotConfig snapshotConfigs
      */

  describeCustomLiveStreamSnapshotConfig (opts, callback) {
    opts = opts || {}

    let postBody = null
    let queryParams = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      queryParams['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'))

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeCustomLiveStreamSnapshotConfig with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/snapshotCustoms:config',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询直播截图模板列表
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNum] - 页码
- 取值范围 [1, 100000]
  optional
      * @param {integer} [opts.pageSize] - 分页大小
- 取值范围 [10, 100]
  optional
      * @param {filter} [opts.filters] - 截图模板查询过滤条件
- name:   template 录制模板自定义名称
- value:  如果参数为空，则查询全部
  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param integer totalCount  查询总数
      * @param snapshotTemplate snapshotTemplates
      */

  describeCustomLiveStreamSnapshotTemplates (opts, callback) {
    opts = opts || {}

    let postBody = null
    let queryParams = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      queryParams['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'))

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeCustomLiveStreamSnapshotTemplates with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/snapshotCustoms',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加应用截图配置
- 添加应用级别的截图模板配置

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.template - 截图模板

      * @param {string} callback - callback
      @return {Object} result
      */

  addLiveStreamAppSnapshot (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling addLiveStreamAppSnapshot"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling addLiveStreamAppSnapshot"
      )
    }
    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling addLiveStreamAppSnapshot"
      )
    }

    let postBody = {}
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      postBody['publishDomain'] = opts.publishDomain
    }
    if (opts.appName !== undefined && opts.appName !== null) {
      postBody['appName'] = opts.appName
    }
    if (opts.template !== undefined && opts.template !== null) {
      postBody['template'] = opts.template
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call addLiveStreamAppSnapshot with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/snapshotApps:template',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加域名截图配置
- 添加域名级别的截图模板配置

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.template - 截图模板

      * @param {string} callback - callback
      @return {Object} result
      */

  addLiveStreamDomainSnapshot (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling addLiveStreamDomainSnapshot"
      )
    }
    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling addLiveStreamDomainSnapshot"
      )
    }

    let postBody = {}
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      postBody['publishDomain'] = opts.publishDomain
    }
    if (opts.template !== undefined && opts.template !== null) {
      postBody['template'] = opts.template
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call addLiveStreamDomainSnapshot with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/snapshotDomains:template',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置直播截图回调通知地址

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.notifyUrl - 截图回调通知的URL地址:
- 以 http:// 开头,外网可访问的地址

      * @param {string} callback - callback
      @return {Object} result
      */

  setLiveStreamSnapshotNotifyConfig (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling setLiveStreamSnapshotNotifyConfig"
      )
    }
    if (opts.notifyUrl === undefined || opts.notifyUrl === null) {
      throw new Error(
        "Missing the required parameter 'opts.notifyUrl' when calling setLiveStreamSnapshotNotifyConfig"
      )
    }

    let postBody = {}
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      postBody['publishDomain'] = opts.publishDomain
    }
    if (opts.notifyUrl !== undefined && opts.notifyUrl !== null) {
      postBody['notifyUrl'] = opts.notifyUrl
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setLiveStreamSnapshotNotifyConfig with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/snapshotNotifys:config',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除用户自定义直播截图模板
- 删除截图模板前,请先删除此模板相关的截图配置,否则将会影响线上业务

      * @param {Object} opts - parameters
      * @param {string} opts.template - 截图模板
      * @param {string} callback - callback
      @return {Object} result
      */

  deleteCustomLiveStreamSnapshotTemplate (opts, callback) {
    opts = opts || {}

    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling deleteCustomLiveStreamSnapshotTemplate"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      template: opts.template
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteCustomLiveStreamSnapshotTemplate with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/snapshotCustoms/{template}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除APP截图配置
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.template - 截图模板

      * @param {string} callback - callback
      @return {Object} result
      */

  deleteLiveStreamAppSnapshot (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling deleteLiveStreamAppSnapshot"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling deleteLiveStreamAppSnapshot"
      )
    }
    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling deleteLiveStreamAppSnapshot"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      publishDomain: opts.publishDomain,
      appName: opts.appName,
      template: opts.template
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteLiveStreamAppSnapshot with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/snapshotApps/{publishDomain}/appNames/{appName}/templates/{template}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除域名截图配置
- 删除域名级别的截图模板配置,重新推流后生效

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.template - 截图模板
      * @param {string} callback - callback
      @return {Object} result
      */

  deleteLiveStreamDomainSnapshot (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling deleteLiveStreamDomainSnapshot"
      )
    }
    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling deleteLiveStreamDomainSnapshot"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      publishDomain: opts.publishDomain,
      template: opts.template
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteLiveStreamDomainSnapshot with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/snapshotDomains/{publishDomain}/templates/{template}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询截图回调配置

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} callback - callback
      @return {Object} result
      * @param string publishDomain  推流域名
      * @param string notifyUrl  回调地址
      */

  describeLiveStreamSnapshotNotifyConfig (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling describeLiveStreamSnapshotNotifyConfig"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      publishDomain: opts.publishDomain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeLiveStreamSnapshotNotifyConfig with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/snapshotNotifys/{publishDomain}:config',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除截图回调配置

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} callback - callback
      @return {Object} result
      */

  deleteLiveStreamSnapshotNotifyConfig (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling deleteLiveStreamSnapshotNotifyConfig"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      publishDomain: opts.publishDomain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteLiveStreamSnapshotNotifyConfig with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/snapshotNotifys/{publishDomain}:config',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  禁止直播流推送
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.streamName - 流名称
      * @param {string} callback - callback
      @return {Object} result
      */

  forbidLiveStream (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling forbidLiveStream"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling forbidLiveStream"
      )
    }
    if (opts.streamName === undefined || opts.streamName === null) {
      throw new Error(
        "Missing the required parameter 'opts.streamName' when calling forbidLiveStream"
      )
    }

    let postBody = {}
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      postBody['publishDomain'] = opts.publishDomain
    }
    if (opts.appName !== undefined && opts.appName !== null) {
      postBody['appName'] = opts.appName
    }
    if (opts.streamName !== undefined && opts.streamName !== null) {
      postBody['streamName'] = opts.streamName
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call forbidLiveStream with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/streams:forbid',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  恢复直播流推送
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.streamName - 流名称
      * @param {string} callback - callback
      @return {Object} result
      */

  resumeLiveStream (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling resumeLiveStream"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling resumeLiveStream"
      )
    }
    if (opts.streamName === undefined || opts.streamName === null) {
      throw new Error(
        "Missing the required parameter 'opts.streamName' when calling resumeLiveStream"
      )
    }

    let postBody = {}
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      postBody['publishDomain'] = opts.publishDomain
    }
    if (opts.appName !== undefined && opts.appName !== null) {
      postBody['appName'] = opts.appName
    }
    if (opts.streamName !== undefined && opts.streamName !== null) {
      postBody['streamName'] = opts.streamName
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call resumeLiveStream with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/streams:resume',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置直播流状态回调地址
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.notifyUrl - 直播流状态回调地址
- 必须以 http:// 开头

      * @param {string} callback - callback
      @return {Object} result
      */

  setLiveStreamNotifyConfig (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling setLiveStreamNotifyConfig"
      )
    }
    if (opts.notifyUrl === undefined || opts.notifyUrl === null) {
      throw new Error(
        "Missing the required parameter 'opts.notifyUrl' when calling setLiveStreamNotifyConfig"
      )
    }

    let postBody = {}
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      postBody['publishDomain'] = opts.publishDomain
    }
    if (opts.notifyUrl !== undefined && opts.notifyUrl !== null) {
      postBody['notifyUrl'] = opts.notifyUrl
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call setLiveStreamNotifyConfig with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/streamNotifys',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询直播流状态回调地址
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} callback - callback
      @return {Object} result
      * @param string publishDomain  推流域名
      * @param string notifyUrl  流状态回调地址
      */

  describeLiveStreamNotifyConfig (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling describeLiveStreamNotifyConfig"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      publishDomain: opts.publishDomain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeLiveStreamNotifyConfig with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/streamNotifys/{publishDomain}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除直播流状态回调地址
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} callback - callback
      @return {Object} result
      */

  deleteLiveStreamNotifyConfig (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling deleteLiveStreamNotifyConfig"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      publishDomain: opts.publishDomain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteLiveStreamNotifyConfig with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/streamNotifys/{publishDomain}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询直播中的流的信息
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {integer} [opts.pageNum] - 页码
- 取值范围[1, 100000]
  optional
      * @param {integer} [opts.pageSize] - 分页大小
- 取值范围[10, 100]
  optional
      * @param {string} [opts.appName] - 应用名称  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param integer totalCount  查询总数
      * @param onlineStreamInfo onlineStreamInfos
      */

  describeLiveStreamOnlineList (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling describeLiveStreamOnlineList"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      queryParams['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    if (opts.appName !== undefined && opts.appName !== null) {
      queryParams['appName'] = opts.appName
    }

    let pathParams = {
      regionId: 'jdcloud',
      publishDomain: opts.publishDomain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeLiveStreamOnlineList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/streams/{publishDomain}/onlineList',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查看推流历史记录
      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {integer} [opts.pageNum] - 页码&lt;br&gt;
- 取值范围[1, 100000]
  optional
      * @param {integer} [opts.pageSize] - 分页大小&lt;br&gt;
- 取值范围[10, 100]
  optional
      * @param {string} [opts.appName] - 应用名称  optional
      * @param {string} [opts.streamName] - 流名称  optional
      * @param {string} opts.startTime - 推流起始时间&lt;br&gt;
- UTC时间
  格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
  示例:2018-10-21T10:00:00Z
- 最大支持最近90天内的流历史查询

      * @param {string} [opts.endTime] - 推流结束时间&lt;br&gt;
- UTC时间
  格式:yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
  示例:2018-10-21T10:00:00Z
- 最大支持最近90天内的流历史查询
- 结束时间为空默认为当前时间
  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param integer totalCount  查询总数
      * @param liveStreamPublishInfo liveStreamPublishInfos
      */

  describeLiveStreamPublishList (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling describeLiveStreamPublishList"
      )
    }
    if (opts.startTime === undefined || opts.startTime === null) {
      throw new Error(
        "Missing the required parameter 'opts.startTime' when calling describeLiveStreamPublishList"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      queryParams['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    if (opts.appName !== undefined && opts.appName !== null) {
      queryParams['appName'] = opts.appName
    }
    if (opts.streamName !== undefined && opts.streamName !== null) {
      queryParams['streamName'] = opts.streamName
    }
    if (opts.startTime !== undefined && opts.startTime !== null) {
      queryParams['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      queryParams['endTime'] = opts.endTime
    }

    let pathParams = {
      regionId: 'jdcloud',
      publishDomain: opts.publishDomain
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeLiveStreamPublishList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/streams/{publishDomain}/publishList',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  开启时移
直播支持最大4小时的HLS时移，使用方式为在播放域名后增加时移参数来实现，参数类型支持指定开始时间和时间偏移量2种方式进行时移。 开启直播时移后，重新推流生效，使用播放域名带相应参数访问即可播放
- 域名格式：
1、http://{playDomain}/{appName}/{streamName}/index.m3u8?timeshift&#x3D;400（秒，指从当前时间往前时移的偏移量）
2、http://{playDomain}/{appName}/{streamName}/index.m3u8?starttime&#x3D;1529223702 (unix时间戳)

      * @param {Object} opts - parameters
      * @param {string} opts.playDomain - 直播的播放域名
      * @param {string} callback - callback
      @return {Object} result
      */

  openLiveTimeshift (opts, callback) {
    opts = opts || {}

    if (opts.playDomain === undefined || opts.playDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.playDomain' when calling openLiveTimeshift"
      )
    }

    let postBody = {}
    if (opts.playDomain !== undefined && opts.playDomain !== null) {
      postBody['playDomain'] = opts.playDomain
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call openLiveTimeshift with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/liveTimeshift:open',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  关闭时移
      * @param {Object} opts - parameters
      * @param {string} opts.playDomain - 直播的播放域名
      * @param {string} callback - callback
      @return {Object} result
      */

  closeLiveTimeshift (opts, callback) {
    opts = opts || {}

    if (opts.playDomain === undefined || opts.playDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.playDomain' when calling closeLiveTimeshift"
      )
    }

    let postBody = {}
    if (opts.playDomain !== undefined && opts.playDomain !== null) {
      postBody['playDomain'] = opts.playDomain
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call closeLiveTimeshift with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/liveTimeshift:close',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询时移配置
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNumber] - 页码
- 取值范围[1, 100000]
  optional
      * @param {integer} [opts.pageSize] - 分页大小
- 取值范围[10, 100]
  optional
      * @param {string} opts.playDomain - 直播的播放域名
- 目前仅支持精确匹配

      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param integer totalCount  查询总数
      * @param timeshiftConfig timeshiftConfigs
      */

  describeLiveTimeshiftConfigs (opts, callback) {
    opts = opts || {}

    if (opts.playDomain === undefined || opts.playDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.playDomain' when calling describeLiveTimeshiftConfigs"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
      queryParams['pageNumber'] = opts.pageNumber
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    if (opts.playDomain !== undefined && opts.playDomain !== null) {
      queryParams['playDomain'] = opts.playDomain
    }

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeLiveTimeshiftConfigs with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/liveTimeshift:configs',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加域名级别转码配置
- 添加域名级别的转码模板配置

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 直播的推流域名
      * @param {string} opts.template - 转码模版
- 取值范围: 系统标准转码模板, 用户自定义转码模板
- 系统标准转码模板
  ld (h.264/640*360/15f)
  sd (h.264/854*480/24f)
  hd (h.264/1280*720/25f)
  shd (h.264/1920*1080/30f)

      * @param {string} callback - callback
      @return {Object} result
      */

  addLiveStreamDomainTranscode (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling addLiveStreamDomainTranscode"
      )
    }
    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling addLiveStreamDomainTranscode"
      )
    }

    let postBody = {}
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      postBody['publishDomain'] = opts.publishDomain
    }
    if (opts.template !== undefined && opts.template !== null) {
      postBody['template'] = opts.template
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call addLiveStreamDomainTranscode with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/transcodeDomains:config',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加应用转码配置
- 添加应用级别的转码模板配置

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.template - 转码模版
- 取值范围: 系统标准转码模板, 用户自定义转码模板
- 系统标准转码模板
  ld (h.264/640*360/15f)
  sd (h.264/854*480/24f)
  hd (h.264/1280*720/25f)
  shd (h.264/1920*1080/30f)

      * @param {string} callback - callback
      @return {Object} result
      */

  addLiveStreamAppTranscode (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling addLiveStreamAppTranscode"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling addLiveStreamAppTranscode"
      )
    }
    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling addLiveStreamAppTranscode"
      )
    }

    let postBody = {}
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      postBody['publishDomain'] = opts.publishDomain
    }
    if (opts.appName !== undefined && opts.appName !== null) {
      postBody['appName'] = opts.appName
    }
    if (opts.template !== undefined && opts.template !== null) {
      postBody['template'] = opts.template
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call addLiveStreamAppTranscode with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/transcodeApps:config',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加自定义转码模板
- 系统为您预设了标准转码模板,如果不能满足您的转码需求,可以通过此接口添加自定义转码模板
- 系统标准转码模板
    ld (h.264/640*360/15f)
    sd (h.264/854*480/24f)
    hd (h.264/1280*720/25f)
    shd (h.264/1920*1080/30f)

      * @param {Object} opts - parameters
      * @param {integer} opts.videoCodeRate - 转码输出的码率值
- 取值范围: [200,3000]
- 单位: kpbs

      * @param {string} opts.videoFrameRate - 转码输出的帧率值
- 取值：15、25、30、60

      * @param {integer} [opts.width] - 转码输出视频宽度
- 取值: [100,1920]
- 如果(width,height)只设置其中之一,则按所设置参数项等比缩放另一项输出转码
- 如果(width,height)都不设置，则按源流大小输出转码
  optional
      * @param {integer} [opts.height] - 转码输出视频宽度
- 取值: [100,1920]
- 如果(width,height)只设置其中之一,则按所设置参数项等比缩放另一项输出转码
- 如果(width,height)都不设置，则按源流大小输出转码
  optional
      * @param {string} opts.template - 转码模板(转码流输出后缀)
- 取值要求：数字、大小写字母或短横线(&quot;-&quot;),必须以数字或字母作为开头和结尾,长度不超过50字符
- &lt;b&gt;注意: 不能与系统的标准的转码模板和当前用户已自定义命名重复&lt;/b&gt;
- 系统标准转码模板
  ld (h.264/640*360/15f)
  sd (h.264/854*480/24f)
  hd (h.264/1280*720/25f)
  shd (h.264/1920*1080/30f)

      * @param {string} opts.audioCodec - 转码输出音频编码格式
- 取值: aac、mp3
- 不区分大小写

      * @param {string} opts.audioFormat - 转码输出音频格式
- 取值: aac_lc，aac_low，aac_he，aac_he_v2
- 不区分大小写

      * @param {integer} opts.audioSampleRate - 转码输出音频采样率
- 取值: [44100,48000]

      * @param {integer} opts.audioChannel - 转码输出音频通道数
  1: 单声道
  2: 双声道

      * @param {integer} opts.audioCodeRate - 转码输出音频码率
- 取值: [16,128]
- 单位: kbps

      * @param {string} callback - callback
      @return {Object} result
      */

  addCustomLiveStreamTranscodeTemplate (opts, callback) {
    opts = opts || {}

    if (opts.videoCodeRate === undefined || opts.videoCodeRate === null) {
      throw new Error(
        "Missing the required parameter 'opts.videoCodeRate' when calling addCustomLiveStreamTranscodeTemplate"
      )
    }
    if (opts.videoFrameRate === undefined || opts.videoFrameRate === null) {
      throw new Error(
        "Missing the required parameter 'opts.videoFrameRate' when calling addCustomLiveStreamTranscodeTemplate"
      )
    }
    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling addCustomLiveStreamTranscodeTemplate"
      )
    }
    if (opts.audioCodec === undefined || opts.audioCodec === null) {
      throw new Error(
        "Missing the required parameter 'opts.audioCodec' when calling addCustomLiveStreamTranscodeTemplate"
      )
    }
    if (opts.audioFormat === undefined || opts.audioFormat === null) {
      throw new Error(
        "Missing the required parameter 'opts.audioFormat' when calling addCustomLiveStreamTranscodeTemplate"
      )
    }
    if (opts.audioSampleRate === undefined || opts.audioSampleRate === null) {
      throw new Error(
        "Missing the required parameter 'opts.audioSampleRate' when calling addCustomLiveStreamTranscodeTemplate"
      )
    }
    if (opts.audioChannel === undefined || opts.audioChannel === null) {
      throw new Error(
        "Missing the required parameter 'opts.audioChannel' when calling addCustomLiveStreamTranscodeTemplate"
      )
    }
    if (opts.audioCodeRate === undefined || opts.audioCodeRate === null) {
      throw new Error(
        "Missing the required parameter 'opts.audioCodeRate' when calling addCustomLiveStreamTranscodeTemplate"
      )
    }

    let postBody = {}
    if (opts.videoCodeRate !== undefined && opts.videoCodeRate !== null) {
      postBody['videoCodeRate'] = opts.videoCodeRate
    }
    if (opts.videoFrameRate !== undefined && opts.videoFrameRate !== null) {
      postBody['videoFrameRate'] = opts.videoFrameRate
    }
    if (opts.width !== undefined && opts.width !== null) {
      postBody['width'] = opts.width
    }
    if (opts.height !== undefined && opts.height !== null) {
      postBody['height'] = opts.height
    }
    if (opts.template !== undefined && opts.template !== null) {
      postBody['template'] = opts.template
    }
    if (opts.audioCodec !== undefined && opts.audioCodec !== null) {
      postBody['audioCodec'] = opts.audioCodec
    }
    if (opts.audioFormat !== undefined && opts.audioFormat !== null) {
      postBody['audioFormat'] = opts.audioFormat
    }
    if (opts.audioSampleRate !== undefined && opts.audioSampleRate !== null) {
      postBody['audioSampleRate'] = opts.audioSampleRate
    }
    if (opts.audioChannel !== undefined && opts.audioChannel !== null) {
      postBody['audioChannel'] = opts.audioChannel
    }
    if (opts.audioCodeRate !== undefined && opts.audioCodeRate !== null) {
      postBody['audioCodeRate'] = opts.audioCodeRate
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call addCustomLiveStreamTranscodeTemplate with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/transcodeCustoms:template',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询用户自定义转码模板列表

      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNum] - 页码
- 取值范围 [1, 100000]
  optional
      * @param {integer} [opts.pageSize] - 分页大小
- 取值范围 [10, 100]
  optional
      * @param {filter} [opts.filters] - 转码模板查询过滤条件:
  - name:   template 录制模板自定义名称
  - value:  如果参数为空，则查询全部
  - 如果为空,则表示查询该用下所有自定义的转码模板
  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param integer totalCount  查询总数
      * @param transcodeInfo transcodeTemplates
      */

  describeCustomLiveStreamTranscodeTemplates (opts, callback) {
    opts = opts || {}

    let postBody = null
    let queryParams = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      queryParams['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'))

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeCustomLiveStreamTranscodeTemplates with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/transcodeCustoms',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询转码模板配置
- 转码模板配置按照 域名,应用,流 3级配置添加,以最小的粒度配置生效原则
- 域名、应用、流 依次粒度递减 即: 域名&gt;应用&gt;流
- 该查询旨在查询域名、应用、流最终生效的转码模板配置,并非各级的模板绑定情况

      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNum] - 页码
- 取值范围 [1, 100000]
  optional
      * @param {integer} [opts.pageSize] - 分页大小
- 取值范围[10, 100]
  optional
      * @param {filter} [opts.filters] - 模板配置查询过滤条件:
  - name:   publishDomain 必填(推流域名)
  - value:  参数
  - name:   appName 必填(应用名称)
  - value:  参数
  - name:   streamName 非必填(流名称)
  - value:  参数
  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param integer totalCount  查询总数
      * @param templateConfig transcodeConfigs
      */

  describeLiveStreamTranscodeConfig (opts, callback) {
    opts = opts || {}

    let postBody = null
    let queryParams = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      queryParams['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'))

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeLiveStreamTranscodeConfig with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/transcodes:config',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除域名级别转码模板配置
- 删除域名级别转码模板配置,重新推流后生效

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.template - 转码模板
      * @param {string} callback - callback
      @return {Object} result
      */

  deleteLiveStreamDomainTranscode (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling deleteLiveStreamDomainTranscode"
      )
    }
    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling deleteLiveStreamDomainTranscode"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      publishDomain: opts.publishDomain,
      template: opts.template
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteLiveStreamDomainTranscode with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/transcodeDomains/{publishDomain}/templates/{template}:config',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除应用级别转码模板配置
- 删除应用级别的转码模板配置,重新推流后生效

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.template - 转码模板

      * @param {string} callback - callback
      @return {Object} result
      */

  deleteLiveStreamAppTranscode (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling deleteLiveStreamAppTranscode"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling deleteLiveStreamAppTranscode"
      )
    }
    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling deleteLiveStreamAppTranscode"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      publishDomain: opts.publishDomain,
      appName: opts.appName,
      template: opts.template
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteLiveStreamAppTranscode with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/transcodeApps/{publishDomain}/appNames/{appName}/templates/{template}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询用户自定义转码模板详情
- 查询用户自定义转码模板详情
- 系统标准转码模板
    ld (h.264/640*360/15f)
    sd (h.264/854*480/24f)
    hd (h.264/1280*720/25f)
    shd (h.264/1920*1080/30f)

      * @param {Object} opts - parameters
      * @param {string} opts.template - 转码模板
      * @param {string} callback - callback
      @return {Object} result
      * @param integer videoCodeRate  转码输出的码率值
- 单位: kpbs

      * @param string videoFrameRate  转码输出的帧率值

      * @param integer width  转码输出视频宽度

      * @param integer height  转码输出视频宽度

      * @param string template  转码模板

      * @param string audioCodec  转码输出音频编码格式

      * @param string audioFormat  转码输出音频格式

      * @param integer audioSampleRate  转码输出音频采样率

      * @param integer audioChannel  转码输出音频通道数
  1: 单声道
  2: 双声道

      * @param integer audioCodeRate  转码输出音频码率
- 单位: kbps

      */

  describeCustomLiveStreamTranscodeTemplate (opts, callback) {
    opts = opts || {}

    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling describeCustomLiveStreamTranscodeTemplate"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      template: opts.template
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeCustomLiveStreamTranscodeTemplate with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/transcodeCustoms/{template}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除用户自定义转码模板
- 删除用户自定义转码模板之前必须先删除此模板在各域名、应用、流级别的转码设置

      * @param {Object} opts - parameters
      * @param {string} opts.template - 转码模板

      * @param {string} callback - callback
      @return {Object} result
      */

  deleteCustomLiveStreamTranscodeTemplate (opts, callback) {
    opts = opts || {}

    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling deleteCustomLiveStreamTranscodeTemplate"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      template: opts.template
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteCustomLiveStreamTranscodeTemplate with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/transcodeCustoms/{template}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加用户自定义水印模板

      * @param {Object} opts - parameters
      * @param {integer} opts.offsetX - x轴偏移量
- 单位: 像素

      * @param {integer} opts.offsetY - y轴偏移量:
- 单位: 像素

      * @param {integer} opts.width - 水印宽度:
- 取值: [0,1920]
- 单位: 像素

      * @param {integer} opts.height - 水印高度:
- 取值: [0,1920]
- 单位: 像素

      * @param {string} opts.template - 自定义水印模板名称
-&amp;ensp;取值要求: 数字、大小写字母或短横线(&quot;-&quot;),
&amp;ensp;&amp;ensp;首尾不能有特殊字符(&quot;-&quot;),
&amp;ensp;&amp;ensp;不超过50字符,utf-8格式
-&amp;ensp;&lt;b&gt;注意: 不能与已定义命名重复&lt;/b&gt;

      * @param {string} opts.url - 水印地址&lt;br&gt;-&amp;ensp;以&amp;ensp;http:// 开头,可公开访问地址&lt;br&gt;
      * @param {string} callback - callback
      @return {Object} result
      */

  addCustomLiveStreamWatermarkTemplate (opts, callback) {
    opts = opts || {}

    if (opts.offsetX === undefined || opts.offsetX === null) {
      throw new Error(
        "Missing the required parameter 'opts.offsetX' when calling addCustomLiveStreamWatermarkTemplate"
      )
    }
    if (opts.offsetY === undefined || opts.offsetY === null) {
      throw new Error(
        "Missing the required parameter 'opts.offsetY' when calling addCustomLiveStreamWatermarkTemplate"
      )
    }
    if (opts.width === undefined || opts.width === null) {
      throw new Error(
        "Missing the required parameter 'opts.width' when calling addCustomLiveStreamWatermarkTemplate"
      )
    }
    if (opts.height === undefined || opts.height === null) {
      throw new Error(
        "Missing the required parameter 'opts.height' when calling addCustomLiveStreamWatermarkTemplate"
      )
    }
    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling addCustomLiveStreamWatermarkTemplate"
      )
    }
    if (opts.url === undefined || opts.url === null) {
      throw new Error(
        "Missing the required parameter 'opts.url' when calling addCustomLiveStreamWatermarkTemplate"
      )
    }

    let postBody = {}
    if (opts.offsetX !== undefined && opts.offsetX !== null) {
      postBody['offsetX'] = opts.offsetX
    }
    if (opts.offsetY !== undefined && opts.offsetY !== null) {
      postBody['offsetY'] = opts.offsetY
    }
    if (opts.width !== undefined && opts.width !== null) {
      postBody['width'] = opts.width
    }
    if (opts.height !== undefined && opts.height !== null) {
      postBody['height'] = opts.height
    }
    if (opts.template !== undefined && opts.template !== null) {
      postBody['template'] = opts.template
    }
    if (opts.url !== undefined && opts.url !== null) {
      postBody['url'] = opts.url
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call addCustomLiveStreamWatermarkTemplate with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/watermarkCustoms:template',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询用户定义水印模板列表

      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNum] - 页码
- 取值范围 [1, 100000]
  optional
      * @param {integer} [opts.pageSize] - 分页大小
- 取值范围 [10, 100]
  optional
      * @param {filter} [opts.filters] - 水印模板列表查询过滤条件:
  - name:   template 录制模板自定义名称
  - value:  如果参数为空，则查询全部
  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param integer totalCount  查询总数
      * @param watermarkTemplate watermarkTemplates
      */

  describeCustomLiveStreamWatermarkTemplates (opts, callback) {
    opts = opts || {}

    let postBody = null
    let queryParams = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      queryParams['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'))

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeCustomLiveStreamWatermarkTemplates with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/watermarkCustoms',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加应用级别水印配置

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.template - 水印模板名称

      * @param {string} callback - callback
      @return {Object} result
      */

  addLiveStreamAppWatermark (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling addLiveStreamAppWatermark"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling addLiveStreamAppWatermark"
      )
    }
    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling addLiveStreamAppWatermark"
      )
    }

    let postBody = {}
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      postBody['publishDomain'] = opts.publishDomain
    }
    if (opts.appName !== undefined && opts.appName !== null) {
      postBody['appName'] = opts.appName
    }
    if (opts.template !== undefined && opts.template !== null) {
      postBody['template'] = opts.template
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call addLiveStreamAppWatermark with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/watermarkApps:config',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加域名水印配置

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.template - 水印模板

      * @param {string} callback - callback
      @return {Object} result
      */

  addLiveStreamDomainWatermark (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling addLiveStreamDomainWatermark"
      )
    }
    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling addLiveStreamDomainWatermark"
      )
    }

    let postBody = {}
    if (opts.publishDomain !== undefined && opts.publishDomain !== null) {
      postBody['publishDomain'] = opts.publishDomain
    }
    if (opts.template !== undefined && opts.template !== null) {
      postBody['template'] = opts.template
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call addLiveStreamDomainWatermark with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/watermarkDomains:config',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询直播水印配置
- 水印模板配置按照 域名,应用,流 3级配置添加,以最小的粒度配置生效
- 域名、应用、流 依次粒度递减 即: 域名&gt;应用&gt;流
- 该查询旨在查询域名、应用、流最终生效的水印模板配置,并非各级的模板绑定情况

      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNum] - 页码
- 取值范围 [1, 100000]
  optional
      * @param {integer} [opts.pageSize] - 分页大小
- 取值范围 [10, 100]
  optional
      * @param {filter} [opts.filters] - 水印配置查询过滤条件:
  - name:   publishDomain，必填(推流域名)
  - value:  参数
  - name:   appName，必填(应用名称)
  - value:  参数
  - name:   streamName，非必填(流名称)
  - value:  参数
  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param integer pageNumber  当前页码
      * @param integer pageSize  每页数量
      * @param integer totalCount  查询总数
      * @param liveStreamRecordConfig watermarkConfigs
      */

  describeCustomLiveStreamWatermarkConfig (opts, callback) {
    opts = opts || {}

    let postBody = null
    let queryParams = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      queryParams['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'))

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeCustomLiveStreamWatermarkConfig with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/watermarks:config',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除用户自定义水印模板
- 删除用户自定义水印模板之前必须先删除此模板在各域名、应用、流级别的水印设置

      * @param {Object} opts - parameters
      * @param {string} opts.template - 水印模板

      * @param {string} callback - callback
      @return {Object} result
      */

  deleteCustomLiveStreamWatermarkTemplate (opts, callback) {
    opts = opts || {}

    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling deleteCustomLiveStreamWatermarkTemplate"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      template: opts.template
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteCustomLiveStreamWatermarkTemplate with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/watermarkCustoms/{template}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除应用级别水印模板配置
- 删除应用级别的水印模板配置,重新推流后生效

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.template - 水印模板

      * @param {string} callback - callback
      @return {Object} result
      */

  deleteLiveStreamAppWatermark (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling deleteLiveStreamAppWatermark"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling deleteLiveStreamAppWatermark"
      )
    }
    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling deleteLiveStreamAppWatermark"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      publishDomain: opts.publishDomain,
      appName: opts.appName,
      template: opts.template
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteLiveStreamAppWatermark with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/watermarkApps/{publishDomain}/appNames/{appName}/templates/{template}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除域名级别水印模板配置
- 删除域名级别水印模板配置,重新推流后生效

      * @param {Object} opts - parameters
      * @param {string} opts.publishDomain - 推流域名
      * @param {string} opts.template - 水印模板

      * @param {string} callback - callback
      @return {Object} result
      */

  deleteLiveStreamDomainWatermark (opts, callback) {
    opts = opts || {}

    if (opts.publishDomain === undefined || opts.publishDomain === null) {
      throw new Error(
        "Missing the required parameter 'opts.publishDomain' when calling deleteLiveStreamDomainWatermark"
      )
    }
    if (opts.template === undefined || opts.template === null) {
      throw new Error(
        "Missing the required parameter 'opts.template' when calling deleteLiveStreamDomainWatermark"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      publishDomain: opts.publishDomain,
      template: opts.template
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  live/1.0.3'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteLiveStreamDomainWatermark with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/watermarkDomains/{publishDomain}/templates/{template}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }
}
module.exports = JDCloud.LIVE
