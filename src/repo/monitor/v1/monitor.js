/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Statistics APIs
 * 资源统计相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

require('../../../lib/node_loader');
var JDCloud = require('../../../lib/core');
var Service = JDCloud.Service;
var serviceId = "monitor"
Service._services[serviceId] = true;

/**
* monitor service.
* @version 1.2.4
*/

JDCloud.MONITOR= class MONITOR extends Service {
    constructor(options = {}) {
            options._defaultEndpoint = {};
            options._defaultEndpoint.protocol = options._defaultEndpoint.protocol || 'https';
            options._defaultEndpoint.host = options._defaultEndpoint.host || 'monitor.jdcloud-api.com';
            options.basePath = '/v1'; //默认要设为空""
            super( serviceId , options);
    }

      /**
      *  查询报警历史
检索条件组合优先级从高到低为
1. serviceCode
1.1 serviceCode + resourceId
1.2 serviceCode + resourceIds
2. serviceCodes
3. 用户所有规则
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNumber] - 当前所在页，默认为1  optional 
      * @param {integer} [opts.pageSize] - 页面大小，默认为20；取值范围[1, 100]  optional 
      * @param {string} [opts.serviceCode] - 产品线  optional 
      * @param {string} [opts.resourceId] - 资源Id  optional 
      * @param {string} [opts.alarmId] - 规则Id  optional 
      * @param {integer} [opts.alarming] - 正在报警, 取值为1  optional 
      * @param {string} [opts.startTime] - 开始时间  optional 
      * @param {string} [opts.endTime] - 结束时间  optional 
      * @param {filter} [opts.filters] - 服务码或资源Id列表
filter name 为serviceCodes表示查询多个产品线的规则
filter name 为resourceIds表示查询多个资源的规则  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param describedAlarmHistory alarmHistoryList  
      * @param integer total  总数
      */

    describeAlarmHistory(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeAlarmHistory');
          }

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
           if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
               queryParams['serviceCode'] = opts.serviceCode
           }
           if (opts.resourceId !== undefined && opts.resourceId !== null) {
               queryParams['resourceId'] = opts.resourceId
           }
           if (opts.alarmId !== undefined && opts.alarmId !== null) {
               queryParams['alarmId'] = opts.alarmId
           }
           if (opts.alarming !== undefined && opts.alarming !== null) {
               queryParams['alarming'] = opts.alarming
           }
           if (opts.startTime !== undefined && opts.startTime !== null) {
               queryParams['startTime'] = opts.startTime
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               queryParams['endTime'] = opts.endTime
           }
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeAlarmHistory with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/alarmHistory', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询规则, 查询参数组合及优先级从高到低为：
1：serviceCode不为空
1.1：serviceCode + resourceId
1.2: serviceCode + resourceIds
2：serviceCodes不为空
3: 所有规则
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNumber] - 当前所在页，默认为1  optional 
      * @param {integer} [opts.pageSize] - 页面大小，默认为20；取值范围[1, 100]  optional 
      * @param {string} [opts.serviceCode] - 产品名称  optional 
      * @param {string} [opts.resourceID] - 资源ID  optional 
      * @param {integer} [opts.ruleType] - 规则类型, 1表示资源监控，6表示站点监控,7表示可用性监控  optional 
      * @param {integer} [opts.status] - 规则报警状态, 1：正常, 2：报警，4：数据不足  optional 
      * @param {integer} [opts.enabled] - 规则状态：1为启用，0为禁用  optional 
      * @param {integer} [opts.isAlarming] - 是否为正在报警的规则，0为忽略，1为是，与 status 同时只能生效一个,isAlarming 优先生效  optional 
      * @param {string} [opts.alarmId] - 规则的id  optional 
      * @param {filter} [opts.filters] - 服务码或资源Id列表
filter name 为serviceCodes表示查询多个产品线的规则
filter name 为resourceIds表示查询多个资源的规则  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param describedAlarm alarmList  
      * @param integer total  规则总数
      */

    describeAlarms(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeAlarms');
          }

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
           if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
               queryParams['serviceCode'] = opts.serviceCode
           }
           if (opts.resourceID !== undefined && opts.resourceID !== null) {
               queryParams['resourceID'] = opts.resourceID
           }
           if (opts.ruleType !== undefined && opts.ruleType !== null) {
               queryParams['ruleType'] = opts.ruleType
           }
           if (opts.status !== undefined && opts.status !== null) {
               queryParams['status'] = opts.status
           }
           if (opts.enabled !== undefined && opts.enabled !== null) {
               queryParams['enabled'] = opts.enabled
           }
           if (opts.isAlarming !== undefined && opts.isAlarming !== null) {
               queryParams['isAlarming'] = opts.isAlarming
           }
           if (opts.alarmId !== undefined && opts.alarmId !== null) {
               queryParams['alarmId'] = opts.alarmId
           }
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeAlarms with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/alarms', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  创建报警规则，可以为某一个实例创建报警规则，也可以为多个实例同时创建报警规则。
      * @param {Object} opts - parameters
      * @param {string} opts.clientToken - 幂等性校验参数,最长36位 
      * @param {createAlarmParam} opts.createAlarmSpec  
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string alarmIdList  
      */

    createAlarm(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  createAlarm');
          }

         opts = opts || {};

          if (opts.clientToken === undefined || opts.clientToken === null) {
               throw new Error('Missing the required parameter \'opts.clientToken\' when calling createAlarm');
          }
          if (opts.createAlarmSpec === undefined || opts.createAlarmSpec === null) {
               throw new Error('Missing the required parameter \'opts.createAlarmSpec\' when calling createAlarm');
          }

         let postBody =   {
          };
           if (opts.clientToken !== undefined && opts.clientToken !== null) {
               postBody['clientToken'] = opts.clientToken
           }
           if (opts.createAlarmSpec !== undefined && opts.createAlarmSpec !== null) {
               postBody['createAlarmSpec'] = opts.createAlarmSpec
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call createAlarm with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/alarms', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  批量删除规则
      * @param {Object} opts - parameters
      * @param {filter} [opts.filters] - filter name为&#39;ids&#39;为要删除的告警id  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    batchDeleteAlarms(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  batchDeleteAlarms');
          }

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call batchDeleteAlarms with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/alarms', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询规则详情
      * @param {Object} opts - parameters
      * @param {string} opts.alarmId - 规则id 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param alarm alarm  
      */

    describeAlarmsByID(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeAlarmsByID');
          }

         opts = opts || {};

          if (opts.alarmId === undefined || opts.alarmId === null) {
               throw new Error('Missing the required parameter \'opts.alarmId\' when calling describeAlarmsByID');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'alarmId': opts.alarmId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeAlarmsByID with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/alarms/{alarmId}', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  修改已创建的报警规则
      * @param {Object} opts - parameters
      * @param {string} opts.alarmId - 规则id 
      * @param {array} [opts.contacts] - 通知联系人  optional 
      * @param {baseRule} opts.rule  
      * @param {string} [opts.webHookContent] - 回调content 注：仅webHookUrl和webHookContent均不为空时，才会创建webHook  optional 
      * @param {string} [opts.webHookProtocol] - webHook协议  optional 
      * @param {string} [opts.webHookSecret] - 回调secret，用户请求签名，防伪造  optional 
      * @param {string} [opts.webHookUrl] - 回调url  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    updateAlarm(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  updateAlarm');
          }

         opts = opts || {};

          if (opts.alarmId === undefined || opts.alarmId === null) {
               throw new Error('Missing the required parameter \'opts.alarmId\' when calling updateAlarm');
          }
          if (opts.rule === undefined || opts.rule === null) {
               throw new Error('Missing the required parameter \'opts.rule\' when calling updateAlarm');
          }

         let postBody =   {
          };
           if (opts.contacts !== undefined && opts.contacts !== null) {
               postBody['contacts'] = opts.contacts
           }
           if (opts.rule !== undefined && opts.rule !== null) {
               postBody['rule'] = opts.rule
           }
           if (opts.webHookContent !== undefined && opts.webHookContent !== null) {
               postBody['webHookContent'] = opts.webHookContent
           }
           if (opts.webHookProtocol !== undefined && opts.webHookProtocol !== null) {
               postBody['webHookProtocol'] = opts.webHookProtocol
           }
           if (opts.webHookSecret !== undefined && opts.webHookSecret !== null) {
               postBody['webHookSecret'] = opts.webHookSecret
           }
           if (opts.webHookUrl !== undefined && opts.webHookUrl !== null) {
               postBody['webHookUrl'] = opts.webHookUrl
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'alarmId': opts.alarmId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call updateAlarm with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/alarms/{alarmId}', 'PATCH', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询规则的报警联系人
      * @param {Object} opts - parameters
      * @param {string} opts.alarmId - 规则id 
      * @param {integer} [opts.pageNumber] - 当前所在页，默认为1  optional 
      * @param {integer} [opts.pageSize] - 页面大小，默认为20；取值范围[1, 100]  optional 
      * @param {integer} [opts.referenceType] - 联系人类型。0,联系人分组; 1,联系人  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param describedNoticeContacts contactsList  
      * @param integer total  报警联系人总数
      */

    describeAlarmContacts(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeAlarmContacts');
          }

         opts = opts || {};

          if (opts.alarmId === undefined || opts.alarmId === null) {
               throw new Error('Missing the required parameter \'opts.alarmId\' when calling describeAlarmContacts');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
           if (opts.referenceType !== undefined && opts.referenceType !== null) {
               queryParams['referenceType'] = opts.referenceType
           }

          let pathParams = {
               'regionId': regionId,
               'alarmId': opts.alarmId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeAlarmContacts with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/alarms/{alarmId}/contacts', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  禁用报警规则。报警规则禁用后，将停止探测实例的监控项数据。
      * @param {Object} opts - parameters
      * @param {string} opts.alarmId - 规则 id 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    disableAlarm(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  disableAlarm');
          }

         opts = opts || {};

          if (opts.alarmId === undefined || opts.alarmId === null) {
               throw new Error('Missing the required parameter \'opts.alarmId\' when calling disableAlarm');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'alarmId': opts.alarmId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call disableAlarm with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/alarms/{alarmId}/disable', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  启用报警规则，当客户的报警规则处于停止状态时，可以使用此接口启用报警规则。
      * @param {Object} opts - parameters
      * @param {string} opts.alarmId - 规则id 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    enableAlarm(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  enableAlarm');
          }

         opts = opts || {};

          if (opts.alarmId === undefined || opts.alarmId === null) {
               throw new Error('Missing the required parameter \'opts.alarmId\' when calling enableAlarm');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'alarmId': opts.alarmId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call enableAlarm with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/alarms/{alarmId}/enable', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  批量创建报警规则，可以为多个实例创建多个报警规则。
      * @param {Object} opts - parameters
      * @param {string} opts.clientToken - 幂等性校验参数，最长36位 
      * @param {array} [opts.contacts] - 通知的联系人  optional 
      * @param {string} [opts.datacenter] - 地域  optional 
      * @param {integer} [opts.enabled] - 是否启用, 1表示启用规则，0表示禁用规则，默认为1  optional 
      * @param {array} [opts.resourceIds] - 报警规则对应实例列表，每次最多100个，例如&quot;[&#39;resourceId1&#39;,&#39;resourceId2&#39;]&quot;  optional 
      * @param {integer} [opts.ruleType] - 规则类型, 1表示资源监控，6表示站点监控，默认为1  optional 
      * @param {array} [opts.rules] - 要批量创建的规则列表  optional 
      * @param {boolean} [opts.saveTemplate] - 是否保存为模板  optional 
      * @param {string} opts.serviceCode - 产品线标识，规则对应的serviceCode 
      * @param {string} [opts.templateName] - 模板名称，保存模板时，不能为空  optional 
      * @param {string} [opts.templateServiceCode] - 产品线标识，保存为模板时，模板对应的serviceCode  optional 
      * @param {string} [opts.webHookContent] - 回调content 注：仅webHookUrl和webHookContent均不为空时，才会创建webHook  optional 
      * @param {string} [opts.webHookProtocol] - webHook协议  optional 
      * @param {string} [opts.webHookSecret] - 回调secret，用户请求签名，防伪造  optional 
      * @param {string} [opts.webHookUrl] - 回调url  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string alarmIDList  
      */

    batchCreateAlarms(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  batchCreateAlarms');
          }

         opts = opts || {};

          if (opts.clientToken === undefined || opts.clientToken === null) {
               throw new Error('Missing the required parameter \'opts.clientToken\' when calling batchCreateAlarms');
          }
          if (opts.serviceCode === undefined || opts.serviceCode === null) {
               throw new Error('Missing the required parameter \'opts.serviceCode\' when calling batchCreateAlarms');
          }

         let postBody =   {
          };
           if (opts.clientToken !== undefined && opts.clientToken !== null) {
               postBody['clientToken'] = opts.clientToken
           }
           if (opts.contacts !== undefined && opts.contacts !== null) {
               postBody['contacts'] = opts.contacts
           }
           if (opts.datacenter !== undefined && opts.datacenter !== null) {
               postBody['datacenter'] = opts.datacenter
           }
           if (opts.enabled !== undefined && opts.enabled !== null) {
               postBody['enabled'] = opts.enabled
           }
           if (opts.resourceIds !== undefined && opts.resourceIds !== null) {
               postBody['resourceIds'] = opts.resourceIds
           }
           if (opts.ruleType !== undefined && opts.ruleType !== null) {
               postBody['ruleType'] = opts.ruleType
           }
           if (opts.rules !== undefined && opts.rules !== null) {
               postBody['rules'] = opts.rules
           }
           if (opts.saveTemplate !== undefined && opts.saveTemplate !== null) {
               postBody['saveTemplate'] = opts.saveTemplate
           }
           if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
               postBody['serviceCode'] = opts.serviceCode
           }
           if (opts.templateName !== undefined && opts.templateName !== null) {
               postBody['templateName'] = opts.templateName
           }
           if (opts.templateServiceCode !== undefined && opts.templateServiceCode !== null) {
               postBody['templateServiceCode'] = opts.templateServiceCode
           }
           if (opts.webHookContent !== undefined && opts.webHookContent !== null) {
               postBody['webHookContent'] = opts.webHookContent
           }
           if (opts.webHookProtocol !== undefined && opts.webHookProtocol !== null) {
               postBody['webHookProtocol'] = opts.webHookProtocol
           }
           if (opts.webHookSecret !== undefined && opts.webHookSecret !== null) {
               postBody['webHookSecret'] = opts.webHookSecret
           }
           if (opts.webHookUrl !== undefined && opts.webHookUrl !== null) {
               postBody['webHookUrl'] = opts.webHookUrl
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call batchCreateAlarms with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/alarms/batch', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  批量禁用规则
      * @param {Object} opts - parameters
      * @param {array} [opts.ids] - 告警规则的ID列表  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    batchDisableAlarms(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  batchDisableAlarms');
          }

         opts = opts || {};


         let postBody =   {
          };
           if (opts.ids !== undefined && opts.ids !== null) {
               postBody['ids'] = opts.ids
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call batchDisableAlarms with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/alarms/disable', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  批量启用规则
      * @param {Object} opts - parameters
      * @param {array} [opts.ids] - 告警规则的ID列表  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    batchEnableAlarms(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  batchEnableAlarms');
          }

         opts = opts || {};


         let postBody =   {
          };
           if (opts.ids !== undefined && opts.ids !== null) {
               postBody['ids'] = opts.ids
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call batchEnableAlarms with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/alarms/enable', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询报警历史
检索条件组合优先级从高到低为
1. serviceCode
1.1 serviceCode + resourceId
1.2 serviceCode + resourceIds
2. serviceCodes
3. 用户所有规则
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNumber] - 当前所在页，默认为1  optional 
      * @param {integer} [opts.pageSize] - 页面大小，默认为20；取值范围[1, 100]  optional 
      * @param {string} [opts.serviceCode] - 产品线  optional 
      * @param {string} [opts.resourceId] - 资源Id  optional 
      * @param {string} [opts.alarmId] - 规则Id  optional 
      * @param {integer} [opts.alarming] - 正在报警, 取值为1  optional 
      * @param {string} [opts.startTime] - 开始时间  optional 
      * @param {string} [opts.endTime] - 结束时间  optional 
      * @param {array} [opts.filters] - 服务码或资源Id列表
filter name 为serviceCodes表示查询多个产品线的规则
filter name 为resourceIds表示查询多个资源的规则  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param alarmHistoryWithDetail list  
      * @param integer total  总数
      */

    describeAlarmHistoryAllRegion(opts, callback){

         opts = opts || {};


         let postBody =   {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               postBody['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               postBody['pageSize'] = opts.pageSize
           }
           if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
               postBody['serviceCode'] = opts.serviceCode
           }
           if (opts.resourceId !== undefined && opts.resourceId !== null) {
               postBody['resourceId'] = opts.resourceId
           }
           if (opts.alarmId !== undefined && opts.alarmId !== null) {
               postBody['alarmId'] = opts.alarmId
           }
           if (opts.alarming !== undefined && opts.alarming !== null) {
               postBody['alarming'] = opts.alarming
           }
           if (opts.startTime !== undefined && opts.startTime !== null) {
               postBody['startTime'] = opts.startTime
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               postBody['endTime'] = opts.endTime
           }
           if (opts.filters !== undefined && opts.filters !== null) {
               postBody['filters'] = opts.filters
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeAlarmHistoryAllRegion with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/rule/queryNotice', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  根据产品线查询查询可以创建模板的metric
      * @param {Object} opts - parameters
      * @param {string} opts.serviceCode - 资源的类型，取值vm, lb, ip, database 等 
      * @param {string} callback - callback
      @return {Object} result
      * @param metricInfo metrics  
      */

    describeMetricsForCreateTemplate(opts, callback){

         opts = opts || {};

          if (opts.serviceCode === undefined || opts.serviceCode === null) {
               throw new Error('Missing the required parameter \'opts.serviceCode\' when calling describeMetricsForCreateTemplate');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
               queryParams['serviceCode'] = opts.serviceCode
           }

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeMetricsForCreateTemplate with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/metricsForCreateTemplate', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询报警模板
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNumber] - 当前所在页，默认为1  optional 
      * @param {integer} [opts.pageSize] - 页面大小，默认为20；取值范围[1, 100]  optional 
      * @param {string} [opts.serviceCode] - 产品线标识  optional 
      * @param {string} [opts.templateName] - 模板名称  optional 
      * @param {integer} opts.templateType - 模板类型，区分默认模板和用户自定义模板：1表示默认模板，2表示用户自定义模板 
      * @param {string} callback - callback
      @return {Object} result
      * @param integer numberPages  总页数
      * @param integer numberRecords  总记录数
      * @param integer pageNumber  当前页码
      * @param integer pageSize  分页大小
      * @param integer templateCount  当查询用户自定义模板时，表示该用户目前已有的自定义模板总数量;当查询默认模板时，表示该用户目前已有的默认模板总数量
      * @param templateVo templateList  
      */

    describeTemplates(opts, callback){

         opts = opts || {};

          if (opts.templateType === undefined || opts.templateType === null) {
               throw new Error('Missing the required parameter \'opts.templateType\' when calling describeTemplates');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
           if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
               queryParams['serviceCode'] = opts.serviceCode
           }
           if (opts.templateName !== undefined && opts.templateName !== null) {
               queryParams['templateName'] = opts.templateName
           }
           if (opts.templateType !== undefined && opts.templateType !== null) {
               queryParams['templateType'] = opts.templateType
           }

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeTemplates with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/template', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  创建自定义报警模板
      * @param {Object} opts - parameters
      * @param {string} opts.clientToken - 幂等性校验参数,最长36位 
      * @param {string} [opts.description] - 模板描述  optional 
      * @param {string} opts.ruleServiceCode - 规则的资源类型 
      * @param {string} opts.serviceCode - 模板的资源类型 
      * @param {string} opts.templateName - 模板名称,长度1-32个字符，只允许中英文、数字、&#39;&#39;-&#39;&#39;和&quot;_&quot; 
      * @param {array} [opts.templateRules] - 模板内包含的规则  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param boolean success  是否创建成功
      * @param integer templateId  创建成功的模板id
      */

    createTemplate(opts, callback){

         opts = opts || {};

          if (opts.clientToken === undefined || opts.clientToken === null) {
               throw new Error('Missing the required parameter \'opts.clientToken\' when calling createTemplate');
          }
          if (opts.ruleServiceCode === undefined || opts.ruleServiceCode === null) {
               throw new Error('Missing the required parameter \'opts.ruleServiceCode\' when calling createTemplate');
          }
          if (opts.serviceCode === undefined || opts.serviceCode === null) {
               throw new Error('Missing the required parameter \'opts.serviceCode\' when calling createTemplate');
          }
          if (opts.templateName === undefined || opts.templateName === null) {
               throw new Error('Missing the required parameter \'opts.templateName\' when calling createTemplate');
          }

         let postBody =   {
          };
           if (opts.clientToken !== undefined && opts.clientToken !== null) {
               postBody['clientToken'] = opts.clientToken
           }
           if (opts.description !== undefined && opts.description !== null) {
               postBody['description'] = opts.description
           }
           if (opts.ruleServiceCode !== undefined && opts.ruleServiceCode !== null) {
               postBody['ruleServiceCode'] = opts.ruleServiceCode
           }
           if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
               postBody['serviceCode'] = opts.serviceCode
           }
           if (opts.templateName !== undefined && opts.templateName !== null) {
               postBody['templateName'] = opts.templateName
           }
           if (opts.templateRules !== undefined && opts.templateRules !== null) {
               postBody['templateRules'] = opts.templateRules
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call createTemplate with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/template', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  更新自定义报警模板
      * @param {Object} opts - parameters
      * @param {string} [opts.description] - 模板描述  optional 
      * @param {string} opts.ruleServiceCode - 规则的资源类型 
      * @param {string} opts.serviceCode - 模板的资源类型 
      * @param {integer} opts.templateId - 模板ID 
      * @param {string} opts.templateName - 模板名称 
      * @param {array} [opts.templateRules] - 模板内包含的规则  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param boolean success  是否更新成功
      * @param integer templateId  更新后的模板id
      */

    updateTemplate(opts, callback){

         opts = opts || {};

          if (opts.ruleServiceCode === undefined || opts.ruleServiceCode === null) {
               throw new Error('Missing the required parameter \'opts.ruleServiceCode\' when calling updateTemplate');
          }
          if (opts.serviceCode === undefined || opts.serviceCode === null) {
               throw new Error('Missing the required parameter \'opts.serviceCode\' when calling updateTemplate');
          }
          if (opts.templateId === undefined || opts.templateId === null) {
               throw new Error('Missing the required parameter \'opts.templateId\' when calling updateTemplate');
          }
          if (opts.templateName === undefined || opts.templateName === null) {
               throw new Error('Missing the required parameter \'opts.templateName\' when calling updateTemplate');
          }

         let postBody =   {
          };
           if (opts.description !== undefined && opts.description !== null) {
               postBody['description'] = opts.description
           }
           if (opts.ruleServiceCode !== undefined && opts.ruleServiceCode !== null) {
               postBody['ruleServiceCode'] = opts.ruleServiceCode
           }
           if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
               postBody['serviceCode'] = opts.serviceCode
           }
           if (opts.templateId !== undefined && opts.templateId !== null) {
               postBody['templateId'] = opts.templateId
           }
           if (opts.templateName !== undefined && opts.templateName !== null) {
               postBody['templateName'] = opts.templateName
           }
           if (opts.templateRules !== undefined && opts.templateRules !== null) {
               postBody['templateRules'] = opts.templateRules
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call updateTemplate with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/template', 'PATCH', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  批量删除自定义报警模板
      * @param {Object} opts - parameters
      * @param {string} opts.templateIds - 模板Id,多个templateId用|分隔 
      * @param {string} callback - callback
      @return {Object} result
      * @param boolean success  是否删除成功
      */

    deleteTemplates(opts, callback){

         opts = opts || {};

          if (opts.templateIds === undefined || opts.templateIds === null) {
               throw new Error('Missing the required parameter \'opts.templateIds\' when calling deleteTemplates');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.templateIds !== undefined && opts.templateIds !== null) {
               queryParams['templateIds'] = opts.templateIds
           }

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteTemplates with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/template', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  根据模板ID查询报警模板
      * @param {Object} opts - parameters
      * @param {string} opts.templateId - 模板 id 
      * @param {integer} [opts.templateType] - 模板类型，区分默认模板和用户自定义模板：1表示默认模板，2表示用户自定义模板
in: query  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param templateVo template  
      */

    describeTemplatesByTemplateID(opts, callback){

         opts = opts || {};

          if (opts.templateId === undefined || opts.templateId === null) {
               throw new Error('Missing the required parameter \'opts.templateId\' when calling describeTemplatesByTemplateID');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.templateType !== undefined && opts.templateType !== null) {
               queryParams['templateType'] = opts.templateType
           }

          let pathParams = {
               'regionId': 'jdcloud',
               'templateId': opts.templateId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeTemplatesByTemplateID with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/template/{templateId}', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  应用报警模板到资源
      * @param {Object} opts - parameters
      * @param {string} opts.templateId - 模板 id 
      * @param {string} opts.clientToken - 幂等性校验参数,最长36位 
      * @param {array} [opts.contacts] - 联系人列表  optional 
      * @param {array} [opts.dataCenters] - dataCenters，该资源所处地域，与resourceIds一一对应  optional 
      * @param {array} [opts.resourceIds] - 资源ID列表，resourceIds数量为1--40，每一项不能为空或包含*  optional 
      * @param {string} opts.serviceCode - 资源类型 
      * @param {array} [opts.tagsArray] - 标签组，模板下面规则对应的tags，与resourceIds一一对应  optional 
      * @param {integer} opts.templateType - 模板类型，1表示默认模板，2表示用户自定义模板 
      * @param {string} [opts.webHookContent] - 回调content 注:仅webHookUrl和webHookContent均不为空时,才会创建webHook  optional 
      * @param {string} [opts.webHookProtocol] - webHook协议,https或http 注:此处需和webHookUrl相匹配  optional 
      * @param {string} [opts.webHookSecret] - 回调secret,用户请求签名,防伪造  optional 
      * @param {string} [opts.webHookUrl] - 回调url  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param integer ruleIds  
      * @param boolean success  是否创建成功
      */

    applyTemplate(opts, callback){

         opts = opts || {};

          if (opts.templateId === undefined || opts.templateId === null) {
               throw new Error('Missing the required parameter \'opts.templateId\' when calling applyTemplate');
          }
          if (opts.clientToken === undefined || opts.clientToken === null) {
               throw new Error('Missing the required parameter \'opts.clientToken\' when calling applyTemplate');
          }
          if (opts.serviceCode === undefined || opts.serviceCode === null) {
               throw new Error('Missing the required parameter \'opts.serviceCode\' when calling applyTemplate');
          }
          if (opts.templateType === undefined || opts.templateType === null) {
               throw new Error('Missing the required parameter \'opts.templateType\' when calling applyTemplate');
          }

         let postBody =   {
          };
           if (opts.clientToken !== undefined && opts.clientToken !== null) {
               postBody['clientToken'] = opts.clientToken
           }
           if (opts.contacts !== undefined && opts.contacts !== null) {
               postBody['contacts'] = opts.contacts
           }
           if (opts.dataCenters !== undefined && opts.dataCenters !== null) {
               postBody['dataCenters'] = opts.dataCenters
           }
           if (opts.resourceIds !== undefined && opts.resourceIds !== null) {
               postBody['resourceIds'] = opts.resourceIds
           }
           if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
               postBody['serviceCode'] = opts.serviceCode
           }
           if (opts.tagsArray !== undefined && opts.tagsArray !== null) {
               postBody['tagsArray'] = opts.tagsArray
           }
           if (opts.templateType !== undefined && opts.templateType !== null) {
               postBody['templateType'] = opts.templateType
           }
           if (opts.webHookContent !== undefined && opts.webHookContent !== null) {
               postBody['webHookContent'] = opts.webHookContent
           }
           if (opts.webHookProtocol !== undefined && opts.webHookProtocol !== null) {
               postBody['webHookProtocol'] = opts.webHookProtocol
           }
           if (opts.webHookSecret !== undefined && opts.webHookSecret !== null) {
               postBody['webHookSecret'] = opts.webHookSecret
           }
           if (opts.webHookUrl !== undefined && opts.webHookUrl !== null) {
               postBody['webHookUrl'] = opts.webHookUrl
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'templateId': opts.templateId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call applyTemplate with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/template/{templateId}/resources', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查看某资源的监控数据
      * @param {Object} opts - parameters
      * @param {string} opts.resourceId - 资源的uuid 
      * @param {string} [opts.startTime] - 查询时间范围的开始时间， UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（默认为当前时间，早于30d时，将被重置为30d）  optional 
      * @param {string} [opts.endTime] - 查询时间范围的结束时间， UTC时间，格式：2016-12- yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（为空时，将由startTime与timeInterval计算得出）  optional 
      * @param {string} [opts.timeInterval] - 时间间隔：1h，6h，12h，1d，3d，7d，14d，固定时间间隔，timeInterval 与 endTime 至少填一项  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param metricData metricDatas  
      */

    describeMetricDataAm(opts, callback){

         opts = opts || {};

          if (opts.resourceId === undefined || opts.resourceId === null) {
               throw new Error('Missing the required parameter \'opts.resourceId\' when calling describeMetricDataAm');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.resourceId !== undefined && opts.resourceId !== null) {
               queryParams['resourceId'] = opts.resourceId
           }
           if (opts.startTime !== undefined && opts.startTime !== null) {
               queryParams['startTime'] = opts.startTime
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               queryParams['endTime'] = opts.endTime
           }
           if (opts.timeInterval !== undefined && opts.timeInterval !== null) {
               queryParams['timeInterval'] = opts.timeInterval
           }

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeMetricDataAm with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/am/metricData', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询可用性监控任务列表
      * @param {Object} opts - parameters
      * @param {string} opts.probeTaskID - 探测任务的task_id 
      * @param {integer} [opts.pageNumber] - 当前所在页，默认为1  optional 
      * @param {integer} [opts.pageSize] - 页面大小，默认为20；取值范围[1, 100]  optional 
      * @param {string} [opts.name] - 根据探测任务的名称查询，支持模糊查询  optional 
      * @param {integer} [opts.type] - 根据探测任务的类型查询，1、http 2、telnet  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param integer numberPages  总页数
      * @param integer numberRecords  总记录数
      * @param integer pageNumber  当前页码
      * @param integer pageSize  分页大小
      * @param taskInfo taskInfo  
      * @param integer totalCount  总task个数
      */

    describeProbeTasks(opts, callback){

         opts = opts || {};

          if (opts.probeTaskID === undefined || opts.probeTaskID === null) {
               throw new Error('Missing the required parameter \'opts.probeTaskID\' when calling describeProbeTasks');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
           if (opts.name !== undefined && opts.name !== null) {
               queryParams['name'] = opts.name
           }
           if (opts.type !== undefined && opts.type !== null) {
               queryParams['type'] = opts.type
           }

          let pathParams = {
               'regionId': 'jdcloud',
               'probeTaskID': opts.probeTaskID 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeProbeTasks with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/am/probeTask', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  创建可用性监控任务
      * @param {Object} opts - parameters
      * @param {string} opts.clientToken - 幂等性校验参数,最长36位 
      * @param {createProbeTaskParam} opts.createProbeTaskSpec  
      * @param {string} callback - callback
      @return {Object} result
      * @param boolean suc  是否创建成功
      * @param string taskId  创建成功的规则id列表
      */

    createProbeTask(opts, callback){

         opts = opts || {};

          if (opts.clientToken === undefined || opts.clientToken === null) {
               throw new Error('Missing the required parameter \'opts.clientToken\' when calling createProbeTask');
          }
          if (opts.createProbeTaskSpec === undefined || opts.createProbeTaskSpec === null) {
               throw new Error('Missing the required parameter \'opts.createProbeTaskSpec\' when calling createProbeTask');
          }

         let postBody =   {
          };
           if (opts.clientToken !== undefined && opts.clientToken !== null) {
               postBody['clientToken'] = opts.clientToken
           }
           if (opts.createProbeTaskSpec !== undefined && opts.createProbeTaskSpec !== null) {
               postBody['createProbeTaskSpec'] = opts.createProbeTaskSpec
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call createProbeTask with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/am/probeTask', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除可用性监控任务
      * @param {Object} opts - parameters
      * @param {string} opts.probeTaskIDs - 探测任务的task_id,多个taskId用|分隔 
      * @param {string} callback - callback
      @return {Object} result
      * @param boolean suc  可用性监控任务是否删除成功
      */

    deleteProbeTask(opts, callback){

         opts = opts || {};

          if (opts.probeTaskIDs === undefined || opts.probeTaskIDs === null) {
               throw new Error('Missing the required parameter \'opts.probeTaskIDs\' when calling deleteProbeTask');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.probeTaskIDs !== undefined && opts.probeTaskIDs !== null) {
               queryParams['probeTaskIDs'] = opts.probeTaskIDs
           }

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteProbeTask with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/am/probeTask', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询可用性监控任务
      * @param {Object} opts - parameters
      * @param {string} opts.probeTaskID - 探测任务的task_id 
      * @param {string} callback - callback
      @return {Object} result
      * @param probe probes  
      * @param string address  探测地址
      * @param string createTime  创建时间
      * @param boolean deleted  是否被删除
      * @param boolean enable  是否启用
      * @param integer frequency  探测频率，单位秒
      * @param string httpBody  http探测的body
      * @param keyValue httpCookie  
      * @param keyValue httpHeader  
      * @param integer httpType  http探测方式
      * @param string name  探测任务 名称
      * @param string pin  pin
      * @param integer port  探测端口
      * @param integer probeType  探测类型1:http、2:telnet
      * @param string targetId  探测对象的uid(http探测方法无uid)
      * @param string targetRegion  探测对象所在region，redis或RDS所在region
      * @param string taskId  探测任务 id
      * @param integer taskType  任务类型、1:url/ip、2:RDS、3:redis
      * @param integer timeout  探测超时时间，单位秒
      * @param string updateTime  更新时间
      */

    describeProbeTask(opts, callback){

         opts = opts || {};

          if (opts.probeTaskID === undefined || opts.probeTaskID === null) {
               throw new Error('Missing the required parameter \'opts.probeTaskID\' when calling describeProbeTask');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
               'probeTaskID': opts.probeTaskID 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeProbeTask with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/am/probeTask/{probeTaskID}', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  修改可用性监控任务
      * @param {Object} opts - parameters
      * @param {string} opts.probeTaskID - 探测任务的task_id 
      * @param {string} [opts.address] - 探测地址，探测类型为http：内容为url（校验http或https头）；探测类型为telnet：内容为ip或域名（只允许中英文 、数字、中划线（-）、小数点（.）、开头及结尾均不能含有“-”）  optional 
      * @param {integer} [opts.frequency] - 探测间隔（单位：秒）：默认值：300，取值范围[60,1200]  optional 
      * @param {string} [opts.httpBody] - http body：选择探测类型为1&#x3D;http时有效，最长不超过1024字节  optional 
      * @param {array} [opts.httpCookie] - http cookie：选择探测类型为1&#x3D;http时有效，最大允许20个key、value对，最长不超过1024字节  optional 
      * @param {array} [opts.httpHeader] - http header：选择探测类型为1&#x3D;http时有效，最大允许20个key、value对，最长不超过1024字节  optional 
      * @param {string} [opts.name] - task名称，不允许重复，长度不超过32字符，只允许中英文、数字、下划线_、中划线-, [0-9][a-z] [A-Z] [- _ ]  optional 
      * @param {integer} [opts.port] - 探测端口，探测类型为telnet时必填，取值范围 [1-65535]，http类型忽略该参数  optional 
      * @param {array} [opts.probes] - 探测源（发起对探测目标探测的云主机，需安装相应的agent才能探测）  optional 
      * @param {string} [opts.targetId] - 探测目标id：该探测对象的uuid，任务类型为2：rds、3：redis时必填，  optional 
      * @param {string} [opts.targetRegion] - 探测目标region：该探测对象所在region，任务类型为2：rds、3：redis时必填  optional 
      * @param {integer} [opts.timeout] - 探测超时时间（单位：秒）：默认值:5，取值范围 [1,300]  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param boolean suc  是否更新成功
      */

    updateProbeTask(opts, callback){

         opts = opts || {};

          if (opts.probeTaskID === undefined || opts.probeTaskID === null) {
               throw new Error('Missing the required parameter \'opts.probeTaskID\' when calling updateProbeTask');
          }

         let postBody =   {
          };
           if (opts.address !== undefined && opts.address !== null) {
               postBody['address'] = opts.address
           }
           if (opts.frequency !== undefined && opts.frequency !== null) {
               postBody['frequency'] = opts.frequency
           }
           if (opts.httpBody !== undefined && opts.httpBody !== null) {
               postBody['httpBody'] = opts.httpBody
           }
           if (opts.httpCookie !== undefined && opts.httpCookie !== null) {
               postBody['httpCookie'] = opts.httpCookie
           }
           if (opts.httpHeader !== undefined && opts.httpHeader !== null) {
               postBody['httpHeader'] = opts.httpHeader
           }
           if (opts.name !== undefined && opts.name !== null) {
               postBody['name'] = opts.name
           }
           if (opts.port !== undefined && opts.port !== null) {
               postBody['port'] = opts.port
           }
           if (opts.probes !== undefined && opts.probes !== null) {
               postBody['probes'] = opts.probes
           }
           if (opts.targetId !== undefined && opts.targetId !== null) {
               postBody['targetId'] = opts.targetId
           }
           if (opts.targetRegion !== undefined && opts.targetRegion !== null) {
               postBody['targetRegion'] = opts.targetRegion
           }
           if (opts.timeout !== undefined && opts.timeout !== null) {
               postBody['timeout'] = opts.timeout
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
               'probeTaskID': opts.probeTaskID 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call updateProbeTask with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/am/probeTask/{probeTaskID}', 'PATCH', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询可用性监控任务的指定探测源的异常探测历史
      * @param {Object} opts - parameters
      * @param {string} opts.probeTaskID - 可用性监控task_id, id长度(0,50] 
      * @param {string} opts.probeID - 探测源id，  id长度（0,50] 
      * @param {string} [opts.startTime] - 查询时间范围的开始时间， UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（默认为当前时间往前三天，早于3d时，将被重置为3d）  optional 
      * @param {string} [opts.endTime] - 查询时间范围的结束时间， UTC时间，格式：2016-12- yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（为空时，默认为当前时间）  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param event events  
      * @param string name  探测源名称
      * @param string uuid  探测源uuid
      */

    describeProbeHistory(opts, callback){

         opts = opts || {};

          if (opts.probeTaskID === undefined || opts.probeTaskID === null) {
               throw new Error('Missing the required parameter \'opts.probeTaskID\' when calling describeProbeHistory');
          }
          if (opts.probeID === undefined || opts.probeID === null) {
               throw new Error('Missing the required parameter \'opts.probeID\' when calling describeProbeHistory');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.startTime !== undefined && opts.startTime !== null) {
               queryParams['startTime'] = opts.startTime
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               queryParams['endTime'] = opts.endTime
           }

          let pathParams = {
               'regionId': 'jdcloud',
               'probeTaskID': opts.probeTaskID ,
               'probeID': opts.probeID 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeProbeHistory with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/am/probeTask/{probeTaskID}/probe/{probeID}', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询 可用性监控任务的探测源列表
      * @param {Object} opts - parameters
      * @param {string} opts.probeTaskID - 探测任务的task_id 
      * @param {filter} [opts.filters] - 自定义标签  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param probeInfo probeList  
      */

    discribeProbes(opts, callback){

         opts = opts || {};

          if (opts.probeTaskID === undefined || opts.probeTaskID === null) {
               throw new Error('Missing the required parameter \'opts.probeTaskID\' when calling discribeProbes');
          }

          let postBody = null;
          let queryParams = {
          };
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));

          let pathParams = {
               'regionId': 'jdcloud',
               'probeTaskID': opts.probeTaskID 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call discribeProbes with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/am/probeTask/{probeTaskID}/probeList', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  启用、禁用可用性监控任务
      * @param {Object} opts - parameters
      * @param {boolean} [opts.enabled] - 默认：禁用； true：启用，false：禁用  optional 
      * @param {array} [opts.taskId] - 要启用或禁用的探测任务的task_id列表，列表长度[1，100)  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param boolean suc  可用性监控任务 【启用｜禁用】 是否成功
      */

    probeTaskEnable(opts, callback){

         opts = opts || {};


         let postBody =   {
          };
           if (opts.enabled !== undefined && opts.enabled !== null) {
               postBody['enabled'] = opts.enabled
           }
           if (opts.taskId !== undefined && opts.taskId !== null) {
               postBody['taskId'] = opts.taskId
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call probeTaskEnable with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/am/probeTask/enable', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询自定义监控所有region规则告警历史
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNumber] - 当前所在页，默认为1  optional 
      * @param {integer} [opts.pageSize] - 页面大小，默认为20；取值范围[1, 100]  optional 
      * @param {integer} [opts.id] - 报警规则的Id  optional 
      * @param {string} [opts.obi] - obj  optional 
      * @param {string} [opts.namespace] - namespace  optional 
      * @param {string} [opts.serviceCode] - 产品名称  optional 
      * @param {string} [opts.resourceId] - 资源Id  optional 
      * @param {string} opts.startTime - 查询数据开始时间，默认24小时前，可以输入long型时间，也可以输入yyyy-MM-dd&#39;T&#39;HH:mm:ssZ类型时间 
      * @param {string} opts.endTime - 查询数据结束时间，默认当前时间，可以输入long型时间，也可以输入yyyy-MM-dd&#39;T&#39;HH:mm:ssZ类型时间 
      * @param {string} callback - callback
      @return {Object} result
      * @param cmAlarmHistory alarmHistoryList  
      * @param integer numberPages  总页数
      * @param integer numberRecords  总记录数
      * @param integer pageNumber  当前页码
      * @param integer pageSize  分页大小
      */

    describeAlarmHistoryAllRegionCm(opts, callback){

         opts = opts || {};

          if (opts.startTime === undefined || opts.startTime === null) {
               throw new Error('Missing the required parameter \'opts.startTime\' when calling describeAlarmHistoryAllRegionCm');
          }
          if (opts.endTime === undefined || opts.endTime === null) {
               throw new Error('Missing the required parameter \'opts.endTime\' when calling describeAlarmHistoryAllRegionCm');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
           if (opts.id !== undefined && opts.id !== null) {
               queryParams['id'] = opts.id
           }
           if (opts.obi !== undefined && opts.obi !== null) {
               queryParams['obi'] = opts.obi
           }
           if (opts.namespace !== undefined && opts.namespace !== null) {
               queryParams['namespace'] = opts.namespace
           }
           if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
               queryParams['serviceCode'] = opts.serviceCode
           }
           if (opts.resourceId !== undefined && opts.resourceId !== null) {
               queryParams['resourceId'] = opts.resourceId
           }
           if (opts.startTime !== undefined && opts.startTime !== null) {
               queryParams['startTime'] = opts.startTime
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               queryParams['endTime'] = opts.endTime
           }

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeAlarmHistoryAllRegionCm with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/cm/alarmHistory', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询所有region的自定义监控规则
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNumber] - 当前所在页，默认为1  optional 
      * @param {integer} [opts.pageSize] - 页面大小，默认为20；取值范围[1, 100]  optional 
      * @param {string} [opts.namespace] - 命名空间名称  optional 
      * @param {string} [opts.obj] - 对象名称  optional 
      * @param {string} [opts.serviceCode] - 产品名称  optional 
      * @param {string} [opts.resourceId] - 资源Id  optional 
      * @param {integer} [opts.status] - 规则报警状态, 1：正常, 2：报警，4：数据不足  optional 
      * @param {integer} [opts.isAlarming] - 是否为正在报警的规则，0为忽略，1为是，与 status 同时只能生效一个,isAlarming 优先生效  optional 
      * @param {integer} [opts.enabled] - 规则状态：1为启用，0为禁用  optional 
      * @param {string} [opts.region] - region info  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param cmAlarm alarmList  
      * @param integer numberPages  总页数
      * @param integer numberRecords  总记录数
      * @param integer pageNumber  当前页码
      * @param integer pageSize  分页大小
      */

    describeAllRegionAlarmsCm(opts, callback){

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
           if (opts.namespace !== undefined && opts.namespace !== null) {
               queryParams['namespace'] = opts.namespace
           }
           if (opts.obj !== undefined && opts.obj !== null) {
               queryParams['obj'] = opts.obj
           }
           if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
               queryParams['serviceCode'] = opts.serviceCode
           }
           if (opts.resourceId !== undefined && opts.resourceId !== null) {
               queryParams['resourceId'] = opts.resourceId
           }
           if (opts.status !== undefined && opts.status !== null) {
               queryParams['status'] = opts.status
           }
           if (opts.isAlarming !== undefined && opts.isAlarming !== null) {
               queryParams['isAlarming'] = opts.isAlarming
           }
           if (opts.enabled !== undefined && opts.enabled !== null) {
               queryParams['enabled'] = opts.enabled
           }
           if (opts.region !== undefined && opts.region !== null) {
               queryParams['region'] = opts.region
           }

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeAllRegionAlarmsCm with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/cm/alarms', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询是否是新用户
      * @param {Object} opts - parameters
      * @param {string} callback - callback
      @return {Object} result
      * @param boolean result  是否新用户
      */

    describeIsUserNew(opts, callback){

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeIsUserNew with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/cm/users/isNew', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询自定义监控规则告警历史
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNumber] - 当前所在页，默认为1  optional 
      * @param {integer} [opts.pageSize] - 页面大小，默认为20；取值范围[1, 100]  optional 
      * @param {integer} [opts.id] - 报警规则的Id  optional 
      * @param {string} [opts.obi] - obj  optional 
      * @param {string} [opts.namespace] - namespace  optional 
      * @param {string} [opts.serviceCode] - 产品名称  optional 
      * @param {string} [opts.resourceId] - 资源Id  optional 
      * @param {string} opts.startTime - 查询数据开始时间，默认24小时前，可以输入long型时间，也可以输入yyyy-MM-dd&#39;T&#39;HH:mm:ssZ类型时间 
      * @param {string} opts.endTime - 查询数据结束时间，默认当前时间，可以输入long型时间，也可以输入yyyy-MM-dd&#39;T&#39;HH:mm:ssZ类型时间 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param cmAlarmHistory alarmHistoryList  
      * @param integer numberPages  总页数
      * @param integer numberRecords  总记录数
      * @param integer pageNumber  当前页码
      * @param integer pageSize  分页大小
      */

    describeAlarmHistoryCm(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeAlarmHistoryCm');
          }

         opts = opts || {};

          if (opts.startTime === undefined || opts.startTime === null) {
               throw new Error('Missing the required parameter \'opts.startTime\' when calling describeAlarmHistoryCm');
          }
          if (opts.endTime === undefined || opts.endTime === null) {
               throw new Error('Missing the required parameter \'opts.endTime\' when calling describeAlarmHistoryCm');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
           if (opts.id !== undefined && opts.id !== null) {
               queryParams['id'] = opts.id
           }
           if (opts.obi !== undefined && opts.obi !== null) {
               queryParams['obi'] = opts.obi
           }
           if (opts.namespace !== undefined && opts.namespace !== null) {
               queryParams['namespace'] = opts.namespace
           }
           if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
               queryParams['serviceCode'] = opts.serviceCode
           }
           if (opts.resourceId !== undefined && opts.resourceId !== null) {
               queryParams['resourceId'] = opts.resourceId
           }
           if (opts.startTime !== undefined && opts.startTime !== null) {
               queryParams['startTime'] = opts.startTime
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               queryParams['endTime'] = opts.endTime
           }

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeAlarmHistoryCm with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/cm/alarmHistory', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询自定义监控规则
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNumber] - 当前所在页，默认为1  optional 
      * @param {integer} [opts.pageSize] - 页面大小，默认为20；取值范围[1, 100]  optional 
      * @param {string} [opts.namespace] - 命名空间名称  optional 
      * @param {string} [opts.obj] - 对象名称  optional 
      * @param {string} [opts.serviceCode] - 产品名称  optional 
      * @param {string} [opts.resourceId] - 资源Id  optional 
      * @param {integer} [opts.status] - 规则报警状态, 1：正常, 2：报警，4：数据不足  optional 
      * @param {integer} [opts.isAlarming] - 是否为正在报警的规则，0为忽略，1为是，与 status 同时只能生效一个,isAlarming 优先生效  optional 
      * @param {integer} [opts.enabled] - 规则状态：1为启用，0为禁用  optional 
      * @param {string} [opts.region] - region info  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param cmAlarm alarmList  
      * @param integer numberPages  总页数
      * @param integer numberRecords  总记录数
      * @param integer pageNumber  当前页码
      * @param integer pageSize  分页大小
      */

    describeAlarmsCm(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeAlarmsCm');
          }

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
           if (opts.namespace !== undefined && opts.namespace !== null) {
               queryParams['namespace'] = opts.namespace
           }
           if (opts.obj !== undefined && opts.obj !== null) {
               queryParams['obj'] = opts.obj
           }
           if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
               queryParams['serviceCode'] = opts.serviceCode
           }
           if (opts.resourceId !== undefined && opts.resourceId !== null) {
               queryParams['resourceId'] = opts.resourceId
           }
           if (opts.status !== undefined && opts.status !== null) {
               queryParams['status'] = opts.status
           }
           if (opts.isAlarming !== undefined && opts.isAlarming !== null) {
               queryParams['isAlarming'] = opts.isAlarming
           }
           if (opts.enabled !== undefined && opts.enabled !== null) {
               queryParams['enabled'] = opts.enabled
           }
           if (opts.region !== undefined && opts.region !== null) {
               queryParams['region'] = opts.region
           }

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeAlarmsCm with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/cm/alarms', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  创建自定义监控规则
      * @param {Object} opts - parameters
      * @param {string} opts.clientToken - 幂等性校验参数,最长36位 
      * @param {createCmAlarmParam} opts.createCmAlarmSpec  
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string alarmIdList  
      */

    createAlarmCm(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  createAlarmCm');
          }

         opts = opts || {};

          if (opts.clientToken === undefined || opts.clientToken === null) {
               throw new Error('Missing the required parameter \'opts.clientToken\' when calling createAlarmCm');
          }
          if (opts.createCmAlarmSpec === undefined || opts.createCmAlarmSpec === null) {
               throw new Error('Missing the required parameter \'opts.createCmAlarmSpec\' when calling createAlarmCm');
          }

         let postBody =   {
          };
           if (opts.clientToken !== undefined && opts.clientToken !== null) {
               postBody['clientToken'] = opts.clientToken
           }
           if (opts.createCmAlarmSpec !== undefined && opts.createCmAlarmSpec !== null) {
               postBody['createCmAlarmSpec'] = opts.createCmAlarmSpec
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call createAlarmCm with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/cm/alarms', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除自定义监控规则
      * @param {Object} opts - parameters
      * @param {string} opts.ids - ids,多个id用|分隔 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteAlarmsCm(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  deleteAlarmsCm');
          }

         opts = opts || {};

          if (opts.ids === undefined || opts.ids === null) {
               throw new Error('Missing the required parameter \'opts.ids\' when calling deleteAlarmsCm');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.ids !== undefined && opts.ids !== null) {
               queryParams['ids'] = opts.ids
           }

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteAlarmsCm with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/cm/alarms', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询自定义监控规则
      * @param {Object} opts - parameters
      * @param {string} opts.alarmId - 规则 id 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param cmAlarm alarm  
      */

    describeAlarmsByID(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeAlarmsByID');
          }

         opts = opts || {};

          if (opts.alarmId === undefined || opts.alarmId === null) {
               throw new Error('Missing the required parameter \'opts.alarmId\' when calling describeAlarmsByID');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'alarmId': opts.alarmId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeAlarmsByID with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/cm/alarms/{alarmId}', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  更新自定义监控规则
      * @param {Object} opts - parameters
      * @param {string} opts.alarmId - 规则 id 
      * @param {string} opts.calculation - 统计方法：平均值&#x3D;avg、最大值&#x3D;max、最小值&#x3D;min、总和&#x3D;sum 
      * @param {array} [opts.contactGroups] - 通知的联系组，如 [“联系组1”,”联系组2”]  optional 
      * @param {array} [opts.contactPersons] - 通知的联系人，如 [“联系人1”,”联系人2”]  optional 
      * @param {string} [opts.downSample] - 取样频次  optional 
      * @param {string} opts.metric - 根据产品线查询可用监控项列表 接口 返回的Metric字段 
      * @param {integer} [opts.noticePeriod] - 通知周期 单位：小时  optional 
      * @param {string} opts.operation - &gt;&#x3D;、&gt;、&lt;、&lt;&#x3D;、&#x3D;、！&#x3D; 
      * @param {integer} opts.period - 统计周期（单位：分钟）目前支持的取值：2，5，15，30，60 
      * @param {string} opts.serviceCode - 产品名称 
      * @param {number} opts.threshold - 阈值 
      * @param {integer} opts.times - 连续多少次后报警，可选值:1,2,3,5 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string alarmId  更新之后的规则id
      */

    updateAlarmCm(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  updateAlarmCm');
          }

         opts = opts || {};

          if (opts.alarmId === undefined || opts.alarmId === null) {
               throw new Error('Missing the required parameter \'opts.alarmId\' when calling updateAlarmCm');
          }
          if (opts.calculation === undefined || opts.calculation === null) {
               throw new Error('Missing the required parameter \'opts.calculation\' when calling updateAlarmCm');
          }
          if (opts.metric === undefined || opts.metric === null) {
               throw new Error('Missing the required parameter \'opts.metric\' when calling updateAlarmCm');
          }
          if (opts.operation === undefined || opts.operation === null) {
               throw new Error('Missing the required parameter \'opts.operation\' when calling updateAlarmCm');
          }
          if (opts.period === undefined || opts.period === null) {
               throw new Error('Missing the required parameter \'opts.period\' when calling updateAlarmCm');
          }
          if (opts.serviceCode === undefined || opts.serviceCode === null) {
               throw new Error('Missing the required parameter \'opts.serviceCode\' when calling updateAlarmCm');
          }
          if (opts.threshold === undefined || opts.threshold === null) {
               throw new Error('Missing the required parameter \'opts.threshold\' when calling updateAlarmCm');
          }
          if (opts.times === undefined || opts.times === null) {
               throw new Error('Missing the required parameter \'opts.times\' when calling updateAlarmCm');
          }

         let postBody =   {
          };
           if (opts.calculation !== undefined && opts.calculation !== null) {
               postBody['calculation'] = opts.calculation
           }
           if (opts.contactGroups !== undefined && opts.contactGroups !== null) {
               postBody['contactGroups'] = opts.contactGroups
           }
           if (opts.contactPersons !== undefined && opts.contactPersons !== null) {
               postBody['contactPersons'] = opts.contactPersons
           }
           if (opts.downSample !== undefined && opts.downSample !== null) {
               postBody['downSample'] = opts.downSample
           }
           if (opts.metric !== undefined && opts.metric !== null) {
               postBody['metric'] = opts.metric
           }
           if (opts.noticePeriod !== undefined && opts.noticePeriod !== null) {
               postBody['noticePeriod'] = opts.noticePeriod
           }
           if (opts.operation !== undefined && opts.operation !== null) {
               postBody['operation'] = opts.operation
           }
           if (opts.period !== undefined && opts.period !== null) {
               postBody['period'] = opts.period
           }
           if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
               postBody['serviceCode'] = opts.serviceCode
           }
           if (opts.threshold !== undefined && opts.threshold !== null) {
               postBody['threshold'] = opts.threshold
           }
           if (opts.times !== undefined && opts.times !== null) {
               postBody['times'] = opts.times
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'alarmId': opts.alarmId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call updateAlarmCm with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/cm/alarms/{alarmId}', 'PATCH', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询自定义监控命名空间列表
      * @param {Object} opts - parameters
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param nsInfo namespaceList  
      */

    describeNamespaces(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeNamespaces');
          }

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeNamespaces with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/cm/namespaces', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除自定义监控命名空间
      * @param {Object} opts - parameters
      * @param {string} opts.namespaceUID - namespaceUID 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param boolean result  是否成功
      */

    deleteNamespace(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  deleteNamespace');
          }

         opts = opts || {};

          if (opts.namespaceUID === undefined || opts.namespaceUID === null) {
               throw new Error('Missing the required parameter \'opts.namespaceUID\' when calling deleteNamespace');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'namespaceUID': opts.namespaceUID 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteNamespace with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/cm/namespaces/{namespaceUID}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询obj列表
      * @param {Object} opts - parameters
      * @param {string} opts.namespaceUID - namespaceUID 
      * @param {integer} [opts.pageNumber] - 当前所在页，默认为1  optional 
      * @param {integer} [opts.pageSize] - 页面大小，默认为20；取值范围[1, 100]  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer numberPages  总页数
      * @param integer numberRecords  总记录数
      * @param objInfo objList  
      * @param integer pageNumber  当前页码
      * @param integer pageSize  分页大小
      */

    describeObjsByNsUID(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeObjsByNsUID');
          }

         opts = opts || {};

          if (opts.namespaceUID === undefined || opts.namespaceUID === null) {
               throw new Error('Missing the required parameter \'opts.namespaceUID\' when calling describeObjsByNsUID');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }

          let pathParams = {
               'regionId': regionId,
               'namespaceUID': opts.namespaceUID 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeObjsByNsUID with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/cm/namespaces/{namespaceUID}/objs', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除obj
      * @param {Object} opts - parameters
      * @param {string} opts.namespaceUID - namespaceUID 
      * @param {string} opts.ids - ids,多个id用|分隔 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteObj(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  deleteObj');
          }

         opts = opts || {};

          if (opts.namespaceUID === undefined || opts.namespaceUID === null) {
               throw new Error('Missing the required parameter \'opts.namespaceUID\' when calling deleteObj');
          }
          if (opts.ids === undefined || opts.ids === null) {
               throw new Error('Missing the required parameter \'opts.ids\' when calling deleteObj');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.ids !== undefined && opts.ids !== null) {
               queryParams['ids'] = opts.ids
           }

          let pathParams = {
               'regionId': regionId,
               'namespaceUID': opts.namespaceUID 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteObj with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/cm/namespaces/{namespaceUID}/objs', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询obj
      * @param {Object} opts - parameters
      * @param {string} opts.namespaceUID - namespaceUID 
      * @param {string} opts.objUID - objUID 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string namespaceName  命名空间名称
      * @param string objName  obj名称
      */

    describeObj(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeObj');
          }

         opts = opts || {};

          if (opts.namespaceUID === undefined || opts.namespaceUID === null) {
               throw new Error('Missing the required parameter \'opts.namespaceUID\' when calling describeObj');
          }
          if (opts.objUID === undefined || opts.objUID === null) {
               throw new Error('Missing the required parameter \'opts.objUID\' when calling describeObj');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'namespaceUID': opts.namespaceUID ,
               'objUID': opts.objUID 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeObj with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/cm/namespaces/{namespaceUID}/objs/{objUID}', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询自定义监控的metric数据
      * @param {Object} opts - parameters
      * @param {string} opts.namespaceUID - region 
      * @param {string} opts.objUID - region 
      * @param {string} [opts.aggrType]   optional 
      * @param {string} [opts.endTime] - 查询时间范围的结束时间， UTC时间，格式：2016-12- yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（为空时，将由startTime与timeInterval计算得出）
in: query  optional 
      * @param {array} [opts.metricUID] - metric id列表
in: query  optional 
      * @param {string} [opts.startTime] - 查询时间范围的开始时间， UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（默认为当前时间，早于30d时，将被重置为30d）
in: query  optional 
      * @param {string} [opts.timeInterval] - 时间间隔：1h，6h，12h，1d，3d，7d，14d，固定时间间隔，timeInterval 与 endTime 至少填一项
in: query  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param metricDataItemCm metricDatas  
      */

    describeMetricDataCm(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeMetricDataCm');
          }

         opts = opts || {};

          if (opts.namespaceUID === undefined || opts.namespaceUID === null) {
               throw new Error('Missing the required parameter \'opts.namespaceUID\' when calling describeMetricDataCm');
          }
          if (opts.objUID === undefined || opts.objUID === null) {
               throw new Error('Missing the required parameter \'opts.objUID\' when calling describeMetricDataCm');
          }

         let postBody =   {
          };
           if (opts.aggrType !== undefined && opts.aggrType !== null) {
               postBody['aggrType'] = opts.aggrType
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               postBody['endTime'] = opts.endTime
           }
           if (opts.metricUID !== undefined && opts.metricUID !== null) {
               postBody['metricUID'] = opts.metricUID
           }
           if (opts.startTime !== undefined && opts.startTime !== null) {
               postBody['startTime'] = opts.startTime
           }
           if (opts.timeInterval !== undefined && opts.timeInterval !== null) {
               postBody['timeInterval'] = opts.timeInterval
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'namespaceUID': opts.namespaceUID ,
               'objUID': opts.objUID 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeMetricDataCm with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/cm/namespaces/{namespaceUID}/objs/{objUID}/metricData', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询自定义监控项数据
      * @param {Object} opts - parameters
      * @param {string} opts.namespace - namespace 
      * @param {string} opts.metric - 监控项英文标识(id)，监控项名称 
      * @param {string} [opts.aggrType] - 指标聚合方式，每个指标都有默认的聚合方式， 可选值包括：sum,avg.max.min；多个对象的数据如何合并(resourceId -&gt; cluster)  optional 
      * @param {string} [opts.downSampleType] - 指标采样方式，默认avg， 可选值包括：sum,avg,max,min,last；同一对象的数据，在改变时间点粒度时如何合并(1m-&gt;20m)  optional 
      * @param {string} [opts.startTime] - 查询时间范围的开始时间， UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（默认为当前时间，早于30d时，将被重置为30d）  optional 
      * @param {string} [opts.endTime] - 查询时间范围的结束时间， UTC时间，格式：2016-12- yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（为空时，将由startTime与timeInterval计算得出）  optional 
      * @param {string} [opts.timeInterval] - 时间间隔：1h，6h，12h，1d，3d，7d，14d，固定时间间隔，timeInterval 与 endTime 至少填一项  optional 
      * @param {boolean} [opts.groupBy] - 是否对查询的tags分组  optional 
      * @param {tagFilter} [opts.tags] - 自定义标签  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param metricData metricDatas  
      */

    describeCmMetricDataByTagSpec(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeCmMetricDataByTagSpec');
          }

         opts = opts || {};

          if (opts.namespace === undefined || opts.namespace === null) {
               throw new Error('Missing the required parameter \'opts.namespace\' when calling describeCmMetricDataByTagSpec');
          }
          if (opts.metric === undefined || opts.metric === null) {
               throw new Error('Missing the required parameter \'opts.metric\' when calling describeCmMetricDataByTagSpec');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.aggrType !== undefined && opts.aggrType !== null) {
               queryParams['aggrType'] = opts.aggrType
           }
           if (opts.downSampleType !== undefined && opts.downSampleType !== null) {
               queryParams['downSampleType'] = opts.downSampleType
           }
           if (opts.startTime !== undefined && opts.startTime !== null) {
               queryParams['startTime'] = opts.startTime
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               queryParams['endTime'] = opts.endTime
           }
           if (opts.timeInterval !== undefined && opts.timeInterval !== null) {
               queryParams['timeInterval'] = opts.timeInterval
           }
           if (opts.groupBy !== undefined && opts.groupBy !== null) {
               queryParams['groupBy'] = opts.groupBy
           }
          Object.assign(queryParams, this.buildTagFilterParam(opts.tags, 'tags'));

          let pathParams = {
               'regionId': regionId,
               'namespace': opts.namespace ,
               'metric': opts.metric 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeCmMetricDataByTagSpec with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/cm/namespaces/{namespace}/metrics/{metric}/metricData', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询自定义监控的metric列表
      * @param {Object} opts - parameters
      * @param {string} opts.namespaceUID - namespaceUID 
      * @param {string} opts.objUID - objUID 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param metricInfo metricList  
      */

    describeMetricsCm(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeMetricsCm');
          }

         opts = opts || {};

          if (opts.namespaceUID === undefined || opts.namespaceUID === null) {
               throw new Error('Missing the required parameter \'opts.namespaceUID\' when calling describeMetricsCm');
          }
          if (opts.objUID === undefined || opts.objUID === null) {
               throw new Error('Missing the required parameter \'opts.objUID\' when calling describeMetricsCm');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'namespaceUID': opts.namespaceUID ,
               'objUID': opts.objUID 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeMetricsCm with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/cm/namespaces/{namespaceUID}/objs/{objUID}/metrics', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  根据产品线查询可用监控项列表,metric介绍：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/metrics&quot;&gt;Metrics&lt;/a&gt;
      * @param {Object} opts - parameters
      * @param {string} opts.serviceCode - 资源的类型，取值vm, lb, ip, database 等 
      * @param {string} callback - callback
      @return {Object} result
      * @param metricDetail metrics  
      */

    describeMetrics(opts, callback){

         opts = opts || {};

          if (opts.serviceCode === undefined || opts.serviceCode === null) {
               throw new Error('Missing the required parameter \'opts.serviceCode\' when calling describeMetrics');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
               queryParams['serviceCode'] = opts.serviceCode
           }

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeMetrics with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/metrics', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询可用创建监控规则的指标列表,metric介绍：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/metrics&quot;&gt;Metrics&lt;/a&gt;
      * @param {Object} opts - parameters
      * @param {string} [opts.serviceCode] - 资源的类型，取值vm, lb, ip, database 等  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param serviceCodeMetrics serviceCodeList  
      */

    describeMetricsForCreateAlarm(opts, callback){

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
               queryParams['serviceCode'] = opts.serviceCode
           }

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeMetricsForCreateAlarm with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/metricsForCreateAlarm', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  为阻塞进程数提供的特殊接口
      * @param {Object} opts - parameters
      * @param {string} opts.metric - metric 
      * @param {string} opts.serviceCode - 资源的类型，取值vm, lb, ip, database 等 
      * @param {string} opts.resourceId - 资源的uuid 
      * @param {string} [opts.aggrType] - 指标聚合方式，每个指标都有默认的聚合方式， 可选值包括：sum,avg.max.min  optional 
      * @param {string} [opts.startTime] - 查询时间范围的开始时间， UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（默认为当前时间，早于30d时，将被重置为30d）  optional 
      * @param {string} [opts.endTime] - 查询时间范围的结束时间， UTC时间，格式：2016-12- yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（为空时，将由startTime与timeInterval计算得出）  optional 
      * @param {string} [opts.timeInterval] - 时间间隔：1h，6h，12h，1d，3d，7d，14d，固定时间间隔，timeInterval 与 endTime 至少填一项  optional 
      * @param {boolean} [opts.groupBy] - 是否对查询的tags分组  optional 
      * @param {string} [opts.time]   optional 
      * @param {string} [opts.mode] - 返回值形式，目前只有openpai  optional 
      * @param {tagFilter} [opts.tags] - 自定义标签  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param lastDownsampleRespItem list  
      */

    describeSqlserverBlockProcess(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeSqlserverBlockProcess');
          }

         opts = opts || {};

          if (opts.metric === undefined || opts.metric === null) {
               throw new Error('Missing the required parameter \'opts.metric\' when calling describeSqlserverBlockProcess');
          }
          if (opts.serviceCode === undefined || opts.serviceCode === null) {
               throw new Error('Missing the required parameter \'opts.serviceCode\' when calling describeSqlserverBlockProcess');
          }
          if (opts.resourceId === undefined || opts.resourceId === null) {
               throw new Error('Missing the required parameter \'opts.resourceId\' when calling describeSqlserverBlockProcess');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
               queryParams['serviceCode'] = opts.serviceCode
           }
           if (opts.resourceId !== undefined && opts.resourceId !== null) {
               queryParams['resourceId'] = opts.resourceId
           }
           if (opts.aggrType !== undefined && opts.aggrType !== null) {
               queryParams['aggrType'] = opts.aggrType
           }
           if (opts.startTime !== undefined && opts.startTime !== null) {
               queryParams['startTime'] = opts.startTime
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               queryParams['endTime'] = opts.endTime
           }
           if (opts.timeInterval !== undefined && opts.timeInterval !== null) {
               queryParams['timeInterval'] = opts.timeInterval
           }
           if (opts.groupBy !== undefined && opts.groupBy !== null) {
               queryParams['groupBy'] = opts.groupBy
           }
           if (opts.time !== undefined && opts.time !== null) {
               queryParams['time'] = opts.time
           }
           if (opts.mode !== undefined && opts.mode !== null) {
               queryParams['mode'] = opts.mode
           }
          Object.assign(queryParams, this.buildTagFilterParam(opts.tags, 'tags'));

          let pathParams = {
               'regionId': regionId,
               'metric': opts.metric 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeSqlserverBlockProcess with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/metrics/{metric}/blockProcess', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查看某资源的最后一个点,metric介绍：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/metrics&quot;&gt;Metrics&lt;/a&gt;
      * @param {Object} opts - parameters
      * @param {string} opts.metric - 监控项英文标识(id) 
      * @param {string} opts.serviceCode - 资源的类型，取值vm, lb, ip, database 等 
      * @param {string} opts.resourceId - 资源的uuid，支持多个resourceId批量查询，每个id用|分隔。 如：id1|id2|id3|id4 
      * @param {string} [opts.startTime] - 查询时间范围的开始时间， UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（默认为当前时间，早于30d时，将被重置为30d）  optional 
      * @param {string} [opts.endTime] - 查询时间范围的结束时间， UTC时间，格式：2016-12- yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（为空时，将由startTime与timeInterval计算得出）  optional 
      * @param {string} [opts.timeInterval] - 查询的时间间隔，最大不超过30天，支持分钟级别,小时级别，天级别，例如：1m、1h、1d  optional 
      * @param {string} [opts.aggrType] - 聚合方式：max avg min等,用于不同维度之间聚合  optional 
      * @param {string} [opts.downAggrType] - 聚合方式：max avg min等,用于将维度内一个周期数据聚合为一个点的聚合方式  optional 
      * @param {tagFilter} [opts.tags] - 自定义标签  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param lastDownsampleRespItem items  
      */

    lastDownsample(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  lastDownsample');
          }

         opts = opts || {};

          if (opts.metric === undefined || opts.metric === null) {
               throw new Error('Missing the required parameter \'opts.metric\' when calling lastDownsample');
          }
          if (opts.serviceCode === undefined || opts.serviceCode === null) {
               throw new Error('Missing the required parameter \'opts.serviceCode\' when calling lastDownsample');
          }
          if (opts.resourceId === undefined || opts.resourceId === null) {
               throw new Error('Missing the required parameter \'opts.resourceId\' when calling lastDownsample');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
               queryParams['serviceCode'] = opts.serviceCode
           }
           if (opts.resourceId !== undefined && opts.resourceId !== null) {
               queryParams['resourceId'] = opts.resourceId
           }
           if (opts.startTime !== undefined && opts.startTime !== null) {
               queryParams['startTime'] = opts.startTime
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               queryParams['endTime'] = opts.endTime
           }
           if (opts.timeInterval !== undefined && opts.timeInterval !== null) {
               queryParams['timeInterval'] = opts.timeInterval
           }
           if (opts.aggrType !== undefined && opts.aggrType !== null) {
               queryParams['aggrType'] = opts.aggrType
           }
           if (opts.downAggrType !== undefined && opts.downAggrType !== null) {
               queryParams['downAggrType'] = opts.downAggrType
           }
          Object.assign(queryParams, this.buildTagFilterParam(opts.tags, 'tags'));

          let pathParams = {
               'regionId': regionId,
               'metric': opts.metric 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call lastDownsample with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/metrics/{metric}/lastDownsample', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查看某资源多个监控项数据，metric介绍1：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/metrics&quot;&gt;Metrics&lt;/a&gt;
      * @param {Object} opts - parameters
      * @param {string} opts.metric - 监控项英文标识(id) 
      * @param {string} opts.serviceCode - 资源的类型，取值vm, lb, ip, database 等 
      * @param {string} opts.resourceId - 资源的uuid 
      * @param {string} [opts.aggrType] - 指标聚合方式，每个指标都有默认的聚合方式， 可选值包括：sum,avg.max.min  optional 
      * @param {string} [opts.startTime] - 查询时间范围的开始时间， UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（默认为当前时间，早于30d时，将被重置为30d）  optional 
      * @param {string} [opts.endTime] - 查询时间范围的结束时间， UTC时间，格式：2016-12- yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（为空时，将由startTime与timeInterval计算得出）  optional 
      * @param {string} [opts.timeInterval] - 时间间隔：1h，6h，12h，1d，3d，7d，14d，固定时间间隔，timeInterval 与 endTime 至少填一项  optional 
      * @param {boolean} [opts.groupBy] - 是否对查询的tags分组  optional 
      * @param {tagFilter} [opts.tags] - 自定义标签  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param metricData metricDatas  
      */

    describeMetricData(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeMetricData');
          }

         opts = opts || {};

          if (opts.metric === undefined || opts.metric === null) {
               throw new Error('Missing the required parameter \'opts.metric\' when calling describeMetricData');
          }
          if (opts.serviceCode === undefined || opts.serviceCode === null) {
               throw new Error('Missing the required parameter \'opts.serviceCode\' when calling describeMetricData');
          }
          if (opts.resourceId === undefined || opts.resourceId === null) {
               throw new Error('Missing the required parameter \'opts.resourceId\' when calling describeMetricData');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
               queryParams['serviceCode'] = opts.serviceCode
           }
           if (opts.resourceId !== undefined && opts.resourceId !== null) {
               queryParams['resourceId'] = opts.resourceId
           }
           if (opts.aggrType !== undefined && opts.aggrType !== null) {
               queryParams['aggrType'] = opts.aggrType
           }
           if (opts.startTime !== undefined && opts.startTime !== null) {
               queryParams['startTime'] = opts.startTime
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               queryParams['endTime'] = opts.endTime
           }
           if (opts.timeInterval !== undefined && opts.timeInterval !== null) {
               queryParams['timeInterval'] = opts.timeInterval
           }
           if (opts.groupBy !== undefined && opts.groupBy !== null) {
               queryParams['groupBy'] = opts.groupBy
           }
          Object.assign(queryParams, this.buildTagFilterParam(opts.tags, 'tags'));

          let pathParams = {
               'regionId': regionId,
               'metric': opts.metric 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeMetricData with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/metrics/{metric}/metricData', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查看某资源多个监控项数据，metric介绍：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/metrics&quot;&gt;Metrics&lt;/a&gt;
      * @param {Object} opts - parameters
      * @param {string} opts.serviceCode - 资源的类型，取值vm, lb, ip, database 等 
      * @param {string} opts.resourceId - 资源的uuid 
      * @param {string} [opts.aggrType] - 指标聚合方式，每个指标都有默认的聚合方式， 可选值包括：sum,avg.max.min  optional 
      * @param {string} [opts.startTime] - 查询时间范围的开始时间， UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（默认为当前时间，早于30d时，将被重置为30d）  optional 
      * @param {string} [opts.endTime] - 查询时间范围的结束时间， UTC时间，格式：2016-12- yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（为空时，将由startTime与timeInterval计算得出）  optional 
      * @param {string} [opts.timeInterval] - 时间间隔：1h，6h，12h，1d，3d，7d，14d，固定时间间隔，timeInterval 与 endTime 至少填一项  optional 
      * @param {boolean} [opts.groupBy] - 是否对查询的tags分组  optional 
      * @param {boolean} [opts.multiResources] - 是否跨资源查询，默认为false。当该字段为false时，取resourceId字段进行查询；当该子弹为true时，忽略resourceId字段，从tags中取resourceId作为实际的多资源id处理。  optional 
      * @param {filter} [opts.filters] - 自定义过滤标签，查询时必须在filters中指定要查询的metric，支持多个metric。如：  name&#x3D;&#39;metric&#39;,values&#x3D;[&quot;metric1&quot;,&quot;metric2&quot;]  optional 
      * @param {tagFilter} [opts.tags] - 自定义标签  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param metricData metricDatas  
      */

    batchDescribeMetricData(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  batchDescribeMetricData');
          }

         opts = opts || {};

          if (opts.serviceCode === undefined || opts.serviceCode === null) {
               throw new Error('Missing the required parameter \'opts.serviceCode\' when calling batchDescribeMetricData');
          }
          if (opts.resourceId === undefined || opts.resourceId === null) {
               throw new Error('Missing the required parameter \'opts.resourceId\' when calling batchDescribeMetricData');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
               queryParams['serviceCode'] = opts.serviceCode
           }
           if (opts.resourceId !== undefined && opts.resourceId !== null) {
               queryParams['resourceId'] = opts.resourceId
           }
           if (opts.aggrType !== undefined && opts.aggrType !== null) {
               queryParams['aggrType'] = opts.aggrType
           }
           if (opts.startTime !== undefined && opts.startTime !== null) {
               queryParams['startTime'] = opts.startTime
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               queryParams['endTime'] = opts.endTime
           }
           if (opts.timeInterval !== undefined && opts.timeInterval !== null) {
               queryParams['timeInterval'] = opts.timeInterval
           }
           if (opts.groupBy !== undefined && opts.groupBy !== null) {
               queryParams['groupBy'] = opts.groupBy
           }
           if (opts.multiResources !== undefined && opts.multiResources !== null) {
               queryParams['multiResources'] = opts.multiResources
           }
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));
          Object.assign(queryParams, this.buildTagFilterParam(opts.tags, 'tags'));

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call batchDescribeMetricData with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/metricsData', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  该接口为自定义监控数据上报的接口，方便您将自己采集的时序数据上报到云监控。不同region域名上报不同region的数据，参考：&lt;a href&#x3D;&quot;https://docs.jdcloud.com/cn/monitoring/reporting-monitoring-data&quot;&gt;调用说明&lt;/a&gt;可上报原始数据和已聚合的统计数据。支持批量上报方式。单次请求最多包含 50 个数据点；数据大小不超过 256k。
      * @param {Object} opts - parameters
      * @param {array} [opts.metricDataList] - 数据参数  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param boolean success  全部写入成功为true，否则为false
      * @param metricDataList errMetricDataList  
      */

    putMetricData(opts, callback){

         opts = opts || {};


         let postBody =   {
          };
           if (opts.metricDataList !== undefined && opts.metricDataList !== null) {
               postBody['metricDataList'] = opts.metricDataList
           }

          let queryParams = {};

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call putMetricData with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/customMetrics', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  尚未恢复的告警查询接口
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNumber] - 当前所在页，默认为1  optional 
      * @param {integer} [opts.pageSize] - 页面大小，默认为20；取值范围[1, 100]  optional 
      * @param {string} [opts.datacenter] - 要查询的地域，为空则查询所有的  optional 
      * @param {filter} [opts.filters] - 服务码列表
filter name 为serviceCodes表示查询多个产品线的规则  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param alarmHistoryWithDetail alarmHistoryList  
      * @param integer numberPages  总页数
      * @param integer numberRecords  总记录数
      * @param integer pageNumber  当前页码
      * @param integer pageSize  分页大小
      */

    describeAlarmingRules(opts, callback){

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
           if (opts.datacenter !== undefined && opts.datacenter !== null) {
               queryParams['datacenter'] = opts.datacenter
           }
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeAlarmingRules with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/overview/queryAlarmingRules', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  概览页规则统计接口
      * @param {Object} opts - parameters
      * @param {string} [opts.pin] - pin  optional 
      * @param {string} [opts.datacenter] - 要查询的地域，为空则查询所有的  optional 
      * @param {string} [opts.adminPin] - 主帐号  optional 
      * @param {filter} [opts.filters] - 服务码列表
filter name 为serviceCodes表示查询多个产品线的规则  optional 
      * @param {string} callback - callback
      @return {Object} result
      * @param integer alarmRuleCount  处于报警状态的规则个数  status:2
      * @param integer disableRuleCount  未启用的规则 数量
      * @param integer normalRuleCount  处于正常状态的规则个数  status：1
      * @param string serviceCodes  
      * @param boolean subUserPermission  默认为true，当使用主子帐号功能，且用户没有任何规则的权限时，为false
      * @param integer totalRuleCount  监控规则 总数
      * @param integer unknownRuleCount  处于数据不足状态的规则 个数  status:4
      */

    describeRuleCounting(opts, callback){

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pin !== undefined && opts.pin !== null) {
               queryParams['pin'] = opts.pin
           }
           if (opts.datacenter !== undefined && opts.datacenter !== null) {
               queryParams['datacenter'] = opts.datacenter
           }
           if (opts.adminPin !== undefined && opts.adminPin !== null) {
               queryParams['adminPin'] = opts.adminPin
           }
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));

          let pathParams = {
               'regionId': 'jdcloud',
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeRuleCounting with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/overview/queryRuleCountings', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查看sqlserver数据库某资源一段时间内的topN慢sql数据
      * @param {Object} opts - parameters
      * @param {string} [opts.endTime] - 查询时间范围的结束时间， UTC时间，格式：2016-12- yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（为空时，将由startTime与timeInterval计算得出）
in: query  optional 
      * @param {string} opts.resourceId - 资源的uuid 
      * @param {string} opts.serviceCode - 资源的类型,sqlserver 
      * @param {string} [opts.startTime] - 查询时间范围的开始时间， UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（默认为当前时间，早于30d时，将被重置为30d）
in: query  optional 
      * @param {string} [opts.timeInterval] - 时间间隔：1h，6h，12h，1d，3d，7d，14d，固定时间间隔，timeInterval 与 endTime 至少填一项
in: query  optional 
      * @param {integer} opts.topN - topN数量 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param sqlInfo topNsql  
      */

    describeTopNSlowSql(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeTopNSlowSql');
          }

         opts = opts || {};

          if (opts.resourceId === undefined || opts.resourceId === null) {
               throw new Error('Missing the required parameter \'opts.resourceId\' when calling describeTopNSlowSql');
          }
          if (opts.serviceCode === undefined || opts.serviceCode === null) {
               throw new Error('Missing the required parameter \'opts.serviceCode\' when calling describeTopNSlowSql');
          }
          if (opts.topN === undefined || opts.topN === null) {
               throw new Error('Missing the required parameter \'opts.topN\' when calling describeTopNSlowSql');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.endTime !== undefined && opts.endTime !== null) {
               queryParams['endTime'] = opts.endTime
           }
           if (opts.resourceId !== undefined && opts.resourceId !== null) {
               queryParams['resourceId'] = opts.resourceId
           }
           if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
               queryParams['serviceCode'] = opts.serviceCode
           }
           if (opts.startTime !== undefined && opts.startTime !== null) {
               queryParams['startTime'] = opts.startTime
           }
           if (opts.timeInterval !== undefined && opts.timeInterval !== null) {
               queryParams['timeInterval'] = opts.timeInterval
           }
           if (opts.topN !== undefined && opts.topN !== null) {
               queryParams['topN'] = opts.topN
           }

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.2.4',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeTopNSlowSql with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/topNSql', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

};
module.exports = JDCloud.MONITOR
