/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 监控项自定义监控相关接口
 * 自定义监控项相关接口，提供自定义监控数据上报功能
 *
 * OpenAPI spec version: v1
 * Contact:
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

require('../../../lib/node_loader')
var JDCloud = require('../../../lib/core')
var Service = JDCloud.Service
var serviceId = 'monitor'
Service._services[serviceId] = true

/**
 * monitor service.
 * @version 1.1.1
 */

JDCloud.MONITOR = class MONITOR extends Service {
  constructor (options = {}) {
    options._defaultEndpoint = {}
    options._defaultEndpoint.protocol =
      options._defaultEndpoint.protocol || 'https'
    options._defaultEndpoint.host =
      options._defaultEndpoint.host || 'monitor.jdcloud-api.com'
    options.basePath = '/v1' // 默认要设为空""
    super(serviceId, options)
  }

  /**
      *  查询监控规则
      * @param {Object} opts - parameters
      * @param {string} [opts.serviceCode] - 产品名称  optional
      * @param {string} [opts.resourceId] - 资源Id  optional
      * @param {integer} [opts.status] - 规则报警状态, 1：正常, 2：报警，4：数据不足  optional
      * @param {integer} [opts.isAlarming] - 是否为正在报警的规则，0为忽略，1为是，与 status 同时只能生效一个,isAlarming 优先生效  optional
      * @param {integer} [opts.enabled] - 规则状态：1为启用，0为禁用  optional
      * @param {integer} [opts.pageNumber] - 页码, 默认为1, 取值范围：[1,∞)  optional
      * @param {integer} [opts.pageSize] - 分页大小，默认为20，取值范围：[10,100]  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param alarm alarmList
      * @param number pageNumber  页码
      * @param number numberPages  总页数
      * @param number numberRecords  总记录数
      * @param number pageSize  分页大小
      */

  describeAlarms (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  describeAlarms"
      )
    }

    opts = opts || {}

    let postBody = null
    let queryParams = {}
    if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
      queryParams['serviceCode'] = opts.serviceCode
    }
    if (opts.resourceId !== undefined && opts.resourceId !== null) {
      queryParams['resourceId'] = opts.resourceId
    }
    if (opts.status !== undefined && opts.status !== null) {
      queryParams['status'] = opts.status
    }
    if (opts.isAlarming !== undefined && opts.isAlarming !== null) {
      queryParams['isAlarming'] = opts.isAlarming
    }
    if (opts.enabled !== undefined && opts.enabled !== null) {
      queryParams['enabled'] = opts.enabled
    }
    if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
      queryParams['pageNumber'] = opts.pageNumber
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.1.1'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call describeAlarms with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/alarms',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  创建报警规则，可以为某一个实例创建报警规则，也可以为多个实例同时创建报警规则。
      * @param {Object} opts - parameters
      * @param {string} opts.clientToken - 幂等性校验参数，最长32位，值不变则返回值不会变
      * @param {createAlarmSpec} opts.createAlarmSpec
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string alarmIdList
      */

  createAlarm (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  createAlarm"
      )
    }

    opts = opts || {}

    if (opts.clientToken === undefined || opts.clientToken === null) {
      throw new Error(
        "Missing the required parameter 'opts.clientToken' when calling createAlarm"
      )
    }
    if (opts.createAlarmSpec === undefined || opts.createAlarmSpec === null) {
      throw new Error(
        "Missing the required parameter 'opts.createAlarmSpec' when calling createAlarm"
      )
    }

    let postBody = {}
    if (opts.clientToken !== undefined && opts.clientToken !== null) {
      postBody['clientToken'] = opts.clientToken
    }
    if (opts.createAlarmSpec !== undefined && opts.createAlarmSpec !== null) {
      postBody['createAlarmSpec'] = opts.createAlarmSpec
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.1.1'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call createAlarm with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/alarms',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  批量删除已创建的报警规则
      * @param {Object} opts - parameters
      * @param {string} opts.ids - 待删除的规则id，用&quot;|&quot;间隔
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  deleteAlarms (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  deleteAlarms"
      )
    }

    opts = opts || {}

    if (opts.ids === undefined || opts.ids === null) {
      throw new Error(
        "Missing the required parameter 'opts.ids' when calling deleteAlarms"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.ids !== undefined && opts.ids !== null) {
      queryParams['ids'] = opts.ids
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.1.1'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call deleteAlarms with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/alarms',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询规则详情
      * @param {Object} opts - parameters
      * @param {string} opts.alarmId - 规则id
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param alarm alarm
      */

  describeAlarmsByID (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  describeAlarmsByID"
      )
    }

    opts = opts || {}

    if (opts.alarmId === undefined || opts.alarmId === null) {
      throw new Error(
        "Missing the required parameter 'opts.alarmId' when calling describeAlarmsByID"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      alarmId: opts.alarmId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.1.1'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call describeAlarmsByID with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/alarms/{alarmId}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  修改已创建的报警规则
      * @param {Object} opts - parameters
      * @param {string} opts.alarmId - 规则id
      * @param {string} opts.calculation - 统计方法：平均值&#x3D;avg、最大值&#x3D;max、最小值&#x3D;min、总和&#x3D;sum
      * @param {array} [opts.contactGroups] - 通知的联系组，如 [“联系组1”,”联系组2”]  optional
      * @param {array} [opts.contactPersons] - 通知的联系人，如 [“联系人1”,”联系人2”]  optional
      * @param {string} [opts.downSample] - 取样频次  optional
      * @param {string} opts.metric - 根据产品线查询可用监控项列表 接口 返回的Metric字段
      * @param {integer} [opts.noticePeriod] - 通知周期 单位：小时  optional
      * @param {string} opts.operation - &gt;&#x3D;、&gt;、&lt;、&lt;&#x3D;、&#x3D;&#x3D;、!&#x3D;
      * @param {integer} opts.period - 统计周期（单位：分钟），可选值：2,5,15,30,60
      * @param {string} opts.serviceCode - 产品名称
      * @param {number} opts.threshold - 阈值
      * @param {integer} opts.times - 连续多少次后报警，可选值:1,2,3,5
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string alarmId  规则id
      */

  updateAlarm (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  updateAlarm"
      )
    }

    opts = opts || {}

    if (opts.alarmId === undefined || opts.alarmId === null) {
      throw new Error(
        "Missing the required parameter 'opts.alarmId' when calling updateAlarm"
      )
    }
    if (opts.calculation === undefined || opts.calculation === null) {
      throw new Error(
        "Missing the required parameter 'opts.calculation' when calling updateAlarm"
      )
    }
    if (opts.metric === undefined || opts.metric === null) {
      throw new Error(
        "Missing the required parameter 'opts.metric' when calling updateAlarm"
      )
    }
    if (opts.operation === undefined || opts.operation === null) {
      throw new Error(
        "Missing the required parameter 'opts.operation' when calling updateAlarm"
      )
    }
    if (opts.period === undefined || opts.period === null) {
      throw new Error(
        "Missing the required parameter 'opts.period' when calling updateAlarm"
      )
    }
    if (opts.serviceCode === undefined || opts.serviceCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.serviceCode' when calling updateAlarm"
      )
    }
    if (opts.threshold === undefined || opts.threshold === null) {
      throw new Error(
        "Missing the required parameter 'opts.threshold' when calling updateAlarm"
      )
    }
    if (opts.times === undefined || opts.times === null) {
      throw new Error(
        "Missing the required parameter 'opts.times' when calling updateAlarm"
      )
    }

    let postBody = {}
    if (opts.calculation !== undefined && opts.calculation !== null) {
      postBody['calculation'] = opts.calculation
    }
    if (opts.contactGroups !== undefined && opts.contactGroups !== null) {
      postBody['contactGroups'] = opts.contactGroups
    }
    if (opts.contactPersons !== undefined && opts.contactPersons !== null) {
      postBody['contactPersons'] = opts.contactPersons
    }
    if (opts.downSample !== undefined && opts.downSample !== null) {
      postBody['downSample'] = opts.downSample
    }
    if (opts.metric !== undefined && opts.metric !== null) {
      postBody['metric'] = opts.metric
    }
    if (opts.noticePeriod !== undefined && opts.noticePeriod !== null) {
      postBody['noticePeriod'] = opts.noticePeriod
    }
    if (opts.operation !== undefined && opts.operation !== null) {
      postBody['operation'] = opts.operation
    }
    if (opts.period !== undefined && opts.period !== null) {
      postBody['period'] = opts.period
    }
    if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
      postBody['serviceCode'] = opts.serviceCode
    }
    if (opts.threshold !== undefined && opts.threshold !== null) {
      postBody['threshold'] = opts.threshold
    }
    if (opts.times !== undefined && opts.times !== null) {
      postBody['times'] = opts.times
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      alarmId: opts.alarmId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.1.1'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call updateAlarm with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/alarms/{alarmId}',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  启用报警规则，当客户的报警规则处于停止状态时，可以使用此接口启用报警规则。
      * @param {Object} opts - parameters
      * @param {string} opts.alarmId - 规则id
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  enableAlarm (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  enableAlarm"
      )
    }

    opts = opts || {}

    if (opts.alarmId === undefined || opts.alarmId === null) {
      throw new Error(
        "Missing the required parameter 'opts.alarmId' when calling enableAlarm"
      )
    }

    let postBody = {}

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      alarmId: opts.alarmId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.1.1'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call enableAlarm with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/alarms/{alarmId}:enable',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  禁用报警规则。报警规则禁用后，将停止探测实例的监控项数据。
      * @param {Object} opts - parameters
      * @param {string} opts.alarmId - 规则id
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  disableAlarm (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  disableAlarm"
      )
    }

    opts = opts || {}

    if (opts.alarmId === undefined || opts.alarmId === null) {
      throw new Error(
        "Missing the required parameter 'opts.alarmId' when calling disableAlarm"
      )
    }

    let postBody = {}

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      alarmId: opts.alarmId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.1.1'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call disableAlarm with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/alarms/{alarmId}:disable',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询报警历史
      * @param {Object} opts - parameters
      * @param {string} [opts.id] - 报警规则的Id  optional
      * @param {string} [opts.serviceCode] - 产品名称  optional
      * @param {string} [opts.resourceId] - 资源Id  optional
      * @param {string} opts.startTime - 查询数据开始时间，默认24小时前，可以输入long型时间，也可以输入yyyy-MM-dd&#39;T&#39;HH:mm:ssZ类型时间
      * @param {string} opts.endTime - 查询数据结束时间，默认当前时间，可以输入long型时间，也可以输入yyyy-MM-dd&#39;T&#39;HH:mm:ssZ类型时间
      * @param {integer} [opts.pageNumber] - 页码, 默认为1, 取值范围：[1,∞)  optional
      * @param {integer} [opts.pageSize] - 分页大小，默认为20，取值范围：[10,100]  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param alarmHistory alarmHistoryList
      * @param number pageNumber  页码
      * @param number numberPages  总页数
      * @param number numberRecords  总记录数
      * @param number pageSize  分页大小
      */

  describeAlarmHistory (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  describeAlarmHistory"
      )
    }

    opts = opts || {}

    if (opts.startTime === undefined || opts.startTime === null) {
      throw new Error(
        "Missing the required parameter 'opts.startTime' when calling describeAlarmHistory"
      )
    }
    if (opts.endTime === undefined || opts.endTime === null) {
      throw new Error(
        "Missing the required parameter 'opts.endTime' when calling describeAlarmHistory"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.id !== undefined && opts.id !== null) {
      queryParams['id'] = opts.id
    }
    if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
      queryParams['serviceCode'] = opts.serviceCode
    }
    if (opts.resourceId !== undefined && opts.resourceId !== null) {
      queryParams['resourceId'] = opts.resourceId
    }
    if (opts.startTime !== undefined && opts.startTime !== null) {
      queryParams['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      queryParams['endTime'] = opts.endTime
    }
    if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
      queryParams['pageNumber'] = opts.pageNumber
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.1.1'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call describeAlarmHistory with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/alarmHistory',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据产品线查询可用监控项列表
      * @param {Object} opts - parameters
      * @param {string} opts.serviceCode - 资源的类型 ：
vm--&gt;云主机
disk--&gt;云硬盘
ip--&gt;公网ip
balance--&gt;负载均衡
database--&gt;云数据库mysql版本
cdn--&gt;京东CDN
redis--&gt;redis云缓存
mongodb--&gt;mongoDB云缓存
storage--&gt;云存储
sqlserver--&gt;云数据库sqlserver版
nativecontainer--&gt;容器

      * @param {string} callback - callback
      @return {Object} result
      * @param metricDetail metrics
      */

  describeMetrics (opts, callback) {
    opts = opts || {}

    if (opts.serviceCode === undefined || opts.serviceCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.serviceCode' when calling describeMetrics"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
      queryParams['serviceCode'] = opts.serviceCode
    }

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.1.1'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call describeMetrics with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/metrics',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询可用创建监控规则的指标列表
      * @param {Object} opts - parameters
      * @param {string} [opts.serviceCode] - 资源的类型，默认为空，展示所有项目
vm--&gt;云主机
disk--&gt;云硬盘
ip--&gt;公网ip
balance--&gt;负载均衡
database--&gt;云数据库mysql版本
cdn--&gt;京东CDN
redis--&gt;redis云缓存
mongodb--&gt;mongoDB云缓存
storage--&gt;云存储
sqlserver--&gt;云数据库sqlserver版
nativecontainer--&gt;容器
  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param serviceCodeMetrics serviceCodeList
      */

  describeMetricsForCreateAlarm (opts, callback) {
    opts = opts || {}

    let postBody = null
    let queryParams = {}
    if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
      queryParams['serviceCode'] = opts.serviceCode
    }

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.1.1'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call describeMetricsForCreateAlarm with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/metricsForCreateAlarm',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查看某资源的监控数据
      * @param {Object} opts - parameters
      * @param {string} opts.metric - 监控项英文标识(id)
      * @param {string} opts.serviceCode - 资源的类型，取值vm, lb, ip, database 等
      * @param {string} opts.resourceId - 资源的uuid
      * @param {string} [opts.startTime] - 查询时间范围的开始时间， UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（默认为当前时间，早于30d时，将被重置为30d）  optional
      * @param {string} [opts.endTime] - 查询时间范围的结束时间， UTC时间，格式：2016-12- yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（为空时，将由startTime与timeInterval计算得出）  optional
      * @param {string} [opts.timeInterval] - 时间间隔：1h，6h，12h，1d，3d，7d，14d，固定时间间隔，timeInterval 与 endTime 至少填一项  optional
      * @param {tagFilter} [opts.tags] - 自定义标签  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param metricData metricDatas
      */

  describeMetricData (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  describeMetricData"
      )
    }

    opts = opts || {}

    if (opts.metric === undefined || opts.metric === null) {
      throw new Error(
        "Missing the required parameter 'opts.metric' when calling describeMetricData"
      )
    }
    if (opts.serviceCode === undefined || opts.serviceCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.serviceCode' when calling describeMetricData"
      )
    }
    if (opts.resourceId === undefined || opts.resourceId === null) {
      throw new Error(
        "Missing the required parameter 'opts.resourceId' when calling describeMetricData"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.serviceCode !== undefined && opts.serviceCode !== null) {
      queryParams['serviceCode'] = opts.serviceCode
    }
    if (opts.resourceId !== undefined && opts.resourceId !== null) {
      queryParams['resourceId'] = opts.resourceId
    }
    if (opts.startTime !== undefined && opts.startTime !== null) {
      queryParams['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      queryParams['endTime'] = opts.endTime
    }
    if (opts.timeInterval !== undefined && opts.timeInterval !== null) {
      queryParams['timeInterval'] = opts.timeInterval
    }
    Object.assign(queryParams, this.buildTagFilterParam(opts.tags, 'tags'))

    let pathParams = {
      regionId: regionId,
      metric: opts.metric
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.1.1'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call describeMetricData with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/metrics/{metric}/metricData',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  自定义监控数据上报接口
      * @param {Object} opts - parameters
      * @param {array} [opts.metricDataList] - 数据参数  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param boolean success  全部写入成功为true，否则为false
      * @param metricDataList errMetricDataList
      */

  putMetricData (opts, callback) {
    opts = opts || {}

    let postBody = {}
    if (opts.metricDataList !== undefined && opts.metricDataList !== null) {
      postBody['metricDataList'] = opts.metricDataList
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  monitor/1.1.1'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call putMetricData with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/customMetrics',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }
}
module.exports = JDCloud.MONITOR
