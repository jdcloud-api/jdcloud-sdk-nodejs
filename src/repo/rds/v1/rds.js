/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 白名单
 * 白名单相关接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

require('../../../lib/node_loader');
var JDCloud = require('../../../lib/core');
var Service = JDCloud.Service;
var serviceId = "rds"
Service._services[serviceId] = true;

/**
* rds service.
* @version 0.4.1
*/

JDCloud.RDS= class RDS extends Service {
    constructor(options = {}) {
            options._defaultEndpoint = {};
            options._defaultEndpoint.protocol = options._defaultEndpoint.protocol || 'https';
            options._defaultEndpoint.host = options._defaultEndpoint.host || 'rds.jdcloud-api.com';
            options.basePath = '/v1'; //默认要设为空""
            super( serviceId , options);
    }

      /**
      *  查看某个RDS实例下所有账号信息，包括账号名称、对各个数据库的访问权限信息等
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {integer} [opts.pageNumber] - 显示数据的页码，默认为1，取值范围：[-1,∞)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页;  optional 
      * @param {integer} [opts.pageSize] - 每页显示的数据条数，默认为100，取值范围：[10,100]，用于查询列表的接口  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param account accounts  
      * @param integer totalCount  
      */

    describeAccounts(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeAccounts');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeAccounts');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeAccounts with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/accounts', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  创建数据库账号，用户可以使用客户端，应用程序等通过该账号和密码登录RDS数据库实例。&lt;br&gt;为便于管理和恢复，RDS对账号进行了限制，数据库账号只能通过控制台或者OpenAPI进行创建、删除账号以及对账号授权等，用户不能通过SQL语句对账号进行相关操作。
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {} opts.accountName - 账号名，在同一个RDS实例中，账号名不能重复。账号名的具体规则可参见帮助中心文档:[名称及密码限制](../../../documentation/Cloud-Database-and-Cache/RDS/Introduction/Restrictions/SQLServer-Restrictions.md) 
      * @param {} opts.accountPassword - 密码,密码的具体规则可参见帮助中心文档:[名称及密码限制](../../../documentation/Cloud-Database-and-Cache/RDS/Introduction/Restrictions/SQLServer-Restrictions.md) 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    createAccount(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  createAccount');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling createAccount');
          }
          if (opts.accountName === undefined || opts.accountName === null) {
               throw new Error('Missing the required parameter \'opts.accountName\' when calling createAccount');
          }
          if (opts.accountPassword === undefined || opts.accountPassword === null) {
               throw new Error('Missing the required parameter \'opts.accountPassword\' when calling createAccount');
          }

         let postBody =   {
          };
           if (opts.accountName !== undefined && opts.accountName !== null) {
               postBody['accountName'] = opts.accountName
           }
           if (opts.accountPassword !== undefined && opts.accountPassword !== null) {
               postBody['accountPassword'] = opts.accountPassword
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call createAccount with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/accounts', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除数据库账号，账号删除后不可恢复，用户无法再使用该账号登录RDS实例
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.accountName - 账号名，在同一个实例中账号名不能重复 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteAccount(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  deleteAccount');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling deleteAccount');
          }
          if (opts.accountName === undefined || opts.accountName === null) {
               throw new Error('Missing the required parameter \'opts.accountName\' when calling deleteAccount');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId ,
               'accountName': opts.accountName 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteAccount with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/accounts/{accountName}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  授予账号的数据库访问权限，即该账号对数据库拥有什么权限。一个账号可以对多个数据库具有访问权限。&lt;br&gt;为便于管理，RDS对权限进行了归类，目前提供以下两种权限&lt;br&gt;- ro：只读权限，用户只能读取数据库中的数据，不能进行创建、插入、删除、更改等操作。&lt;br&gt;- rw：读写权限，用户可以对数据库进行增删改查等操作
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.accountName - 账号名，在同一个实例中账号名不能重复 
      * @param {array} opts.accountPrivileges - 账号的访问权限 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    grantPrivilege(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  grantPrivilege');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling grantPrivilege');
          }
          if (opts.accountName === undefined || opts.accountName === null) {
               throw new Error('Missing the required parameter \'opts.accountName\' when calling grantPrivilege');
          }
          if (opts.accountPrivileges === undefined || opts.accountPrivileges === null) {
               throw new Error('Missing the required parameter \'opts.accountPrivileges\' when calling grantPrivilege');
          }

         let postBody =   {
          };
           if (opts.accountPrivileges !== undefined && opts.accountPrivileges !== null) {
               postBody['accountPrivileges'] = opts.accountPrivileges
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId ,
               'accountName': opts.accountName 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call grantPrivilege with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/accounts/{accountName}:grantPrivilege', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  取消该账号对某个数据库的所有权限。权限取消后，该账号将不能访问此数据库。取消账号对某个数据库的访问权限，不影响该账号对其他数据库的访问权限
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.accountName - 账号名，在同一个实例中账号名不能重复 
      * @param {array} [opts.dbNames] - 需要取消授权的数据库的名称。权限取消后，该账号将不能访问此数据库  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    revokePrivilege(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  revokePrivilege');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling revokePrivilege');
          }
          if (opts.accountName === undefined || opts.accountName === null) {
               throw new Error('Missing the required parameter \'opts.accountName\' when calling revokePrivilege');
          }

         let postBody =   {
          };
           if (opts.dbNames !== undefined && opts.dbNames !== null) {
               postBody['dbNames'] = opts.dbNames
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId ,
               'accountName': opts.accountName 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call revokePrivilege with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/accounts/{accountName}:revokePrivilege', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  重置数据库账号密码。如果用户忘记账号的密码，可以使用该接口重置指定账号密码。密码重置后，以前的密码将无法使用，必须使用重置后的新密码登录或连接数据库实例。
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.accountName - 账号名，在同一个实例中账号名不能重复 
      * @param {} opts.accountPassword - 新密码，密码的具体规则可参见帮助中心文档:[名称及密码限制](../../../documentation/Cloud-Database-and-Cache/RDS/Introduction/Restrictions/SQLServer-Restrictions.md) 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    resetPassword(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  resetPassword');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling resetPassword');
          }
          if (opts.accountName === undefined || opts.accountName === null) {
               throw new Error('Missing the required parameter \'opts.accountName\' when calling resetPassword');
          }
          if (opts.accountPassword === undefined || opts.accountPassword === null) {
               throw new Error('Missing the required parameter \'opts.accountPassword\' when calling resetPassword');
          }

         let postBody =   {
          };
           if (opts.accountPassword !== undefined && opts.accountPassword !== null) {
               postBody['accountPassword'] = opts.accountPassword
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId ,
               'accountName': opts.accountName 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call resetPassword with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/accounts/{accountName}:resetPassword', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查看当前实例已开启的审计选项。如当前实例未开启审计，则返回空&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string enabled  当前已开启的审计选项。如当前实例未开启审计，则返回空数组
      */

    describeAudit(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeAudit');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeAudit');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeAudit with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/audit', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  开启SQL Server的数据库审计功能，目前支持实例级的数据库审计。用户可以根据需要开启、关闭审计、自定义审计策略，并下载审计文件。审计文件为原生的SQL Server审计文件，缺省保存6个月。&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {} opts.enabled - 要开启的审计选项，各个选项之间用英文逗号或空格进行分割，例如：DATABASE_OBJECT_ACCESS_GROUP,ACKUP_RESTORE_GROU等&lt;br&gt;各个数据库版本支持的审计选项可以通过接口[getAuditOptions](./getAuditOptions.md)获得，各个审计项的具体含义可以参看微软的官方文档 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    createAudit(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  createAudit');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling createAudit');
          }
          if (opts.enabled === undefined || opts.enabled === null) {
               throw new Error('Missing the required parameter \'opts.enabled\' when calling createAudit');
          }

         let postBody =   {
          };
           if (opts.enabled !== undefined && opts.enabled !== null) {
               postBody['enabled'] = opts.enabled
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call createAudit with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/audit', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  关闭数据库审计。关闭数据库审计后，以前生成的审计结果文件并不会被立即删除。审计结果文件会过期后由系统自动删除，过期时间缺省为6个月&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteAudit(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  deleteAudit');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling deleteAudit');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteAudit with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/audit', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  获取当前系统所支持的各种数据库版本的审计选项及相应的推荐选项&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.name - 审计选项类别，**大小写敏感**，目前支持两种类型：&lt;br&gt;（1）AuditOptions开头：在disalbed参数中返回SQL Server各个版本支持的所有选项，支持的名称为&lt;br&gt;AuditOptions2008R2&lt;br&gt;AuditOptions2012&lt;br&gt;AuditOptions2014&lt;br&gt;AuditOptions2016&lt;br&gt;例如输入参数为&quot;AuditOptions2016&quot;，则在disabled字段中返回SQL Server 2016 版本所支持的所有的审计选项&lt;br&gt;（2）AuditDefault开头：京东云建议的默认选项,在enabled参数中返回建议开启的选项，在disabled参数中返回不开启的选项，支持的名称为：&lt;br&gt;AuditDefault2008R2&lt;br&gt;AuditDefault2012&lt;br&gt;AuditDefault2014&lt;br&gt;AuditDefault2016&lt;br&gt;例如输入参数为&quot;AuditDefault2016&quot;，则在enabled字段返回SQL Server 2016 版本中京东云建议开启的审计选项，在disabled字段中返回建议不开启的选项 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string enabled  AuditDefault类模板：返回建议开启的审计选项。&lt;br&gt; AuditOptions类模板：不返回该参数
      * @param string disabled  AuditDefault类模板：返回未开启的审计选项&lt;br&gt;AuditOptions类模板：返回所有的审计选项
      */

    describeAuditOptions(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeAuditOptions');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeAuditOptions');
          }
          if (opts.name === undefined || opts.name === null) {
               throw new Error('Missing the required parameter \'opts.name\' when calling describeAuditOptions');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.name !== undefined && opts.name !== null) {
               queryParams['name'] = opts.name
           }

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeAuditOptions with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/audit:describeAuditOptions', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  修改当前的审计选项。当前已有审计选项可以通过describeAudit获得，支持的全部选项可以通过getAuditOptions获得。&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {} [opts.add] - 在原有审计项基础上，增加新的审计项，多个审计项之间用英文逗号，分号或空格分隔，例如DATABASE_OBJECT_ACCESS_GROUP,ACKUP_RESTORE_GROUP  optional 
      * @param {} [opts.drop] - 删除审计项，多个审计项之间用英文逗号，分号或空格分隔，例如DATABASE_OBJECT_ACCESS_GROUP,ACKUP_RESTORE_GROUP&lt;br&gt;如删除了所有审计项，则审计自动关闭  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    modifyAudit(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  modifyAudit');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling modifyAudit');
          }

         let postBody =   {
          };
           if (opts.add !== undefined && opts.add !== null) {
               postBody['add'] = opts.add
           }
           if (opts.drop !== undefined && opts.drop !== null) {
               postBody['drop'] = opts.drop
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call modifyAudit with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/audit:modifyAudit', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  获取当前实例下的所有审计结果文件的列表&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param auditFile auditFiles  
      */

    describeAuditFiles(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeAuditFiles');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeAuditFiles');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeAuditFiles with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/audit:describeAuditFiles', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  获取某个审计文件的下载链接，同时支持内链和外链，链接的有效时间为24小时&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.fileName - 审计文件名 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string publicURL  公网下载链接，若当前不可下载，则为空串
      * @param string internalURL  内网下载链接，若当前不可下载，则为空串
      */

    describeAuditDownloadURL(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeAuditDownloadURL');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeAuditDownloadURL');
          }
          if (opts.fileName === undefined || opts.fileName === null) {
               throw new Error('Missing the required parameter \'opts.fileName\' when calling describeAuditDownloadURL');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.fileName !== undefined && opts.fileName !== null) {
               queryParams['fileName'] = opts.fileName
           }

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeAuditDownloadURL with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/audit:describeAuditDownloadURL', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  仅支持MySQL实例开启数据库审计
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    enableAudit(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  enableAudit');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling enableAudit');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call enableAudit with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/audit:enableAudit', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  仅支持MySQL实例关闭数据库审计
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    disableAudit(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  disableAudit');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling disableAudit');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call disableAudit with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/audit:disableAudit', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  仅支持查看MySQL实例的审计内容
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.startTime - 查询开始时间，格式为：YYYY-MM-DD HH:mm:ss，开始时间不能早于当前时间30天 
      * @param {string} opts.endTime - 查询截止时间，格式为：YYYY-MM-DD HH:mm:ss，开始时间到结束时间不能超过3天 
      * @param {string} [opts.dbName] - 数据库名  optional 
      * @param {string} [opts.accountName] - 账号名  optional 
      * @param {integer} [opts.pageNumber] - 显示数据的页码，默认为1，取值范围：[-1,∞)  optional 
      * @param {integer} [opts.pageSize] - 每页显示的数据条数，默认为10，取值范围：10、20、50  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param auditResult auditResult  
      * @param integer totalCount  
      */

    describeAuditResult(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeAuditResult');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeAuditResult');
          }
          if (opts.startTime === undefined || opts.startTime === null) {
               throw new Error('Missing the required parameter \'opts.startTime\' when calling describeAuditResult');
          }
          if (opts.endTime === undefined || opts.endTime === null) {
               throw new Error('Missing the required parameter \'opts.endTime\' when calling describeAuditResult');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.startTime !== undefined && opts.startTime !== null) {
               queryParams['startTime'] = opts.startTime
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               queryParams['endTime'] = opts.endTime
           }
           if (opts.dbName !== undefined && opts.dbName !== null) {
               queryParams['dbName'] = opts.dbName
           }
           if (opts.accountName !== undefined && opts.accountName !== null) {
               queryParams['accountName'] = opts.accountName
           }
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeAuditResult with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/audit:describeAuditResult', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查看指定地域下各种RDS数据库支持的可用区，不同类型的RDS支持的可用区不一样
      * @param {Object} opts - parameters
      * @param {string} opts.engine - RDS引擎类型，参见[枚举参数定义](../Enum-Definitions/Enum-Definitions.md) 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string azs  
      */

    describeAzs(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeAzs');
          }

         opts = opts || {};

          if (opts.engine === undefined || opts.engine === null) {
               throw new Error('Missing the required parameter \'opts.engine\' when calling describeAzs');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.engine !== undefined && opts.engine !== null) {
               queryParams['engine'] = opts.engine
           }

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeAzs with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/azs', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查看该RDS实例下所有备份的详细信息，返回的备份列表按照备份开始时间（backupStartTime）降序排列。
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS实例ID，唯一标识一个实例 
      * @param {integer} [opts.auto] - 查询备份类型，0为手动备份，1为自动备份，不传表示全部. &lt;br&gt;**- 测试参数，仅支持SQL Server，后续可能被其他参数取代**  optional 
      * @param {string} [opts.backupTypeFilter] - 返回backupType等于指定值的备份列表。full为全量备份，diff为增量备份&lt;br&gt;**- 测试参数，仅支持SQL Server，后续可能被其他参数取代**  optional 
      * @param {string} [opts.dbNameFilter] - 返回dbName等于指定值的备份列表，不传或为空返回全部&lt;br&gt;**- 测试参数，仅支持SQL Server，后续可能被其他参数取代**  optional 
      * @param {string} [opts.backupTimeRangeStartFilter] - 返回备份开始时间大于该时间的备份列表&lt;br&gt;**- 测试参数，仅支持SQL Server，后续可能被其他参数取代**  optional 
      * @param {string} [opts.backupTimeRangeEndFilter] - 返回备份开始时间小于等于该时间的备份列表&lt;br&gt;**- 测试参数，仅支持SQL Server，后续可能被其他参数取代**  optional 
      * @param {integer} opts.pageNumber - 显示数据的页码，默认为1，取值范围：[-1,∞)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页。 
      * @param {integer} opts.pageSize - 每页显示的数据条数，默认为10，取值范围：10、20、30、50、100 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param backup backup  
      * @param integer totalCount  总记录数
      */

    describeBackups(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeBackups');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeBackups');
          }
          if (opts.pageNumber === undefined || opts.pageNumber === null) {
               throw new Error('Missing the required parameter \'opts.pageNumber\' when calling describeBackups');
          }
          if (opts.pageSize === undefined || opts.pageSize === null) {
               throw new Error('Missing the required parameter \'opts.pageSize\' when calling describeBackups');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.instanceId !== undefined && opts.instanceId !== null) {
               queryParams['instanceId'] = opts.instanceId
           }
           if (opts.auto !== undefined && opts.auto !== null) {
               queryParams['auto'] = opts.auto
           }
           if (opts.backupTypeFilter !== undefined && opts.backupTypeFilter !== null) {
               queryParams['backupTypeFilter'] = opts.backupTypeFilter
           }
           if (opts.dbNameFilter !== undefined && opts.dbNameFilter !== null) {
               queryParams['dbNameFilter'] = opts.dbNameFilter
           }
           if (opts.backupTimeRangeStartFilter !== undefined && opts.backupTimeRangeStartFilter !== null) {
               queryParams['backupTimeRangeStartFilter'] = opts.backupTimeRangeStartFilter
           }
           if (opts.backupTimeRangeEndFilter !== undefined && opts.backupTimeRangeEndFilter !== null) {
               queryParams['backupTimeRangeEndFilter'] = opts.backupTimeRangeEndFilter
           }
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeBackups with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/backups', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  创建一个RDS实例全量备份，可以对整个实例或者部分数据库（仅SQL Server支持）进行全量备份。同一时间点，只能有一个正在运行的备份任务
      * @param {Object} opts - parameters
      * @param {string} [opts.instanceId] - RDS实例ID，唯一标识一个实例  optional 
      * @param {backupSpec} [opts.backupSpec] - 备份规格  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string backupId  备份Id
      */

    createBackup(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  createBackup');
          }

         opts = opts || {};


         let postBody =   {
          };
           if (opts.instanceId !== undefined && opts.instanceId !== null) {
               postBody['instanceId'] = opts.instanceId
           }
           if (opts.backupSpec !== undefined && opts.backupSpec !== null) {
               postBody['backupSpec'] = opts.backupSpec
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call createBackup with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/backups', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除RDS实例备份，仅允许删除用户生成的备份，系统自动备份不允许删除。
      * @param {Object} opts - parameters
      * @param {string} opts.backupId - 备份ID 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteBackup(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  deleteBackup');
          }

         opts = opts || {};

          if (opts.backupId === undefined || opts.backupId === null) {
               throw new Error('Missing the required parameter \'opts.backupId\' when calling deleteBackup');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'backupId': opts.backupId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteBackup with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/backups/{backupId}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  获取整个备份或备份中单个文件的下载链接。&lt;br&gt;- 当输入参数中有文件名时，获取该文件的下载链接。&lt;br&gt;- 输入参数中无文件名时，获取整个备份的下载链接。&lt;br&gt;由于备份机制的差异，使用该接口下载备份时，SQL Server必须输入文件名，每个文件逐一下载，不支持下载整个备份。SQL Server备份中的文件名（不包括后缀）即为备份的数据库名。例如文件名为my_test_db.bak，表示该文件是my_test_db数据库的备份。&lt;br&gt;MySQL可下载整个备份集，但不支持单个文件的下载。
      * @param {Object} opts - parameters
      * @param {string} opts.backupId - 备份ID 
      * @param {string} [opts.fileName] - 文件名称&lt;br&gt;- MySQL：不支持该参数&lt;br&gt;- SQL Server：必须输入该参数，指定该备份中需要获取下载链接的文件名称。备份中的文件名（不包括后缀）即为备份的数据库名。例如文件名为my_test_db.bak，表示该文件是my_test_db数据库的备份  optional 
      * @param {string} [opts.urlExpirationSecond] - 指定下载链接的过期时间，单位秒,缺省为86400秒，即24小时。&lt;br&gt;- MySQL：不支持该参数，只能是默认值&lt;br&gt;- SQL Server：支持  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string publicURL  公网下载链接，若当前不可下载，则为空串
      * @param string internalURL  内网下载链接，若当前不可下载，则为空串
      */

    describeBackupDownloadURL(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeBackupDownloadURL');
          }

         opts = opts || {};

          if (opts.backupId === undefined || opts.backupId === null) {
               throw new Error('Missing the required parameter \'opts.backupId\' when calling describeBackupDownloadURL');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.fileName !== undefined && opts.fileName !== null) {
               queryParams['fileName'] = opts.fileName
           }
           if (opts.urlExpirationSecond !== undefined && opts.urlExpirationSecond !== null) {
               queryParams['urlExpirationSecond'] = opts.urlExpirationSecond
           }

          let pathParams = {
               'regionId': regionId,
               'backupId': opts.backupId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeBackupDownloadURL with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/backups/{backupId}:describeBackupDownloadURL', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询跨地域备份同步服务列表。
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNumber] - 显示数据的页码，默认为1，取值范围：[1,∞)，页码超过总页数时，显示最后一页，用于查询列表的接口  optional 
      * @param {integer} [opts.pageSize] - 每页显示的数据条数，默认为10，取值范围：10、20、30、50、100  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param backupSynchronicity backupSynchronicities  
      * @param integer totalCount  
      */

    describeBackupSynchronicities(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeBackupSynchronicities');
          }

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeBackupSynchronicities with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/backupSynchronicities', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  创建一个跨地域备份同步服务。
      * @param {Object} opts - parameters
      * @param {} opts.instanceId - 源实例ID 
      * @param {} opts.destRegion - 备份同步的目标地域 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string serviceId  跨地域备份同步服务ID
      */

    createBackupSynchronicity(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  createBackupSynchronicity');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling createBackupSynchronicity');
          }
          if (opts.destRegion === undefined || opts.destRegion === null) {
               throw new Error('Missing the required parameter \'opts.destRegion\' when calling createBackupSynchronicity');
          }

         let postBody =   {
          };
           if (opts.instanceId !== undefined && opts.instanceId !== null) {
               postBody['instanceId'] = opts.instanceId
           }
           if (opts.destRegion !== undefined && opts.destRegion !== null) {
               postBody['destRegion'] = opts.destRegion
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call createBackupSynchronicity with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/backupSynchronicities', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除一个跨地域备份同步服务。
      * @param {Object} opts - parameters
      * @param {string} opts.serviceId - 跨地域备份同步服务ID 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteBackupSynchronicity(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  deleteBackupSynchronicity');
          }

         opts = opts || {};

          if (opts.serviceId === undefined || opts.serviceId === null) {
               throw new Error('Missing the required parameter \'opts.serviceId\' when calling deleteBackupSynchronicity');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'serviceId': opts.serviceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteBackupSynchronicity with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/backupSynchronicities/{serviceId}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  获取MySQL实例中binlog的详细信息&lt;br&gt;- 仅支持MySQL
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {integer} [opts.pageNumber] - 显示数据的页码，默认为1，取值范围：[-1,∞)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页。  optional 
      * @param {integer} [opts.pageSize] - 每页显示的数据条数，默认为10，取值范围：10、20、30、50、100  optional 
      * @param {string} [opts.startTime] - 查询开始时间，格式为：YYYY-MM-DD HH:mm:ss，开始时间到结束时间不超过三天  optional 
      * @param {string} [opts.endTime] - 查询结束时间，格式为：YYYY-MM-DD HH:mm:ss，开始时间到结束时间不超过三天  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer totalCount  总记录数
      * @param binlog binlogs  
      */

    describeBinlogs(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeBinlogs');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeBinlogs');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
           if (opts.startTime !== undefined && opts.startTime !== null) {
               queryParams['startTime'] = opts.startTime
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               queryParams['endTime'] = opts.endTime
           }

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeBinlogs with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/binlogs', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  获取MySQL实例的binlog的下载链接&lt;br&gt;- 仅支持MySQL
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.binlogBackupId - binlog的备份ID，可以通过describeBinlogs获得 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string publicURL  公网下载链接
      * @param string internalURL  内网下载链接
      */

    describeBinlogDownloadURL(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeBinlogDownloadURL');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeBinlogDownloadURL');
          }
          if (opts.binlogBackupId === undefined || opts.binlogBackupId === null) {
               throw new Error('Missing the required parameter \'opts.binlogBackupId\' when calling describeBinlogDownloadURL');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId ,
               'binlogBackupId': opts.binlogBackupId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeBinlogDownloadURL with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/binlogs/{binlogBackupId}:describeBinlogDownloadURL', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  清理本地的binlog并释放空间。 系统只会清理已经备份到存储的binlog，不会影响MySQL实例的备份恢复&lt;br&gt;- 仅支持MySQL
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    clearBinlogs(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  clearBinlogs');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling clearBinlogs');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call clearBinlogs with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/binlogs:clearBinlogs', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  获取当前实例的所有数据库详细信息的列表
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} [opts.dbName] - 数据库名。如果不指定数据库名，则返回所有数据库列表&lt;br&gt;- **MySQL：不支持该字段**&lt;br&gt;- **SQL Server：支持该字段**  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param database databases  
      */

    describeDatabases(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeDatabases');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeDatabases');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.dbName !== undefined && opts.dbName !== null) {
               queryParams['dbName'] = opts.dbName
           }

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeDatabases with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/databases', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  创建一个数据库。 为了实例的管理和数据恢复，RDS对用户权限进行了限制，用户仅能通过控制台或本接口创建数据库
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {} opts.dbName - 数据库名，数据库名称的限制请参考[帮助中心文档](../../../documentation/Cloud-Database-and-Cache/RDS/Introduction/Restrictions/SQLServer-Restrictions.md) 
      * @param {} opts.characterSetName - 数据库的字符集名，当前支持的字符集请查看[枚举参数定义](../Enum-Definitions/Enum-Definitions.md) 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    createDatabase(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  createDatabase');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling createDatabase');
          }
          if (opts.dbName === undefined || opts.dbName === null) {
               throw new Error('Missing the required parameter \'opts.dbName\' when calling createDatabase');
          }
          if (opts.characterSetName === undefined || opts.characterSetName === null) {
               throw new Error('Missing the required parameter \'opts.characterSetName\' when calling createDatabase');
          }

         let postBody =   {
          };
           if (opts.dbName !== undefined && opts.dbName !== null) {
               postBody['dbName'] = opts.dbName
           }
           if (opts.characterSetName !== undefined && opts.characterSetName !== null) {
               postBody['characterSetName'] = opts.characterSetName
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call createDatabase with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/databases', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  从RDS实例中删除数据库。为便于管理和数据恢复，RDS对用户权限进行了控制，用户仅能通过控制台或本接口删除数据库 [MFA enabled]
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.dbName - 库名称 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteDatabase(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  deleteDatabase');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling deleteDatabase');
          }
          if (opts.dbName === undefined || opts.dbName === null) {
               throw new Error('Missing the required parameter \'opts.dbName\' when calling deleteDatabase');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId ,
               'dbName': opts.dbName 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteDatabase with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/databases/{dbName}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  从备份中恢复单个数据库，支持从其他实例（但必须是同一个账号下的实例）备份中恢复。例如可以从生产环境的数据库实例的备份恢复到测试环境的数据库中。&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.dbName - 库名称 
      * @param {} opts.backupId - 备份ID，可从备份查询接口describeBackups获取 
      * @param {} opts.backupFileName - 指定该备份中用于恢复数据库的文件名称。通常情况下文件名（不包括后缀）即为备份的数据库名。例如文件名为my_test_db.bak，表示该文件是my_test_db数据库的备份 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    restoreDatabaseFromBackup(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  restoreDatabaseFromBackup');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling restoreDatabaseFromBackup');
          }
          if (opts.dbName === undefined || opts.dbName === null) {
               throw new Error('Missing the required parameter \'opts.dbName\' when calling restoreDatabaseFromBackup');
          }
          if (opts.backupId === undefined || opts.backupId === null) {
               throw new Error('Missing the required parameter \'opts.backupId\' when calling restoreDatabaseFromBackup');
          }
          if (opts.backupFileName === undefined || opts.backupFileName === null) {
               throw new Error('Missing the required parameter \'opts.backupFileName\' when calling restoreDatabaseFromBackup');
          }

         let postBody =   {
          };
           if (opts.backupId !== undefined && opts.backupId !== null) {
               postBody['backupId'] = opts.backupId
           }
           if (opts.backupFileName !== undefined && opts.backupFileName !== null) {
               postBody['backupFileName'] = opts.backupFileName
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId ,
               'dbName': opts.dbName 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call restoreDatabaseFromBackup with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/databases/{dbName}:restoreDatabaseFromBackup', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  从用户通过单库上云工具上传到云上的备份文件中恢复单个数据库&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.dbName - 库名称 
      * @param {} [opts.sharedFileGid] - 共享文件的全局ID，可从上传文件查询接口[describeImportFiles](../import/describeImportFiles.md)获取；如果该文件不是共享文件，则不用输入该参数  optional 
      * @param {} opts.fileName - 用户上传的备份文件名称（包括文件后缀名），例如mydb1.bak 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    restoreDatabaseFromFile(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  restoreDatabaseFromFile');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling restoreDatabaseFromFile');
          }
          if (opts.dbName === undefined || opts.dbName === null) {
               throw new Error('Missing the required parameter \'opts.dbName\' when calling restoreDatabaseFromFile');
          }
          if (opts.fileName === undefined || opts.fileName === null) {
               throw new Error('Missing the required parameter \'opts.fileName\' when calling restoreDatabaseFromFile');
          }

         let postBody =   {
          };
           if (opts.sharedFileGid !== undefined && opts.sharedFileGid !== null) {
               postBody['sharedFileGid'] = opts.sharedFileGid
           }
           if (opts.fileName !== undefined && opts.fileName !== null) {
               postBody['fileName'] = opts.fileName
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId ,
               'dbName': opts.dbName 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call restoreDatabaseFromFile with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/databases/{dbName}:restoreDatabaseFromFile', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  从上传到OSS的备份文件中恢复单个数据库&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.dbName - 库名称 
      * @param {} opts.ossURL - 用户上传到对象存储OSS上的备份文件的路径。&lt;br&gt;例如用户备份上传的bucket为db_backup，文件为test_server/db1.bak，那么ossULR为db_backup/test_server/db1.bak。&lt;br&gt;**授权说明**：需要授予账户ID：785455908940，对这个bucket的读取权限，具体步骤可以查看[文档](https://docs.jdcloud.com/cn/object-storage-service/set-bucket-policy-2)。 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    restoreDatabaseFromOSS(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  restoreDatabaseFromOSS');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling restoreDatabaseFromOSS');
          }
          if (opts.dbName === undefined || opts.dbName === null) {
               throw new Error('Missing the required parameter \'opts.dbName\' when calling restoreDatabaseFromOSS');
          }
          if (opts.ossURL === undefined || opts.ossURL === null) {
               throw new Error('Missing the required parameter \'opts.ossURL\' when calling restoreDatabaseFromOSS');
          }

         let postBody =   {
          };
           if (opts.ossURL !== undefined && opts.ossURL !== null) {
               postBody['ossURL'] = opts.ossURL
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId ,
               'dbName': opts.dbName 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call restoreDatabaseFromOSS with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/databases/{dbName}:restoreDatabaseFromOSS', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  获取SQL Server 错误日志及下载信息&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param errorLog errorLogs  
      */

    describeErrorLogs(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeErrorLogs');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeErrorLogs');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeErrorLogs with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/errorLogs', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  获取用户通过单库上云工具上传到该实例上的文件列表&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param importFile importFiles  
      */

    describeImportFiles(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeImportFiles');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeImportFiles');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeImportFiles with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/importFiles', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  获取单库上云工具上传文件的需要的Key。单库上云工具需要正确的key值方能连接到京东云&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string key  上传文件需要用到的Key
      */

    getUploadKey(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  getUploadKey');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling getUploadKey');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call getUploadKey with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/importFiles:getUploadKey', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  设置或取消上传文件是否共享给同一账号下的其他实例。缺省情况下，文件仅在上传的实例上可见并可导入，其他实例不可见不可导入。如果需要该文件在其他实例上也可导入，可将此文件设置为共享&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.fileName - 单库上云文件名 
      * @param {} opts.shared - 文件是否共享&lt;br&gt;true:共享&lt;br&gt;false:不共享 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    setImportFileShared(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  setImportFileShared');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling setImportFileShared');
          }
          if (opts.fileName === undefined || opts.fileName === null) {
               throw new Error('Missing the required parameter \'opts.fileName\' when calling setImportFileShared');
          }
          if (opts.shared === undefined || opts.shared === null) {
               throw new Error('Missing the required parameter \'opts.shared\' when calling setImportFileShared');
          }

         let postBody =   {
          };
           if (opts.shared !== undefined && opts.shared !== null) {
               postBody['shared'] = opts.shared
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId ,
               'fileName': opts.fileName 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call setImportFileShared with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/importFiles/{fileName}:setShared', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除用户通过单库上云工具上传的数据库备份文件&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.fileName - 单库上云文件名 
      * @param {} [opts.sharedFileGid] - 共享文件的全局ID，可从上传文件查询接口describeImportFiles中获取；如果该文件不是共享文件，则无须输入该字段  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteImportFile(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  deleteImportFile');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling deleteImportFile');
          }
          if (opts.fileName === undefined || opts.fileName === null) {
               throw new Error('Missing the required parameter \'opts.fileName\' when calling deleteImportFile');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.sharedFileGid !== undefined && opts.sharedFileGid !== null) {
               queryParams['sharedFileGid'] = opts.sharedFileGid
           }

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId ,
               'fileName': opts.fileName 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteImportFile with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/importFiles/{fileName}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  获取当前账号下所有RDS实例及MySQL只读实例的概要信息，例如实例类型，版本，计费信息等
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageNumber] - 显示数据的页码，默认为1，取值范围：[-1,∞)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页;  optional 
      * @param {integer} [opts.pageSize] - 每页显示的数据条数，默认为100，取值范围：[10,100]，用于查询列表的接口  optional 
      * @param {filter} [opts.filters] - 过滤参数，多个过滤参数之间的关系为“与”(and)
支持以下属性的过滤：
instanceId, 支持operator选项：eq
instanceName, 支持operator选项：eq
engine, 支持operator选项：eq
engineVersion, 支持operator选项：eq
instanceStatus, 支持operator选项：eq
chargeMode, 支持operator选项：eq
  optional 
      * @param {tagFilter} [opts.tagFilters] - 资源标签  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param dBInstance dbInstances  
      * @param integer totalCount  
      */

    describeInstances(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeInstances');
          }

         opts = opts || {};


          let postBody = null;
          let queryParams = {
          };
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }
          Object.assign(queryParams, this.buildFilterParam(opts.filters, 'filters'));
          Object.assign(queryParams, this.buildTagFilterParam(opts.tagFilters, 'tagFilters'));

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeInstances with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  创建一个RDS实例，用户可以使用相应的数据库客户端或者应用程序通过域名和端口链接到该RDS实例上，进行操作。
      * @param {Object} opts - parameters
      * @param {dBInstanceSpec} opts.instanceSpec - 新建实例规格 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string instanceId  
      */

    createInstance(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  createInstance');
          }

         opts = opts || {};

          if (opts.instanceSpec === undefined || opts.instanceSpec === null) {
               throw new Error('Missing the required parameter \'opts.instanceSpec\' when calling createInstance');
          }

         let postBody =   {
          };
           if (opts.instanceSpec !== undefined && opts.instanceSpec !== null) {
               postBody['instanceSpec'] = opts.instanceSpec
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call createInstance with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询RDS实例（MySQL、SQL Server等）的详细信息以及MySQL只读实例详细信息
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param dBInstanceAttribute dbInstanceAttributes  
      */

    describeInstanceAttributes(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeInstanceAttributes');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeInstanceAttributes');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeInstanceAttributes with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除一个RDS实例或者MySQL的只读实例。删除MySQL主实例时，会同时将对应的MySQL只读实例也删除 [MFA enabled]
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteInstance(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  deleteInstance');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling deleteInstance');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteInstance with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查看RDS实例备份策略。根据数据库类型的不同，支持的备份策略也略有差异，具体请看返回参数中的详细说明
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string startWindow  自动备份开始时间窗口，范围00:00-23:59，时间范围差不得小于30分钟。&lt;br&gt;例如：00:00-01:00，表示0点到1点开始进行数据库自动备份，备份完成时间则跟实例大小有关，不一定在这个时间范围中
      * @param integer retentionPeriod  自动备份保留周期，单位天,缺省为7天，范围7-730
      * @param integer cycleMode  自动备份循环模式&lt;br&gt;1:表示每天都是全量备份&lt;br&gt;2:表示自动备份按照全量、增量、增量这样的方式进行，例如第1天是全量备份，第2、3天是增量备份；第4天又是全量备份，以此类推.&lt;br&gt;- **SQL Server支持**&lt;br&gt;- **MySQL不支持**
      * @param string backupBinlog  是否备份binlog&lt;br&gt;true:表示备份&lt;br&gt;false:表示不备份&lt;br&gt; - **SQL Server不支持**&lt;br&gt;- **MySQL支持**
      */

    describeBackupPolicy(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeBackupPolicy');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeBackupPolicy');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeBackupPolicy with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}:describeBackupPolicy', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  修改RDS实例备份策略，目前仅支持用户修改“自动备份开始时间窗口”这个参数，其他参数暂不开放修改
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {} [opts.startWindow] - 自动备份开始时间窗口,例如：00:00-01:00，表示0点到1点开始进行数据库自动备份，备份完成时间则跟实例大小有关，不一定在这个时间范围中&lt;br&gt;SQL Server:范围00:00-23:59，时间范围差不得小于30分钟。&lt;br&gt;MySQL,只能是以下取值:&lt;br&gt;00:00-01:00&lt;br&gt;01:00-02:00&lt;br&gt;......&lt;br&gt;23:00-24:00  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    modifyBackupPolicy(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  modifyBackupPolicy');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling modifyBackupPolicy');
          }

         let postBody =   {
          };
           if (opts.startWindow !== undefined && opts.startWindow !== null) {
               postBody['startWindow'] = opts.startWindow
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call modifyBackupPolicy with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}:modifyBackupPolicy', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  修改实例名称，可支持中文，实例名的具体规则可参见帮助中心文档:[名称及密码限制](../../../documentation/Cloud-Database-and-Cache/RDS/Introduction/Restrictions/SQLServer-Restrictions.md)
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {} opts.instanceName - 实例名称，名称支持中文，实例名的具体规则可参见帮助中心文档:[名称及密码限制](../../../documentation/Cloud-Database-and-Cache/RDS/Introduction/Restrictions/SQLServer-Restrictions.md) 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    modifyInstanceName(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  modifyInstanceName');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling modifyInstanceName');
          }
          if (opts.instanceName === undefined || opts.instanceName === null) {
               throw new Error('Missing the required parameter \'opts.instanceName\' when calling modifyInstanceName');
          }

         let postBody =   {
          };
           if (opts.instanceName !== undefined && opts.instanceName !== null) {
               postBody['instanceName'] = opts.instanceName
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call modifyInstanceName with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}:modifyInstanceName', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  对RDS实例进行主备切换。&lt;br&gt;注意：如果实例正在进行备份，那么主备切换将会终止备份操作。可以查看备份策略中的备份开始时间确认是否有备份正在运行。如果确实需要在实例备份时进行主备切换，建议切换完成 后，手工进行一次实例的全备&lt;br&gt;对于SQL Server，主备切换后30分钟内，不支持按时间点恢复/创建，例如在10:05分用户进行了主备切换，那么10:05 ~ 10:35这个时间段不能进行按时间点恢复/创建。&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    failoverInstance(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  failoverInstance');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling failoverInstance');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call failoverInstance with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}:failoverInstance', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  重启RDS实例，例如修改了一些配置参数后，需要重启实例才能生效。可以结合主备切换的功能，轮流重启备机，降低对业务的影响&lt;br&gt;**注意：如果实例正在进行备份，那么重启主实例将会终止备份操作。** 可以查看备份策略中的备份开始时间确认是否有备份正在运行。如果确实需要在实例备份时重启主实例，建议重启后，手工进行一次实例的全备。
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {} [opts.rebootMaster] - 是否重启主节点。&lt;br&gt; - 仅SQL Server 支持该参数  optional 
      * @param {} [opts.rebootSlave] - 是否重启备节点。&lt;br&gt; - 仅SQL Server 支持该参数  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    rebootInstance(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  rebootInstance');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling rebootInstance');
          }

         let postBody =   {
          };
           if (opts.rebootMaster !== undefined && opts.rebootMaster !== null) {
               postBody['rebootMaster'] = opts.rebootMaster
           }
           if (opts.rebootSlave !== undefined && opts.rebootSlave !== null) {
               postBody['rebootSlave'] = opts.rebootSlave
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call rebootInstance with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}:rebootInstance', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  开启RDS实例的外网访问功能。开启后，用户可以通过internet访问RDS实例
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    enableInternetAccess(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  enableInternetAccess');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling enableInternetAccess');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call enableInternetAccess with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}:enableInternetAccess', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  关闭RDS实例的外网访问功能。关闭后，用户无法通过Internet访问RDS，但可以在京东云内网通过内网域名访问
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    disableInternetAccess(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  disableInternetAccess');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling disableInternetAccess');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call disableInternetAccess with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}:disableInternetAccess', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  使用实例的全量备份覆盖恢复当前实例&lt;br&gt;- 仅支持MySQL
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {} [opts.backupId] - 用于恢复的备份Id，仅限于本实例生成的备份  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    restoreInstance(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  restoreInstance');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling restoreInstance');
          }

         let postBody =   {
          };
           if (opts.backupId !== undefined && opts.backupId !== null) {
               postBody['backupId'] = opts.backupId
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call restoreInstance with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}:restoreInstance', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  根据源实例全量备份创建一个新实例，新实例的数据跟源实例在创建备份时的数据状态一样。&lt;br&gt;例如根据源实例A的一个全量备份“mybak”新建一个实例B，该备份是在“‘2018-8-18 03:23:54”创建的。那么新建实例B的数据状态跟实例A‘2018-8-18 03:23:54’的状态一致
      * @param {Object} opts - parameters
      * @param {string} opts.backupId - 备份ID 
      * @param {string} opts.engine - 标识是创建什么类型的实例，例如MySQL，SQL Server等,具体可参见文档[枚举参数定义](../Enum-Definitions/Enum-Definitions.md)&lt;br&gt;**注意：备份来源实例的engine和要创建的实例的engine必须一致** 
      * @param {restoredNewDBInstanceSpec} opts.instanceSpec - 新建实例规格 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string instanceId  
      */

    createInstanceFromBackup(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  createInstanceFromBackup');
          }

         opts = opts || {};

          if (opts.backupId === undefined || opts.backupId === null) {
               throw new Error('Missing the required parameter \'opts.backupId\' when calling createInstanceFromBackup');
          }
          if (opts.engine === undefined || opts.engine === null) {
               throw new Error('Missing the required parameter \'opts.engine\' when calling createInstanceFromBackup');
          }
          if (opts.instanceSpec === undefined || opts.instanceSpec === null) {
               throw new Error('Missing the required parameter \'opts.instanceSpec\' when calling createInstanceFromBackup');
          }

         let postBody =   {
          };
           if (opts.backupId !== undefined && opts.backupId !== null) {
               postBody['backupId'] = opts.backupId
           }
           if (opts.engine !== undefined && opts.engine !== null) {
               postBody['engine'] = opts.engine
           }
           if (opts.instanceSpec !== undefined && opts.instanceSpec !== null) {
               postBody['instanceSpec'] = opts.instanceSpec
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call createInstanceFromBackup with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances:createInstanceFromBackup', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  实例扩容，支持升级实例的CPU，内存及磁盘。目前暂不支持实例降配&lt;br&gt;- 仅支持MySQL
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.newInstanceClass - 扩容后实例规格 
      * @param {integer} opts.newInstanceStorageGB - 扩容后实例磁盘大小 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string orderId  生成的订单号
      */

    modifyInstanceSpec(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  modifyInstanceSpec');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling modifyInstanceSpec');
          }
          if (opts.newInstanceClass === undefined || opts.newInstanceClass === null) {
               throw new Error('Missing the required parameter \'opts.newInstanceClass\' when calling modifyInstanceSpec');
          }
          if (opts.newInstanceStorageGB === undefined || opts.newInstanceStorageGB === null) {
               throw new Error('Missing the required parameter \'opts.newInstanceStorageGB\' when calling modifyInstanceSpec');
          }

         let postBody =   {
          };
           if (opts.newInstanceClass !== undefined && opts.newInstanceClass !== null) {
               postBody['newInstanceClass'] = opts.newInstanceClass
           }
           if (opts.newInstanceStorageGB !== undefined && opts.newInstanceStorageGB !== null) {
               postBody['newInstanceStorageGB'] = opts.newInstanceStorageGB
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call modifyInstanceSpec with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}:modifyInstanceSpec', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  根据源实例备份创建一个新实例，并通过追加日志的方式，将新实例的数据恢复到跟源实例指定时间点的数据状态一样。&lt;br&gt;例如根据实例A在“2018-06-18 23:00:00”时间点创建一个实例B，就是新建一个实例B，该实例B的数据跟实例A在“2018-06-18 23:00:00”这个时间点的数据完全一致。&lt;br&gt;对于SQL Server，主备切换后30分钟内，不支持按时间点恢复/创建，例如在10:05分用户进行了主备切换，那么10:05 ~ 10:35这个时间段不能进行按时间点恢复/创建。
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.restoreTime - 根据源实例的哪个时间点创建新实例 
      * @param {restoredNewDBInstanceSpec} opts.instanceSpec - 新建实例规格 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string instanceId  新创建的实例ID
      */

    createInstanceByTime(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  createInstanceByTime');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling createInstanceByTime');
          }
          if (opts.restoreTime === undefined || opts.restoreTime === null) {
               throw new Error('Missing the required parameter \'opts.restoreTime\' when calling createInstanceByTime');
          }
          if (opts.instanceSpec === undefined || opts.instanceSpec === null) {
               throw new Error('Missing the required parameter \'opts.instanceSpec\' when calling createInstanceByTime');
          }

         let postBody =   {
          };
           if (opts.restoreTime !== undefined && opts.restoreTime !== null) {
               postBody['restoreTime'] = opts.restoreTime
           }
           if (opts.instanceSpec !== undefined && opts.instanceSpec !== null) {
               postBody['instanceSpec'] = opts.instanceSpec
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call createInstanceByTime with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}:createInstanceByTime', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  修改MySQL实例的连接模式：标准模式(standard) 和高安全模式(security).&lt;br&gt;- **标准模式**：响应时间短，但没有 SQL 审计和拦截的能力。&lt;br&gt;- **高安全模式**：具备一定的 SQL注入拦截能力（通过分析表达式、关键系统函数等来实现防御 SQL 注入攻击），并可开启 SQL 审计，但会增加一定的响应时间。&lt;br&gt;- 仅支持MySQL
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.connectionMode - 连接模式&lt;br&gt; - standard：标准模式(缺省)，响应时间短，但没有 SQL 审计和拦截的能力 &lt;br&gt;- security：高安全模式，具备一定的 SQL注入拦截能力，并可开启 SQL 审计，但会增加一定的响应时间 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    modifyConnectionMode(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  modifyConnectionMode');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling modifyConnectionMode');
          }
          if (opts.connectionMode === undefined || opts.connectionMode === null) {
               throw new Error('Missing the required parameter \'opts.connectionMode\' when calling modifyConnectionMode');
          }

         let postBody =   {
          };
           if (opts.connectionMode !== undefined && opts.connectionMode !== null) {
               postBody['connectionMode'] = opts.connectionMode
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call modifyConnectionMode with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}:modifyConnectionMode', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  获取SQL Server实例按时间点恢复/创建时，可恢复到的最后的一个时间点&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string latestRestoreTime  实例按时间点恢复时,可恢复到的最后的一个时间点
      */

    describeLatestRestoreTime(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeLatestRestoreTime');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeLatestRestoreTime');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeLatestRestoreTime with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}:describeLatestRestoreTime', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  开启数据库的高安全模式&lt;br&gt;- 仅支持MySQL
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - Instance ID 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    enableIntercept(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  enableIntercept');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling enableIntercept');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call enableIntercept with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/intercept:enableIntercept', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  关闭数据库的高安全模式&lt;br&gt;- 仅支持MySQL
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - Instance ID 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    disableIntercept(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  disableIntercept');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling disableIntercept');
          }

         let postBody =   {
          };

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call disableIntercept with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/intercept:disableIntercept', 'POST', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查看SQL Server实例的配置参数&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - Instance ID 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param dBInstanceParameter parameters  
      */

    describeParameters(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeParameters');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeParameters');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeParameters with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/parameters', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  修改SQL Server数实例的配置参数。 部分参数修改后，需要重启才能生效，具体可以参考微软的相关文档&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - Instance ID 
      * @param {array} opts.parameters - 修改的实例参数 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    modifyParameters(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  modifyParameters');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling modifyParameters');
          }
          if (opts.parameters === undefined || opts.parameters === null) {
               throw new Error('Missing the required parameter \'opts.parameters\' when calling modifyParameters');
          }

         let postBody =   {
          };
           if (opts.parameters !== undefined && opts.parameters !== null) {
               postBody['parameters'] = opts.parameters
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call modifyParameters with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/parameters', 'PUT', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  删除参数组&lt;br&gt;- 仅支持MySQL
      * @param {Object} opts - parameters
      * @param {string} opts.parameterGroupId - Parameter Group ID 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    deleteParameterGroup(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  deleteParameterGroup');
          }

         opts = opts || {};

          if (opts.parameterGroupId === undefined || opts.parameterGroupId === null) {
               throw new Error('Missing the required parameter \'opts.parameterGroupId\' when calling deleteParameterGroup');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'parameterGroupId': opts.parameterGroupId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call deleteParameterGroup with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/parameterGroups/{parameterGroupId}', 'DELETE', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  修改参数组名称，描述&lt;br&gt;- 仅支持MySQL
      * @param {Object} opts - parameters
      * @param {string} opts.parameterGroupId - Parameter Group ID 
      * @param {} opts.parameterGroupName - 参数组名称 
      * @param {} [opts.description] - 参数组描述  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    modifyParameterGroupAttribute(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  modifyParameterGroupAttribute');
          }

         opts = opts || {};

          if (opts.parameterGroupId === undefined || opts.parameterGroupId === null) {
               throw new Error('Missing the required parameter \'opts.parameterGroupId\' when calling modifyParameterGroupAttribute');
          }
          if (opts.parameterGroupName === undefined || opts.parameterGroupName === null) {
               throw new Error('Missing the required parameter \'opts.parameterGroupName\' when calling modifyParameterGroupAttribute');
          }

         let postBody =   {
          };
           if (opts.parameterGroupName !== undefined && opts.parameterGroupName !== null) {
               postBody['parameterGroupName'] = opts.parameterGroupName
           }
           if (opts.description !== undefined && opts.description !== null) {
               postBody['description'] = opts.description
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'parameterGroupId': opts.parameterGroupId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call modifyParameterGroupAttribute with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/parameterGroups/{parameterGroupId}:modifyParameterGroupAttribute', 'PUT', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  根据用户定义的查询条件，获取索引性能的统计信息，并提供缺失索引及索引创建建议。用户可以根据这些信息查找与索引相关的性能瓶颈，并进行优化。&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.queryType - 查询类型，不同的查询类型按照相应的字段从高到低返回结果。&lt;br&gt;支持如下类型：&lt;br&gt;Missing：缺失索引&lt;br&gt;Size：索引大小，单位KB&lt;br&gt;Updates：索引更新次数&lt;br&gt;Scans：表扫描次数&lt;br&gt;Used：最少使用&lt;br&gt; 
      * @param {string} [opts.db] - 需要查询的数据库名，多个数据库名之间用英文逗号分隔，默认所有数据库  optional 
      * @param {integer} [opts.pageNumber] - 显示数据的页码，默认为1，取值范围：[-1,1000)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页。  optional 
      * @param {integer} [opts.pageSize] - 每页显示的数据条数，默认为50，取值范围：[1,100]，只能为10的倍数，用于查询列表的接口  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param missingIndexResult missingIndexResult  
      * @param indexPerformanceResult indexPerformanceResult  
      * @param integer totalCount  总记录条数
      * @param integer pageNumber  当前数据的页码
      * @param integer pageSize  每页显示的数据条数
      */

    describeIndexPerformance(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeIndexPerformance');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeIndexPerformance');
          }
          if (opts.queryType === undefined || opts.queryType === null) {
               throw new Error('Missing the required parameter \'opts.queryType\' when calling describeIndexPerformance');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.queryType !== undefined && opts.queryType !== null) {
               queryParams['queryType'] = opts.queryType
           }
           if (opts.db !== undefined && opts.db !== null) {
               queryParams['db'] = opts.db
           }
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeIndexPerformance with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/performance:describeIndexPerformance', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  根据用户定义的查询条件，获取SQL执行的性能统计信息，例如慢SQL等。用户可以根据这些信息查找与SQL执行相关的性能瓶颈，并进行优化。&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.queryType - 查询类型，不同的查询类型按照相应的字段从高到低返回结果。&lt;br&gt;支持如下类型：&lt;br&gt;ExecutionCount：执行次数&lt;br&gt;LastRows：上次返回行数&lt;br&gt;ElapsedTime：平均执行时间&lt;br&gt;CPUTime：平均CPU时间&lt;br&gt;LogicalReads：平均逻辑读&lt;br&gt;LogicalWrites：平均逻辑写&lt;br&gt;PhysicalReads：平均物理读&lt;br&gt; 
      * @param {integer} [opts.threshold] - 只返回查询条件大于等于threshold的记录，默认为0  optional 
      * @param {integer} [opts.pageNumber] - 显示数据的页码，默认为1，取值范围：[-1,1000]。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页。  optional 
      * @param {integer} [opts.pageSize] - 每页显示的数据条数，默认为50，取值范围：[1,100]，只能为10的倍数，用于查询列表的接口  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param queryPerformanceResult queryPerformanceResult  
      * @param integer totalCount  总记录条数
      * @param integer pageNumber  当前数据的页码
      * @param integer pageSize  每页显示的数据条数
      */

    describeQueryPerformance(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeQueryPerformance');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeQueryPerformance');
          }
          if (opts.queryType === undefined || opts.queryType === null) {
               throw new Error('Missing the required parameter \'opts.queryType\' when calling describeQueryPerformance');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.queryType !== undefined && opts.queryType !== null) {
               queryParams['queryType'] = opts.queryType
           }
           if (opts.threshold !== undefined && opts.threshold !== null) {
               queryParams['threshold'] = opts.threshold
           }
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeQueryPerformance with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/performance:describeQueryPerformance', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询MySQL实例的慢日志的详细信息。&lt;br&gt;- 仅支持MySQL
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.startTime - 慢日志开始时间,格式为：YYYY-MM-DD HH:mm:ss,开始时间到结束时间不能大于30天,结束时间不能大于当前时间 
      * @param {string} opts.endTime - 慢日志结束时间,格式为：YYYY-MM-DD HH:mm:ss,开始时间到结束时间不能大于30天,结束时间不能大于当前时间 
      * @param {string} [opts.dbName] - 查询哪个数据库的慢日志，不填表示返回所有数据库的慢日志  optional 
      * @param {integer} [opts.pageNumber] - 显示数据的页码，默认为1，取值范围：[-1,1000)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页。  optional 
      * @param {integer} [opts.pageSize] - 每页显示的数据条数，默认为10，取值范围：10、20、30、50、100  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param slowLogAttributes slowLogsAttributes  
      * @param integer totalCount  总记录条数
      */

    describeSlowLogAttributes(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeSlowLogAttributes');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeSlowLogAttributes');
          }
          if (opts.startTime === undefined || opts.startTime === null) {
               throw new Error('Missing the required parameter \'opts.startTime\' when calling describeSlowLogAttributes');
          }
          if (opts.endTime === undefined || opts.endTime === null) {
               throw new Error('Missing the required parameter \'opts.endTime\' when calling describeSlowLogAttributes');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.startTime !== undefined && opts.startTime !== null) {
               queryParams['startTime'] = opts.startTime
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               queryParams['endTime'] = opts.endTime
           }
           if (opts.dbName !== undefined && opts.dbName !== null) {
               queryParams['dbName'] = opts.dbName
           }
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeSlowLogAttributes with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/performance:describeSlowLogAttributes', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查询MySQL实例的慢日志的概要信息。&lt;br&gt;- 仅支持MySQL
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.startTime - 慢日志开始时间,格式为：YYYY-MM-DD HH:mm:ss,开始时间到结束时间不能大于30天,结束时间不能大于当前时间 
      * @param {string} opts.endTime - 慢日志结束时间,格式为：YYYY-MM-DD HH:mm:ss,开始时间到结束时间不能大于30天,结束时间不能大于当前时间 
      * @param {string} [opts.dbName] - 查询哪个数据库的慢日志，不填表示返回所有数据库的慢日志  optional 
      * @param {integer} [opts.pageNumber] - 显示数据的页码，默认为1，取值范围：[-1,1000)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页。  optional 
      * @param {integer} [opts.pageSize] - 每页显示的数据条数，默认为10，取值范围：10、20、30、50、100  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param slowLogDigest slowLogs  
      * @param integer totalCount  总记录条数
      */

    describeSlowLogs(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeSlowLogs');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeSlowLogs');
          }
          if (opts.startTime === undefined || opts.startTime === null) {
               throw new Error('Missing the required parameter \'opts.startTime\' when calling describeSlowLogs');
          }
          if (opts.endTime === undefined || opts.endTime === null) {
               throw new Error('Missing the required parameter \'opts.endTime\' when calling describeSlowLogs');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.startTime !== undefined && opts.startTime !== null) {
               queryParams['startTime'] = opts.startTime
           }
           if (opts.endTime !== undefined && opts.endTime !== null) {
               queryParams['endTime'] = opts.endTime
           }
           if (opts.dbName !== undefined && opts.dbName !== null) {
               queryParams['dbName'] = opts.dbName
           }
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeSlowLogs with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/performance:describeSlowLogs', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  根据用户定义的查询条件，获取正在执行中的SQL执行的性能信息。用户可以根据这些信息查找与SQL执行相关的性能瓶颈，并进行优化。&lt;br&gt;- 仅支持SQL Server
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} [opts.db] - 需要查询的数据库名，多个数据库名之间用英文逗号分隔，默认所有数据库  optional 
      * @param {integer} [opts.threshold] - 返回执行时间大于等于threshold的记录，默认10，单位秒  optional 
      * @param {integer} [opts.pageNumber] - 显示数据的页码，默认为1，取值范围：[-1,1000)。pageNumber为-1时，返回所有数据页码；超过总页数时，显示最后一页。  optional 
      * @param {integer} [opts.pageSize] - 每页显示的数据条数，默认为50，取值范围：[1,100]，只能为10的倍数  optional 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param activeQueryPerformanceResult activeQueryPerformanceResult  
      * @param integer totalCount  总记录条数
      * @param integer pageNumber  当前数据的页码
      * @param integer pageSize  每页显示的数据条数
      */

    describeActiveQueryPerformance(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeActiveQueryPerformance');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeActiveQueryPerformance');
          }

          let postBody = null;
          let queryParams = {
          };
           if (opts.db !== undefined && opts.db !== null) {
               queryParams['db'] = opts.db
           }
           if (opts.threshold !== undefined && opts.threshold !== null) {
               queryParams['threshold'] = opts.threshold
           }
           if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
               queryParams['pageNumber'] = opts.pageNumber
           }
           if (opts.pageSize !== undefined && opts.pageSize !== null) {
               queryParams['pageSize'] = opts.pageSize
           }

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeActiveQueryPerformance with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/performance:describeActiveQueryPerformance', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  查看RDS实例当前白名单。白名单是允许访问当前实例的IP/IP段列表，缺省情况下，白名单对本VPC开放。如果用户开启了外网访问的功能，还需要对外网的IP配置白名单。
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param whiteList whiteLists  
      */

    describeWhiteList(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  describeWhiteList');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling describeWhiteList');
          }

          let postBody = null;
          let queryParams = {
          };

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call describeWhiteList with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/whiteList', 'GET', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

      /**
      *  修改允许访问实例的IP白名单。白名单是允许访问当前实例的IP/IP段列表，缺省情况下，白名单对本VPC开放。如果用户开启了外网访问的功能，还需要对外网的IP配置白名单。
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - RDS 实例ID，唯一标识一个RDS实例 
      * @param {string} opts.ips - IP或IP段，不同的IP/IP段之间用英文逗号分隔，例如0.0.0.0/0,192.168.0.10 
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

    modifyWhiteList(opts, regionId = this.config.regionId, callback){
         if (typeof regionId === 'function') {
           callback = regionId
           regionId = this.config.regionId
         }

          if (regionId === undefined || regionId === null) {
               throw new Error('Missing the required parameter \'regionId\' when calling  modifyWhiteList');
          }

         opts = opts || {};

          if (opts.instanceId === undefined || opts.instanceId === null) {
               throw new Error('Missing the required parameter \'opts.instanceId\' when calling modifyWhiteList');
          }
          if (opts.ips === undefined || opts.ips === null) {
               throw new Error('Missing the required parameter \'opts.ips\' when calling modifyWhiteList');
          }

         let postBody =   {
          };
           if (opts.ips !== undefined && opts.ips !== null) {
               postBody['ips'] = opts.ips
           }

          let queryParams = {};

          let pathParams = {
               'regionId': regionId,
               'instanceId': opts.instanceId 
          };

         let headerParams = {
               'User-Agent': 'JdcloudSdkNode/1.0.0  rds/0.4.1',
          };
          
          let contentTypes = ['application/json'];
          let accepts = ['application/json'];

          // 扩展自定义头
          if (opts['x-extra-header']) {
            for (let extraHeader in opts['x-extra-header']) {
              headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
            }

            if (Array.isArray(opts['x-extra-header']['content-type'])) {
              contentTypes = opts['x-extra-header']['content-type']
            } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
              contentTypes = opts['x-extra-header']['content-type'].split(',')
            }

            if (Array.isArray(opts['x-extra-header']['accept'])) {
              accepts = opts['x-extra-header']['accept']
            } else if (typeof opts['x-extra-header']['accept'] === 'string') {
              accepts = opts['x-extra-header']['accept'].split(',')
            }
          }

          let formParams = {};

          let returnType = null;

          this.config.logger(`call modifyWhiteList with params:\npathParams:${JSON.stringify(pathParams)},\nqueryParams:${JSON.stringify(queryParams)}, \nheaderParams:${JSON.stringify(headerParams)}, \nformParams:${JSON.stringify(formParams)}, \npostBody:${JSON.stringify(postBody)}`,"DEBUG");

          let request = this.makeRequest('/regions/{regionId}/instances/{instanceId}/whiteList', 'PUT', pathParams, queryParams,
                          headerParams, formParams, postBody, contentTypes, accepts, returnType, callback);

          return request.then(function (result) {
            if (callback && typeof callback === 'function') {
              return callback(null, result);
            }
            return result
            }, function (error) {
               if (callback && typeof callback === 'function') {
                 return callback(error);
               }
               return Promise.reject(error)
          });
    }

};
module.exports = JDCloud.RDS
