/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * WorkspaceUserController
 * 工作空间WorkspaceUserController接口
 *
 * OpenAPI spec version: v2
 * Contact:
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

require('../../../lib/node_loader')
var JDCloud = require('../../../lib/core')
var Service = JDCloud.Service
var serviceId = 'shenhaiplatform'
Service._services[serviceId] = true

/**
 * shenhaiplatform service.
 * @version 1.0.0
 */

class SHENHAIPLATFORM extends Service {
  constructor (options = {}) {
    options._defaultEndpoint = {}
    options._defaultEndpoint.protocol =
      options._defaultEndpoint.protocol || 'https'
    options._defaultEndpoint.host =
      options._defaultEndpoint.host || 'shenhaiplatform.jdcloud-api.com'
    options.basePath = '/v2' // 默认要设为空""
    super(serviceId, options)
  }

  /**
      *  获取一个新的对话id
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param string result  对话id
      */

  copilotChatNew (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  copilotChatNew"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling copilotChatNew"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call copilotChatNew with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/copilotChatNew',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取历史对话列表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.topicLike] - 话题搜索词  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param chatVo result
      */

  copilotChatHistory (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  copilotChatHistory"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling copilotChatHistory"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.topicLike !== undefined && opts.topicLike !== null) {
      queryParams['topicLike'] = opts.topicLike
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call copilotChatHistory with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/copilotChatHistory',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除对话
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.chatId - 对话id
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      */

  copilotChatDelete (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  copilotChatDelete"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling copilotChatDelete"
      )
    }
    if (opts.chatId === undefined || opts.chatId === null) {
      throw new Error(
        "Missing the required parameter 'opts.chatId' when calling copilotChatDelete"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.chatId !== undefined && opts.chatId !== null) {
      queryParams['chatId'] = opts.chatId
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call copilotChatDelete with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/copilotChatDelete',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  清除对话上下文
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.chatId - 对话id
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      */

  copilotChatClear (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  copilotChatClear"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling copilotChatClear"
      )
    }
    if (opts.chatId === undefined || opts.chatId === null) {
      throw new Error(
        "Missing the required parameter 'opts.chatId' when calling copilotChatClear"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.chatId !== undefined && opts.chatId !== null) {
      queryParams['chatId'] = opts.chatId
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call copilotChatClear with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/copilotChatClear',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取可用模型列表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param modelVo result
      */

  copilotModelList (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  copilotModelList"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling copilotModelList"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call copilotModelList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/copilotModelList',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  停止发言，用于终止模型回复生成
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.chatId - 对话id
      * @param {string} opts.utteranceId - 发言id
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      */

  copilotUtteranceStop (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  copilotUtteranceStop"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling copilotUtteranceStop"
      )
    }
    if (opts.chatId === undefined || opts.chatId === null) {
      throw new Error(
        "Missing the required parameter 'opts.chatId' when calling copilotUtteranceStop"
      )
    }
    if (opts.utteranceId === undefined || opts.utteranceId === null) {
      throw new Error(
        "Missing the required parameter 'opts.utteranceId' when calling copilotUtteranceStop"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.chatId !== undefined && opts.chatId !== null) {
      queryParams['chatId'] = opts.chatId
    }
    if (opts.utteranceId !== undefined && opts.utteranceId !== null) {
      queryParams['utteranceId'] = opts.utteranceId
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call copilotUtteranceStop with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/copilotUtteranceStop',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取指定对话中的发言记录
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.chatId - 对话id
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param utteranceVo result
      */

  copilotUtteranceList (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  copilotUtteranceList"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling copilotUtteranceList"
      )
    }
    if (opts.chatId === undefined || opts.chatId === null) {
      throw new Error(
        "Missing the required parameter 'opts.chatId' when calling copilotUtteranceList"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.chatId !== undefined && opts.chatId !== null) {
      queryParams['chatId'] = opts.chatId
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call copilotUtteranceList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/copilotUtteranceList',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据对话中的一条发言，推荐可能的prompt
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.chatId - 对话id
      * @param {string} opts.utteranceId - 发言id
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param string result
      */

  copilotUtteranceRecommend (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  copilotUtteranceRecommend"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling copilotUtteranceRecommend"
      )
    }
    if (opts.chatId === undefined || opts.chatId === null) {
      throw new Error(
        "Missing the required parameter 'opts.chatId' when calling copilotUtteranceRecommend"
      )
    }
    if (opts.utteranceId === undefined || opts.utteranceId === null) {
      throw new Error(
        "Missing the required parameter 'opts.utteranceId' when calling copilotUtteranceRecommend"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.chatId !== undefined && opts.chatId !== null) {
      queryParams['chatId'] = opts.chatId
    }
    if (opts.utteranceId !== undefined && opts.utteranceId !== null) {
      queryParams['utteranceId'] = opts.utteranceId
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call copilotUtteranceRecommend with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/copilotUtteranceRecommend',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  验证当前用户是否有权限访问
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param boolean result  是否有权限访问
      */

  copilotVerify (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  copilotVerify"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling copilotVerify"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call copilotVerify with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/copilotVerify',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  订阅/收藏表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.id - 表模型ID
      * @param {string} [opts.subscribeType] - 订阅类型  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jtlasSubscribeTableResp jtlasSubscribeTableResp
      */

  jtlasSubscribeTable (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  jtlasSubscribeTable"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling jtlasSubscribeTable"
      )
    }
    if (opts.id === undefined || opts.id === null) {
      throw new Error(
        "Missing the required parameter 'opts.id' when calling jtlasSubscribeTable"
      )
    }

    let postBody = {}
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }
    if (opts.subscribeType !== undefined && opts.subscribeType !== null) {
      postBody['subscribeType'] = opts.subscribeType
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call jtlasSubscribeTable with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/jtlasSubscribeTable',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询表血缘
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.direction - 方向
      * @param {string} opts.edgeType - 边类型
      * @param {string} opts.nodeId
      * @param {integer} [opts.depth] - 检索深度  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jtlasSearchTableLineageResp jtlasSearchTableLineageResp
      */

  jtlasSearchTableLineage (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  jtlasSearchTableLineage"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling jtlasSearchTableLineage"
      )
    }
    if (opts.direction === undefined || opts.direction === null) {
      throw new Error(
        "Missing the required parameter 'opts.direction' when calling jtlasSearchTableLineage"
      )
    }
    if (opts.edgeType === undefined || opts.edgeType === null) {
      throw new Error(
        "Missing the required parameter 'opts.edgeType' when calling jtlasSearchTableLineage"
      )
    }
    if (opts.nodeId === undefined || opts.nodeId === null) {
      throw new Error(
        "Missing the required parameter 'opts.nodeId' when calling jtlasSearchTableLineage"
      )
    }

    let postBody = {}
    if (opts.direction !== undefined && opts.direction !== null) {
      postBody['direction'] = opts.direction
    }
    if (opts.edgeType !== undefined && opts.edgeType !== null) {
      postBody['edgeType'] = opts.edgeType
    }
    if (opts.nodeId !== undefined && opts.nodeId !== null) {
      postBody['nodeId'] = opts.nodeId
    }
    if (opts.depth !== undefined && opts.depth !== null) {
      postBody['depth'] = opts.depth
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call jtlasSearchTableLineage with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/jtlasSearchTableLineage',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询字段血缘
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.direction - 方向
      * @param {string} opts.edgeType - 边类型
      * @param {string} opts.nodeId
      * @param {integer} [opts.depth] - 检索深度  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jtlasSearchColumnLineageResp jtlasSearchColumnLineageResp
      */

  jtlasSearchColumnLineage (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  jtlasSearchColumnLineage"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling jtlasSearchColumnLineage"
      )
    }
    if (opts.direction === undefined || opts.direction === null) {
      throw new Error(
        "Missing the required parameter 'opts.direction' when calling jtlasSearchColumnLineage"
      )
    }
    if (opts.edgeType === undefined || opts.edgeType === null) {
      throw new Error(
        "Missing the required parameter 'opts.edgeType' when calling jtlasSearchColumnLineage"
      )
    }
    if (opts.nodeId === undefined || opts.nodeId === null) {
      throw new Error(
        "Missing the required parameter 'opts.nodeId' when calling jtlasSearchColumnLineage"
      )
    }

    let postBody = {}
    if (opts.direction !== undefined && opts.direction !== null) {
      postBody['direction'] = opts.direction
    }
    if (opts.edgeType !== undefined && opts.edgeType !== null) {
      postBody['edgeType'] = opts.edgeType
    }
    if (opts.nodeId !== undefined && opts.nodeId !== null) {
      postBody['nodeId'] = opts.nodeId
    }
    if (opts.depth !== undefined && opts.depth !== null) {
      postBody['depth'] = opts.depth
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call jtlasSearchColumnLineage with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/jtlasSearchColumnLineage',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  检索表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {boolean} opts.filterQuery - 是否是过滤请求(必填)，如果是则返回aggregate结果
      * @param {string} opts.searchMode - 搜索模式(必填)，准确和模糊检索
      * @param {string} [opts.searchKeyword]   optional
      * @param {string} opts.workspaceCode - 工作空间(必填)
      * @param {string} opts.env - dev或prod空字符串代表所有环境
      * @param {string} opts.searchRange - 检索范围(必填)
      * @param {string} [opts.personInCharge] - 检索指定用户下的表的时候，需要传递(可选)  optional
      * @param {string} opts.sort - 返回结果的排列方式(必填)，按照点击/创建时间升降/相关度
      * @param {integer} [opts.pageNum] - 分页页码(必填)  optional
      * @param {integer} [opts.pageSize] - 分页大小(必填)  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jtlasPageSearchTableResp jtlasPageSearchTableResp
      */

  jtlasPageSearchTables (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  jtlasPageSearchTables"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling jtlasPageSearchTables"
      )
    }
    if (opts.filterQuery === undefined || opts.filterQuery === null) {
      throw new Error(
        "Missing the required parameter 'opts.filterQuery' when calling jtlasPageSearchTables"
      )
    }
    if (opts.searchMode === undefined || opts.searchMode === null) {
      throw new Error(
        "Missing the required parameter 'opts.searchMode' when calling jtlasPageSearchTables"
      )
    }
    if (opts.workspaceCode === undefined || opts.workspaceCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.workspaceCode' when calling jtlasPageSearchTables"
      )
    }
    if (opts.env === undefined || opts.env === null) {
      throw new Error(
        "Missing the required parameter 'opts.env' when calling jtlasPageSearchTables"
      )
    }
    if (opts.searchRange === undefined || opts.searchRange === null) {
      throw new Error(
        "Missing the required parameter 'opts.searchRange' when calling jtlasPageSearchTables"
      )
    }
    if (opts.sort === undefined || opts.sort === null) {
      throw new Error(
        "Missing the required parameter 'opts.sort' when calling jtlasPageSearchTables"
      )
    }

    let postBody = {}
    if (opts.filterQuery !== undefined && opts.filterQuery !== null) {
      postBody['filterQuery'] = opts.filterQuery
    }
    if (opts.searchMode !== undefined && opts.searchMode !== null) {
      postBody['searchMode'] = opts.searchMode
    }
    if (opts.searchKeyword !== undefined && opts.searchKeyword !== null) {
      postBody['searchKeyword'] = opts.searchKeyword
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.env !== undefined && opts.env !== null) {
      postBody['env'] = opts.env
    }
    if (opts.searchRange !== undefined && opts.searchRange !== null) {
      postBody['searchRange'] = opts.searchRange
    }
    if (opts.personInCharge !== undefined && opts.personInCharge !== null) {
      postBody['personInCharge'] = opts.personInCharge
    }
    if (opts.sort !== undefined && opts.sort !== null) {
      postBody['sort'] = opts.sort
    }
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call jtlasPageSearchTables with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/jtlasPageSearchTables',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  检索表权限
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.database - 数据库（工作空间编码）
      * @param {string} opts.tableName - 表名称
      * @param {array} [opts.privilegeTypes] - 权限类型  optional
      * @param {integer} opts.pageNum - 分页参数-页码
      * @param {integer} opts.pageSize - 分页参数-页数
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jtlasPageSearchTablePrivilegesResp jtlasPageSearchTablePrivilegesResp
      */

  jtlasPageSearchTablePrivileges (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  jtlasPageSearchTablePrivileges"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling jtlasPageSearchTablePrivileges"
      )
    }
    if (opts.database === undefined || opts.database === null) {
      throw new Error(
        "Missing the required parameter 'opts.database' when calling jtlasPageSearchTablePrivileges"
      )
    }
    if (opts.tableName === undefined || opts.tableName === null) {
      throw new Error(
        "Missing the required parameter 'opts.tableName' when calling jtlasPageSearchTablePrivileges"
      )
    }
    if (opts.pageNum === undefined || opts.pageNum === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageNum' when calling jtlasPageSearchTablePrivileges"
      )
    }
    if (opts.pageSize === undefined || opts.pageSize === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageSize' when calling jtlasPageSearchTablePrivileges"
      )
    }

    let postBody = {}
    if (opts.database !== undefined && opts.database !== null) {
      postBody['database'] = opts.database
    }
    if (opts.tableName !== undefined && opts.tableName !== null) {
      postBody['tableName'] = opts.tableName
    }
    if (opts.privilegeTypes !== undefined && opts.privilegeTypes !== null) {
      postBody['privilegeTypes'] = opts.privilegeTypes
    }
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call jtlasPageSearchTablePrivileges with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/jtlasPageSearchTablePrivileges',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询表分区
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.database - 数据库名称（项目编码）
      * @param {string} [opts.fuzzyText] - 模糊关键字  optional
      * @param {integer} opts.pageNum - 分页参数-页码
      * @param {integer} opts.pageSize - 分页参数-页数
      * @param {string} opts.tableName - 表名信息
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jtlasPageSearchTablePartitionsResp jtlasPageSearchTablePartitionsResp
      */

  jtlasPageSearchTablePartitions (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  jtlasPageSearchTablePartitions"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling jtlasPageSearchTablePartitions"
      )
    }
    if (opts.database === undefined || opts.database === null) {
      throw new Error(
        "Missing the required parameter 'opts.database' when calling jtlasPageSearchTablePartitions"
      )
    }
    if (opts.pageNum === undefined || opts.pageNum === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageNum' when calling jtlasPageSearchTablePartitions"
      )
    }
    if (opts.pageSize === undefined || opts.pageSize === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageSize' when calling jtlasPageSearchTablePartitions"
      )
    }
    if (opts.tableName === undefined || opts.tableName === null) {
      throw new Error(
        "Missing the required parameter 'opts.tableName' when calling jtlasPageSearchTablePartitions"
      )
    }

    let postBody = {}
    if (opts.database !== undefined && opts.database !== null) {
      postBody['database'] = opts.database
    }
    if (opts.fuzzyText !== undefined && opts.fuzzyText !== null) {
      postBody['fuzzyText'] = opts.fuzzyText
    }
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.tableName !== undefined && opts.tableName !== null) {
      postBody['tableName'] = opts.tableName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call jtlasPageSearchTablePartitions with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/jtlasPageSearchTablePartitions',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询表详情
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.id - 文档ID
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jtlasSearchDetailResp jtlasSearchDetailResp
      */

  jtlasSearchDetail (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  jtlasSearchDetail"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling jtlasSearchDetail"
      )
    }
    if (opts.id === undefined || opts.id === null) {
      throw new Error(
        "Missing the required parameter 'opts.id' when calling jtlasSearchDetail"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.id !== undefined && opts.id !== null) {
      queryParams['id'] = opts.id
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call jtlasSearchDetail with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/jtlasSearchDetail',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询表查看脚本
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.id - 文档ID
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jtlasGetTableQueryScriptResp jtlasGetTableQueryScriptResp
      */

  jtlasGetTableQueryScript (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  jtlasGetTableQueryScript"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling jtlasGetTableQueryScript"
      )
    }
    if (opts.id === undefined || opts.id === null) {
      throw new Error(
        "Missing the required parameter 'opts.id' when calling jtlasGetTableQueryScript"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.id !== undefined && opts.id !== null) {
      queryParams['id'] = opts.id
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call jtlasGetTableQueryScript with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/jtlasGetTableQueryScript',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询表DDL脚本
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.id - 文档ID
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jtlasGetTableDDLScriptResp jtlasGetTableDDLScriptResp
      */

  jtlasGetTableDDLScript (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  jtlasGetTableDDLScript"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling jtlasGetTableDDLScript"
      )
    }
    if (opts.id === undefined || opts.id === null) {
      throw new Error(
        "Missing the required parameter 'opts.id' when calling jtlasGetTableDDLScript"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.id !== undefined && opts.id !== null) {
      queryParams['id'] = opts.id
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call jtlasGetTableDDLScript with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/jtlasGetTableDDLScript',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询表DDL脚本
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.id - 文档ID
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jtlasDownloadTableColumnsResp jtlasDownloadTableColumnsResp
      */

  jtlasDownloadTableColumns (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  jtlasDownloadTableColumns"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling jtlasDownloadTableColumns"
      )
    }
    if (opts.id === undefined || opts.id === null) {
      throw new Error(
        "Missing the required parameter 'opts.id' when calling jtlasDownloadTableColumns"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.id !== undefined && opts.id !== null) {
      queryParams['id'] = opts.id
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call jtlasDownloadTableColumns with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/jtlasDownloadTableColumns',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  表授权接口
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.database - 数据库名称
      * @param {string} opts.tableName - 表名称
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jtlasGrantTablePrivilegesResp jtlasGrantTablePrivilegesResp
      */

  jtlasGrantTablePrivileges (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  jtlasGrantTablePrivileges"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling jtlasGrantTablePrivileges"
      )
    }
    if (opts.database === undefined || opts.database === null) {
      throw new Error(
        "Missing the required parameter 'opts.database' when calling jtlasGrantTablePrivileges"
      )
    }
    if (opts.tableName === undefined || opts.tableName === null) {
      throw new Error(
        "Missing the required parameter 'opts.tableName' when calling jtlasGrantTablePrivileges"
      )
    }

    let postBody = {}
    if (opts.database !== undefined && opts.database !== null) {
      postBody['database'] = opts.database
    }
    if (opts.tableName !== undefined && opts.tableName !== null) {
      postBody['tableName'] = opts.tableName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call jtlasGrantTablePrivileges with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/jtlasGrantTablePrivileges',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  表授权接口
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.companyCode - 租户编码
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jtlasDestroyResp jtlasDestroyResp
      */

  jtlasDestroy (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  jtlasDestroy"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling jtlasDestroy"
      )
    }
    if (opts.companyCode === undefined || opts.companyCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.companyCode' when calling jtlasDestroy"
      )
    }

    let postBody = {}
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      postBody['companyCode'] = opts.companyCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call jtlasDestroy with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/jtlasDestroy',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据租户/项目空间/表名称查询表详情
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.database - 项目空间
      * @param {string} opts.tableName - 表名称
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jtlasTableDetailResp jtlasTableDetailResp
      */

  jtlasWarehouseTableDetail (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  jtlasWarehouseTableDetail"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling jtlasWarehouseTableDetail"
      )
    }
    if (opts.database === undefined || opts.database === null) {
      throw new Error(
        "Missing the required parameter 'opts.database' when calling jtlasWarehouseTableDetail"
      )
    }
    if (opts.tableName === undefined || opts.tableName === null) {
      throw new Error(
        "Missing the required parameter 'opts.tableName' when calling jtlasWarehouseTableDetail"
      )
    }

    let postBody = {}
    if (opts.database !== undefined && opts.database !== null) {
      postBody['database'] = opts.database
    }
    if (opts.tableName !== undefined && opts.tableName !== null) {
      postBody['tableName'] = opts.tableName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call jtlasWarehouseTableDetail with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/jtlasWarehouseTableDetail',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询用户创建的表，支持基于表名模糊
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.database - 数据库（工作空间编码）
      * @param {string} [opts.creator] - 账户信息  optional
      * @param {string} [opts.fuzzyName] - 表名称  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jtlasTableOwnedByUserResp jtlasTableOwnedByUserResp
      */

  jtlasWarehouseQueryTablesOwnedByUser (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  jtlasWarehouseQueryTablesOwnedByUser"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling jtlasWarehouseQueryTablesOwnedByUser"
      )
    }
    if (opts.database === undefined || opts.database === null) {
      throw new Error(
        "Missing the required parameter 'opts.database' when calling jtlasWarehouseQueryTablesOwnedByUser"
      )
    }

    let postBody = {}
    if (opts.database !== undefined && opts.database !== null) {
      postBody['database'] = opts.database
    }
    if (opts.creator !== undefined && opts.creator !== null) {
      postBody['creator'] = opts.creator
    }
    if (opts.fuzzyName !== undefined && opts.fuzzyName !== null) {
      postBody['fuzzyName'] = opts.fuzzyName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call jtlasWarehouseQueryTablesOwnedByUser with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/jtlasWarehouseQueryTablesOwnedByUser',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据用户名查询用户权限表列表，最多返回1000条
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.database - 数据库（工作空间编码）
      * @param {string} opts.principalName - 账户信息
      * @param {string} [opts.fuzzyName] - 表名称  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jtlasTableUnderSpecifiedUserResp jtlasTableUnderSpecifiedUserResp
      */

  jtlasWarehouseQueryTablesUnderSpecifiedUser (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  jtlasWarehouseQueryTablesUnderSpecifiedUser"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling jtlasWarehouseQueryTablesUnderSpecifiedUser"
      )
    }
    if (opts.database === undefined || opts.database === null) {
      throw new Error(
        "Missing the required parameter 'opts.database' when calling jtlasWarehouseQueryTablesUnderSpecifiedUser"
      )
    }
    if (opts.principalName === undefined || opts.principalName === null) {
      throw new Error(
        "Missing the required parameter 'opts.principalName' when calling jtlasWarehouseQueryTablesUnderSpecifiedUser"
      )
    }

    let postBody = {}
    if (opts.database !== undefined && opts.database !== null) {
      postBody['database'] = opts.database
    }
    if (opts.principalName !== undefined && opts.principalName !== null) {
      postBody['principalName'] = opts.principalName
    }
    if (opts.fuzzyName !== undefined && opts.fuzzyName !== null) {
      postBody['fuzzyName'] = opts.fuzzyName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call jtlasWarehouseQueryTablesUnderSpecifiedUser with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/jtlasWarehouseQueryTablesUnderSpecifiedUser',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据用户名查询用户权限表列表，最多返回1000条
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.database - 数据库（工作空间编码）
      * @param {string} opts.principalName - 账户信息
      * @param {array} [opts.privilegeTypes] - 权限信息  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jtlasTableUnderSpecifiedUserWithPrivilegesResp jtlasTableUnderSpecifiedUserWithPrivilegesResp
      */

  jtlasWarehouseQueryTablesUnderSpecifiedUserWithPrivileges (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  jtlasWarehouseQueryTablesUnderSpecifiedUserWithPrivileges"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling jtlasWarehouseQueryTablesUnderSpecifiedUserWithPrivileges"
      )
    }
    if (opts.database === undefined || opts.database === null) {
      throw new Error(
        "Missing the required parameter 'opts.database' when calling jtlasWarehouseQueryTablesUnderSpecifiedUserWithPrivileges"
      )
    }
    if (opts.principalName === undefined || opts.principalName === null) {
      throw new Error(
        "Missing the required parameter 'opts.principalName' when calling jtlasWarehouseQueryTablesUnderSpecifiedUserWithPrivileges"
      )
    }

    let postBody = {}
    if (opts.database !== undefined && opts.database !== null) {
      postBody['database'] = opts.database
    }
    if (opts.principalName !== undefined && opts.principalName !== null) {
      postBody['principalName'] = opts.principalName
    }
    if (opts.privilegeTypes !== undefined && opts.privilegeTypes !== null) {
      postBody['privilegeTypes'] = opts.privilegeTypes
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call jtlasWarehouseQueryTablesUnderSpecifiedUserWithPrivileges with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/jtlasWarehouseQueryTablesUnderSpecifiedUserWithPrivileges',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询用户指定权限下的表信息,支持表名模糊
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.database - 数据库（工作空间编码）
      * @param {string} opts.principalName - 账户信息
      * @param {string} [opts.fuzzyTableName] - 模糊表名称  optional
      * @param {array} [opts.privilegeTypes] - 权限信息  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jtlasTableFuuzyUnderSpecifiedUserWithPrivilegesResp jtlasTableFuuzyUnderSpecifiedUserWithPrivilegesResp
      */

  jtlasWarehouseFuzzyQueryTablesUnderSpecifiedUserWithPrivileges (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  jtlasWarehouseFuzzyQueryTablesUnderSpecifiedUserWithPrivileges"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling jtlasWarehouseFuzzyQueryTablesUnderSpecifiedUserWithPrivileges"
      )
    }
    if (opts.database === undefined || opts.database === null) {
      throw new Error(
        "Missing the required parameter 'opts.database' when calling jtlasWarehouseFuzzyQueryTablesUnderSpecifiedUserWithPrivileges"
      )
    }
    if (opts.principalName === undefined || opts.principalName === null) {
      throw new Error(
        "Missing the required parameter 'opts.principalName' when calling jtlasWarehouseFuzzyQueryTablesUnderSpecifiedUserWithPrivileges"
      )
    }

    let postBody = {}
    if (opts.database !== undefined && opts.database !== null) {
      postBody['database'] = opts.database
    }
    if (opts.principalName !== undefined && opts.principalName !== null) {
      postBody['principalName'] = opts.principalName
    }
    if (opts.fuzzyTableName !== undefined && opts.fuzzyTableName !== null) {
      postBody['fuzzyTableName'] = opts.fuzzyTableName
    }
    if (opts.privilegeTypes !== undefined && opts.privilegeTypes !== null) {
      postBody['privilegeTypes'] = opts.privilegeTypes
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call jtlasWarehouseFuzzyQueryTablesUnderSpecifiedUserWithPrivileges with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/jtlasWarehouseFuzzyQueryTablesUnderSpecifiedUserWithPrivileges',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据用户名查询用户权限表列表，最多返回1000条
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.database - 数据库（工作空间编码）
      * @param {string} opts.tableName - 表名称
      * @param {array} [opts.privilegeTypes] - 权限类型  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jtlasTablePrivilegesResp jtlasTablePrivilegesResp
      */

  jtlasWarehouseQueryTablePrivileges (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  jtlasWarehouseQueryTablePrivileges"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling jtlasWarehouseQueryTablePrivileges"
      )
    }
    if (opts.database === undefined || opts.database === null) {
      throw new Error(
        "Missing the required parameter 'opts.database' when calling jtlasWarehouseQueryTablePrivileges"
      )
    }
    if (opts.tableName === undefined || opts.tableName === null) {
      throw new Error(
        "Missing the required parameter 'opts.tableName' when calling jtlasWarehouseQueryTablePrivileges"
      )
    }

    let postBody = {}
    if (opts.database !== undefined && opts.database !== null) {
      postBody['database'] = opts.database
    }
    if (opts.tableName !== undefined && opts.tableName !== null) {
      postBody['tableName'] = opts.tableName
    }
    if (opts.privilegeTypes !== undefined && opts.privilegeTypes !== null) {
      postBody['privilegeTypes'] = opts.privilegeTypes
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call jtlasWarehouseQueryTablePrivileges with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/jtlasWarehouseQueryTablePrivileges',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据租户/项目空间/表名称模糊查询表列表，最多返回1000条
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.database - 项目空间
      * @param {string} [opts.fuzzyTableName] - 表名称  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jtlasFuzzyQueryTablesByTableNameResp jtlasFuzzyQueryTablesByTableNameResp
      */

  jtlasWarehouseFuzzyQueryTablesByTableName (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  jtlasWarehouseFuzzyQueryTablesByTableName"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling jtlasWarehouseFuzzyQueryTablesByTableName"
      )
    }
    if (opts.database === undefined || opts.database === null) {
      throw new Error(
        "Missing the required parameter 'opts.database' when calling jtlasWarehouseFuzzyQueryTablesByTableName"
      )
    }

    let postBody = {}
    if (opts.database !== undefined && opts.database !== null) {
      postBody['database'] = opts.database
    }
    if (opts.fuzzyTableName !== undefined && opts.fuzzyTableName !== null) {
      postBody['fuzzyTableName'] = opts.fuzzyTableName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call jtlasWarehouseFuzzyQueryTablesByTableName with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/jtlasWarehouseFuzzyQueryTablesByTableName',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据租户/项目空间/数据库名称模糊查询表列表，最多返回1000条
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.database - projectName
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jtlasFuzzyQueryTablesByDatabaseNameResp jtlasFuzzyQueryTablesByDatabaseNameResp
      */

  jtlasWarehouseQueryTablesByDatabaseName (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  jtlasWarehouseQueryTablesByDatabaseName"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling jtlasWarehouseQueryTablesByDatabaseName"
      )
    }
    if (opts.database === undefined || opts.database === null) {
      throw new Error(
        "Missing the required parameter 'opts.database' when calling jtlasWarehouseQueryTablesByDatabaseName"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.database !== undefined && opts.database !== null) {
      queryParams['database'] = opts.database
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call jtlasWarehouseQueryTablesByDatabaseName with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/jtlasWarehouseQueryTablesByDatabaseName',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  任务补数
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.jobName - 作业名称
      * @param {string} opts.startDate - 补数开始时间
      * @param {string} opts.endDate - 补数结束时间
      * @param {integer} [opts.parallelNum] - 并行数  optional
      * @param {array} [opts.childJobNames] - 子作业名称  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdrOpenApiRespString gpdrOpenApiRespString
      */

  gravityParticleJobHisRunAddTask (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobHisRunAddTask"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobHisRunAddTask"
      )
    }
    if (opts.jobName === undefined || opts.jobName === null) {
      throw new Error(
        "Missing the required parameter 'opts.jobName' when calling gravityParticleJobHisRunAddTask"
      )
    }
    if (opts.startDate === undefined || opts.startDate === null) {
      throw new Error(
        "Missing the required parameter 'opts.startDate' when calling gravityParticleJobHisRunAddTask"
      )
    }
    if (opts.endDate === undefined || opts.endDate === null) {
      throw new Error(
        "Missing the required parameter 'opts.endDate' when calling gravityParticleJobHisRunAddTask"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.startDate !== undefined && opts.startDate !== null) {
      postBody['startDate'] = opts.startDate
    }
    if (opts.endDate !== undefined && opts.endDate !== null) {
      postBody['endDate'] = opts.endDate
    }
    if (opts.parallelNum !== undefined && opts.parallelNum !== null) {
      postBody['parallelNum'] = opts.parallelNum
    }
    if (opts.childJobNames !== undefined && opts.childJobNames !== null) {
      postBody['childJobNames'] = opts.childJobNames
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobHisRunAddTask with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobHisRunAddTask',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  任务批量补数
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {string} opts.jobName - 作业名称
      * @param {string} opts.startDate - 补数开始时间
      * @param {string} opts.endDate - 补数结束时间
      * @param {integer} [opts.parallelNum] - 并行数  optional
      * @param {array} [opts.childJobNames] - 子作业名称  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdrOpenApiRespString gpdrOpenApiRespString
      */

  gravityParticleJobHisRunAddBathTask (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobHisRunAddBathTask"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobHisRunAddBathTask"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleJobHisRunAddBathTask"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobHisRunAddBathTask"
      )
    }
    if (opts.jobName === undefined || opts.jobName === null) {
      throw new Error(
        "Missing the required parameter 'opts.jobName' when calling gravityParticleJobHisRunAddBathTask"
      )
    }
    if (opts.startDate === undefined || opts.startDate === null) {
      throw new Error(
        "Missing the required parameter 'opts.startDate' when calling gravityParticleJobHisRunAddBathTask"
      )
    }
    if (opts.endDate === undefined || opts.endDate === null) {
      throw new Error(
        "Missing the required parameter 'opts.endDate' when calling gravityParticleJobHisRunAddBathTask"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.startDate !== undefined && opts.startDate !== null) {
      postBody['startDate'] = opts.startDate
    }
    if (opts.endDate !== undefined && opts.endDate !== null) {
      postBody['endDate'] = opts.endDate
    }
    if (opts.parallelNum !== undefined && opts.parallelNum !== null) {
      postBody['parallelNum'] = opts.parallelNum
    }
    if (opts.childJobNames !== undefined && opts.childJobNames !== null) {
      postBody['childJobNames'] = opts.childJobNames
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobHisRunAddBathTask with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobHisRunAddBathTask',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  补数跟踪列表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {integer} opts.pageSize - 页面大小
      * @param {integer} opts.pageNum - 页码
      * @param {string} [opts.enable] - 补数任务是否关闭  optional
      * @param {string} [opts.jobName] - 任务名称  optional
      * @param {string} [opts.cstJobName] - 客户作业名  optional
      * @param {string} [opts.jobType] - 任务类型  optional
      * @param {string} [opts.processType] - 处理类型  optional
      * @param {array} [opts.processTypeList] - 处理类型列表  optional
      * @param {array} [opts.exeTypeList] - 执行类型列表  optional
      * @param {string} [opts.cycle] - 周期具体日期  optional
      * @param {string} [opts.manager] - 作业负责人  optional
      * @param {string} [opts.statu] - 任务状态  optional
      * @param {string} [opts.jobStartDate] - 补数开始日期  optional
      * @param {string} [opts.jobEndDate] - 补数结束日期  optional
      * @param {string} [opts.createDateBefore] - 创建时间结束区间  optional
      * @param {string} [opts.workspaceCode] - 工作空间code  optional
      * @param {string} [opts.jobChildType]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdrListHisRunTaskResDTO gpdrListHisRunTaskResDTO
      */

  gravityParticleJobHisRunListTask (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobHisRunListTask"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobHisRunListTask"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleJobHisRunListTask"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobHisRunListTask"
      )
    }
    if (opts.pageSize === undefined || opts.pageSize === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageSize' when calling gravityParticleJobHisRunListTask"
      )
    }
    if (opts.pageNum === undefined || opts.pageNum === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageNum' when calling gravityParticleJobHisRunListTask"
      )
    }

    let postBody = {}
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.enable !== undefined && opts.enable !== null) {
      postBody['enable'] = opts.enable
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.cstJobName !== undefined && opts.cstJobName !== null) {
      postBody['cstJobName'] = opts.cstJobName
    }
    if (opts.jobType !== undefined && opts.jobType !== null) {
      postBody['jobType'] = opts.jobType
    }
    if (opts.processType !== undefined && opts.processType !== null) {
      postBody['processType'] = opts.processType
    }
    if (opts.processTypeList !== undefined && opts.processTypeList !== null) {
      postBody['processTypeList'] = opts.processTypeList
    }
    if (opts.exeTypeList !== undefined && opts.exeTypeList !== null) {
      postBody['exeTypeList'] = opts.exeTypeList
    }
    if (opts.cycle !== undefined && opts.cycle !== null) {
      postBody['cycle'] = opts.cycle
    }
    if (opts.manager !== undefined && opts.manager !== null) {
      postBody['manager'] = opts.manager
    }
    if (opts.statu !== undefined && opts.statu !== null) {
      postBody['statu'] = opts.statu
    }
    if (opts.jobStartDate !== undefined && opts.jobStartDate !== null) {
      postBody['jobStartDate'] = opts.jobStartDate
    }
    if (opts.jobEndDate !== undefined && opts.jobEndDate !== null) {
      postBody['jobEndDate'] = opts.jobEndDate
    }
    if (opts.createDateBefore !== undefined && opts.createDateBefore !== null) {
      postBody['createDateBefore'] = opts.createDateBefore
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.jobChildType !== undefined && opts.jobChildType !== null) {
      postBody['jobChildType'] = opts.jobChildType
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobHisRunListTask with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobHisRunListTask',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  停止补数
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdrOpenApiRespInteger gpdrOpenApiRespInteger
      */

  gravityParticleJobHisRunCloseTask (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobHisRunCloseTask"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobHisRunCloseTask"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleJobHisRunCloseTask"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobHisRunCloseTask"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobHisRunCloseTask with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobHisRunCloseTask',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询补数跟踪记录
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {integer} opts.pageSize - 页面大小
      * @param {integer} opts.pageNum - 页码
      * @param {integer} [opts.afreshAddId] - 补数任务id  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdrOpenApiResponsePageInfoAfreshAddLogVo gpdrOpenApiResponsePageInfoAfreshAddLogVo
      */

  gravityParticleJobHisRunListTaskLog (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobHisRunListTaskLog"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobHisRunListTaskLog"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleJobHisRunListTaskLog"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobHisRunListTaskLog"
      )
    }
    if (opts.pageSize === undefined || opts.pageSize === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageSize' when calling gravityParticleJobHisRunListTaskLog"
      )
    }
    if (opts.pageNum === undefined || opts.pageNum === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageNum' when calling gravityParticleJobHisRunListTaskLog"
      )
    }

    let postBody = {}
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.afreshAddId !== undefined && opts.afreshAddId !== null) {
      postBody['afreshAddId'] = opts.afreshAddId
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobHisRunListTaskLog with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobHisRunListTaskLog',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取当前作业的父依赖
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} opts.pageSize - 页面大小
      * @param {integer} opts.pageNum - 页码
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {string} [opts.jobEnable] - 作业是否有效  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpdpPageInfoJobDependencyResultDTO result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobDepGetParentDependencies (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobDepGetParentDependencies"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobDepGetParentDependencies"
      )
    }
    if (opts.pageSize === undefined || opts.pageSize === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageSize' when calling gravityParticleJobDepGetParentDependencies"
      )
    }
    if (opts.pageNum === undefined || opts.pageNum === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageNum' when calling gravityParticleJobDepGetParentDependencies"
      )
    }

    let postBody = {}
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.jobEnable !== undefined && opts.jobEnable !== null) {
      postBody['jobEnable'] = opts.jobEnable
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobDepGetParentDependencies with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobDepGetParentDependencies',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取子作业
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} opts.pageSize - 页面大小
      * @param {integer} opts.pageNum - 页码
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {string} [opts.jobEnable] - 作业是否有效  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpdpPageInfoJobDependencyResultDTO result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobDepGetChildDependencies (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobDepGetChildDependencies"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobDepGetChildDependencies"
      )
    }
    if (opts.pageSize === undefined || opts.pageSize === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageSize' when calling gravityParticleJobDepGetChildDependencies"
      )
    }
    if (opts.pageNum === undefined || opts.pageNum === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageNum' when calling gravityParticleJobDepGetChildDependencies"
      )
    }

    let postBody = {}
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.jobEnable !== undefined && opts.jobEnable !== null) {
      postBody['jobEnable'] = opts.jobEnable
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobDepGetChildDependencies with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobDepGetChildDependencies',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取子作业
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} opts.pageSize - 页面大小
      * @param {integer} opts.pageNum - 页码
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {string} [opts.jobEnable] - 作业是否有效  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpdpSchedTriggerDependTree result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobDepChildJobs (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobDepChildJobs"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobDepChildJobs"
      )
    }
    if (opts.pageSize === undefined || opts.pageSize === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageSize' when calling gravityParticleJobDepChildJobs"
      )
    }
    if (opts.pageNum === undefined || opts.pageNum === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageNum' when calling gravityParticleJobDepChildJobs"
      )
    }

    let postBody = {}
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.jobEnable !== undefined && opts.jobEnable !== null) {
      postBody['jobEnable'] = opts.jobEnable
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobDepChildJobs with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobDepChildJobs',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据当前作业和目标层级查询子作业链路层级树
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {integer} [opts.level] - 链路层级  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpdpSchedTriggerDependTree result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobDepGetChildChainJobs (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobDepGetChildChainJobs"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobDepGetChildChainJobs"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.level !== undefined && opts.level !== null) {
      postBody['level'] = opts.level
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobDepGetChildChainJobs with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobDepGetChildChainJobs',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取父作业
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} opts.pageSize - 页面大小
      * @param {integer} opts.pageNum - 页码
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {string} [opts.jobEnable] - 作业是否有效  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpdpSchedTriggerDependTree result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobDepParentJobs (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobDepParentJobs"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobDepParentJobs"
      )
    }
    if (opts.pageSize === undefined || opts.pageSize === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageSize' when calling gravityParticleJobDepParentJobs"
      )
    }
    if (opts.pageNum === undefined || opts.pageNum === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageNum' when calling gravityParticleJobDepParentJobs"
      )
    }

    let postBody = {}
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.jobEnable !== undefined && opts.jobEnable !== null) {
      postBody['jobEnable'] = opts.jobEnable
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobDepParentJobs with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobDepParentJobs',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据当前作业和目标层级查询父作业链路层级树
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {integer} [opts.level] - 链路层级  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpdpSchedTriggerDependTree result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobDepGetParentChainJobs (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobDepGetParentChainJobs"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobDepGetParentChainJobs"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.level !== undefined && opts.level !== null) {
      postBody['level'] = opts.level
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobDepGetParentChainJobs with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobDepGetParentChainJobs',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取作业树
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {integer} [opts.level] - 链路层级  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpdpSchedTriggerDependTree result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobDepGetChildTreed (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobDepGetChildTreed"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobDepGetChildTreed"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.level !== undefined && opts.level !== null) {
      postBody['level'] = opts.level
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobDepGetChildTreed with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobDepGetChildTreed',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  任务关系页面，作业详情
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {integer} [opts.level] - 链路层级  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpdpJobDetailResultDTO result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobDepDetail (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobDepDetail"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobDepDetail"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.level !== undefined && opts.level !== null) {
      postBody['level'] = opts.level
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobDepDetail with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobDepDetail',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据作业id获取脚本信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} opts.jobId
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseDmrScriptInfoDTO gpdjmcRpcResponseDmrScriptInfoDTO
      */

  gravityParticleDubboJobManagerGetJobScript (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerGetJobScript"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerGetJobScript"
      )
    }
    if (opts.jobId === undefined || opts.jobId === null) {
      throw new Error(
        "Missing the required parameter 'opts.jobId' when calling gravityParticleDubboJobManagerGetJobScript"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.jobId !== undefined && opts.jobId !== null) {
      queryParams['jobId'] = opts.jobId
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerGetJobScript with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerGetJobScript',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据作业id删除作业脚本
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {array} [opts.jobIds] - 作业id列表  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseInteger gpdjmcRpcResponseInteger
      */

  gravityParticleDubboJobManagerDeleteJobScript (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerDeleteJobScript"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerDeleteJobScript"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerDeleteJobScript"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerDeleteJobScript"
      )
    }

    let postBody = {}
    if (opts.jobIds !== undefined && opts.jobIds !== null) {
      postBody['jobIds'] = opts.jobIds
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerDeleteJobScript with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerDeleteJobScript',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  保存作业脚本信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {integer} [opts.id] - 主键Id,为空时保存，不为空时更新  optional
      * @param {string} [opts.scriptName] - 脚本名称  optional
      * @param {string} [opts.scriptType] - 脚本类型  optional
      * @param {string} [opts.scriptDesc] - 脚本描述  optional
      * @param {string} [opts.scriptSourceType] - 脚本来源， LOCAL(本地) GIT(git) SKYDRIVE(网盘)  optional
      * @param {integer} [opts.jobId] - 任务id  optional
      * @param {integer} [opts.deleteFlag] - 删除标识  optional
      * @param {string} [opts.creator] - 创建人  optional
      * @param {string} [opts.createTime] - 创建时间  optional
      * @param {string} [opts.updateUser] - 修改人  optional
      * @param {string} [opts.updateTime] - 修改时间  optional
      * @param {string} [opts.content] - 脚本内容  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseInteger gpdjmcRpcResponseInteger
      */

  gravityParticleDubboJobManagerSaveJobScript (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerSaveJobScript"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerSaveJobScript"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerSaveJobScript"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerSaveJobScript"
      )
    }

    let postBody = {}
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }
    if (opts.scriptName !== undefined && opts.scriptName !== null) {
      postBody['scriptName'] = opts.scriptName
    }
    if (opts.scriptType !== undefined && opts.scriptType !== null) {
      postBody['scriptType'] = opts.scriptType
    }
    if (opts.scriptDesc !== undefined && opts.scriptDesc !== null) {
      postBody['scriptDesc'] = opts.scriptDesc
    }
    if (opts.scriptSourceType !== undefined && opts.scriptSourceType !== null) {
      postBody['scriptSourceType'] = opts.scriptSourceType
    }
    if (opts.jobId !== undefined && opts.jobId !== null) {
      postBody['jobId'] = opts.jobId
    }
    if (opts.deleteFlag !== undefined && opts.deleteFlag !== null) {
      postBody['deleteFlag'] = opts.deleteFlag
    }
    if (opts.creator !== undefined && opts.creator !== null) {
      postBody['creator'] = opts.creator
    }
    if (opts.createTime !== undefined && opts.createTime !== null) {
      postBody['createTime'] = opts.createTime
    }
    if (opts.updateUser !== undefined && opts.updateUser !== null) {
      postBody['updateUser'] = opts.updateUser
    }
    if (opts.updateTime !== undefined && opts.updateTime !== null) {
      postBody['updateTime'] = opts.updateTime
    }
    if (opts.content !== undefined && opts.content !== null) {
      postBody['content'] = opts.content
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerSaveJobScript with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerSaveJobScript',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  保存作业模型相关信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {integer} [opts.id] - 主键Id,为空时保存，不为空时更新  optional
      * @param {integer} [opts.jobId] - 作业Id  optional
      * @param {integer} [opts.modelTableId] - 模型Id  optional
      * @param {integer} [opts.deleteFlag] - 删除标识  optional
      * @param {string} [opts.updateTime] - 更新时间  optional
      * @param {string} [opts.tableName] - 表名  optional
      * @param {string} [opts.tableNameCh] - 表中文名称  optional
      * @param {string} [opts.databaseName] - 数据库名称  optional
      * @param {string} [opts.workspaceCode] - 工作空间code  optional
      * @param {string} [opts.channel] - 数据来源渠道  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseInteger gpdjmcRpcResponseInteger
      */

  gravityParticleDubboJobManagerSaveDmrModelJob (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerSaveDmrModelJob"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerSaveDmrModelJob"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerSaveDmrModelJob"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerSaveDmrModelJob"
      )
    }

    let postBody = {}
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }
    if (opts.jobId !== undefined && opts.jobId !== null) {
      postBody['jobId'] = opts.jobId
    }
    if (opts.modelTableId !== undefined && opts.modelTableId !== null) {
      postBody['modelTableId'] = opts.modelTableId
    }
    if (opts.deleteFlag !== undefined && opts.deleteFlag !== null) {
      postBody['deleteFlag'] = opts.deleteFlag
    }
    if (opts.updateTime !== undefined && opts.updateTime !== null) {
      postBody['updateTime'] = opts.updateTime
    }
    if (opts.tableName !== undefined && opts.tableName !== null) {
      postBody['tableName'] = opts.tableName
    }
    if (opts.tableNameCh !== undefined && opts.tableNameCh !== null) {
      postBody['tableNameCh'] = opts.tableNameCh
    }
    if (opts.databaseName !== undefined && opts.databaseName !== null) {
      postBody['databaseName'] = opts.databaseName
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.channel !== undefined && opts.channel !== null) {
      postBody['channel'] = opts.channel
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerSaveDmrModelJob with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerSaveDmrModelJob',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据查询条件返回作业Id
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {string} [opts.databaseName] - 数据库名  optional
      * @param {string} [opts.tableName] - 表名  optional
      * @param {string} [opts.workspaceCode] - 工作空间code  optional
      * @param {string} [opts.jobName] - 作业名  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseListInteger gpdjmcRpcResponseListInteger
      */

  gravityParticleDubboJobManagerSearchJobId (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerSearchJobId"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerSearchJobId"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerSearchJobId"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerSearchJobId"
      )
    }

    let postBody = {}
    if (opts.databaseName !== undefined && opts.databaseName !== null) {
      postBody['databaseName'] = opts.databaseName
    }
    if (opts.tableName !== undefined && opts.tableName !== null) {
      postBody['tableName'] = opts.tableName
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerSearchJobId with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerSearchJobId',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据查询条件返回作业关联的模型信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {string} [opts.databaseName] - 数据库名  optional
      * @param {string} [opts.tableName] - 表名  optional
      * @param {string} [opts.workspaceCode] - 工作空间code  optional
      * @param {string} [opts.jobName] - 作业名  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseListDmrModelJobRDTO gpdjmcRpcResponseListDmrModelJobRDTO
      */

  gravityParticleDubboJobManagerJobQuery (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerJobQuery"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerJobQuery"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerJobQuery"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerJobQuery"
      )
    }

    let postBody = {}
    if (opts.databaseName !== undefined && opts.databaseName !== null) {
      postBody['databaseName'] = opts.databaseName
    }
    if (opts.tableName !== undefined && opts.tableName !== null) {
      postBody['tableName'] = opts.tableName
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerJobQuery with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerJobQuery',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据查询条件返回作业关联的模型信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {integer} [opts.jobId] - 作业Id  optional
      * @param {array} [opts.jobIdList] - 作业Id列表  optional
      * @param {integer} [opts.deleteFlag] - 删除标识  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseListDmrModelJobRDTO gpdjmcRpcResponseListDmrModelJobRDTO
      */

  gravityParticleDubboJobManagerSearchDmrModelJob (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerSearchDmrModelJob"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerSearchDmrModelJob"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerSearchDmrModelJob"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerSearchDmrModelJob"
      )
    }

    let postBody = {}
    if (opts.jobId !== undefined && opts.jobId !== null) {
      postBody['jobId'] = opts.jobId
    }
    if (opts.jobIdList !== undefined && opts.jobIdList !== null) {
      postBody['jobIdList'] = opts.jobIdList
    }
    if (opts.deleteFlag !== undefined && opts.deleteFlag !== null) {
      postBody['deleteFlag'] = opts.deleteFlag
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerSearchDmrModelJob with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerSearchDmrModelJob',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据任务名字模糊查询
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {string} opts.jobName
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseListSchedJobDepDTO gpdjmcRpcResponseListSchedJobDepDTO
      */

  gravityParticleDubboJobManagerSearchByJobName (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerSearchByJobName"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerSearchByJobName"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerSearchByJobName"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerSearchByJobName"
      )
    }
    if (opts.jobName === undefined || opts.jobName === null) {
      throw new Error(
        "Missing the required parameter 'opts.jobName' when calling gravityParticleDubboJobManagerSearchByJobName"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      queryParams['jobName'] = opts.jobName
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerSearchByJobName with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerSearchByJobName',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据作业名模糊查询或JobQueryDTO查询
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {string} [opts.databaseName] - 数据库名  optional
      * @param {string} [opts.tableName] - 表名  optional
      * @param {string} [opts.workspaceCode] - 工作空间code  optional
      * @param {string} [opts.jobName] - 作业名  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseListSchedJobResDTO gpdjmcRpcResponseListSchedJobResDTO
      */

  gravityParticleDubboJobManagerSearchSchedJob (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerSearchSchedJob"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerSearchSchedJob"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerSearchSchedJob"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerSearchSchedJob"
      )
    }

    let postBody = {}
    if (opts.databaseName !== undefined && opts.databaseName !== null) {
      postBody['databaseName'] = opts.databaseName
    }
    if (opts.tableName !== undefined && opts.tableName !== null) {
      postBody['tableName'] = opts.tableName
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerSearchSchedJob with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerSearchSchedJob',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据作业名模糊查询作业
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {string} [opts.userName] - 登录用户名  optional
      * @param {string} [opts.jobName] - 作业名  optional
      * @param {string} [opts.cstJobName] - 客户作业名称  optional
      * @param {string} [opts.enable] - 是否启用  optional
      * @param {string} [opts.workspaceCode] - 工作空间code  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseListSchedJobDTO gpdjmcRpcResponseListSchedJobDTO
      */

  gravityParticleDubboJobManagerListJob (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerListJob"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerListJob"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerListJob"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerListJob"
      )
    }

    let postBody = {}
    if (opts.userName !== undefined && opts.userName !== null) {
      postBody['userName'] = opts.userName
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.cstJobName !== undefined && opts.cstJobName !== null) {
      postBody['cstJobName'] = opts.cstJobName
    }
    if (opts.enable !== undefined && opts.enable !== null) {
      postBody['enable'] = opts.enable
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerListJob with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerListJob',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取作业详细信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {string} opts.jobName
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseCalcJobResultDTO gpdjmcRpcResponseCalcJobResultDTO
      */

  gravityParticleDubboJobManagerCalcJobDetail (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerCalcJobDetail"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerCalcJobDetail"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerCalcJobDetail"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerCalcJobDetail"
      )
    }
    if (opts.jobName === undefined || opts.jobName === null) {
      throw new Error(
        "Missing the required parameter 'opts.jobName' when calling gravityParticleDubboJobManagerCalcJobDetail"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      queryParams['jobName'] = opts.jobName
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerCalcJobDetail with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerCalcJobDetail',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  校验作业规则
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {integer} [opts.projectId]   optional
      * @param {string} [opts.projectName]   optional
      * @param {boolean} [opts.projectNameMatch]   optional
      * @param {string} [opts.nameKeyWord]   optional
      * @param {string} [opts.relationType]   optional
      * @param {integer} [opts.modelId]   optional
      * @param {string} [opts.modelName]   optional
      * @param {boolean} [opts.modelNameMatch]   optional
      * @param {string} [opts.gitUrl]   optional
      * @param {integer} [opts.tableId]   optional
      * @param {string} [opts.databaseName]   optional
      * @param {integer} [opts.marketId]   optional
      * @param {string} [opts.marketCode]   optional
      * @param {string} [opts.marketName]   optional
      * @param {string} [opts.redirectType]   optional
      * @param {string} [opts.tableName]   optional
      * @param {boolean} [opts.tableNameMatch]   optional
      * @param {string} [opts.jobName]   optional
      * @param {string} [opts.jobSystem]   optional
      * @param {string} [opts.triggerType]   optional
      * @param {gpdjmcTriggerConfigDTO} [opts.triggerConfig]   optional
      * @param {string} [opts.zipCommand]   optional
      * @param {string} [opts.zipFileName]   optional
      * @param {string} [opts.zipParams]   optional
      * @param {string} [opts.dependencies]   optional
      * @param {string} [opts.manager]   optional
      * @param {string} [opts.cooperator]   optional
      * @param {string} [opts.priority] - 优先级，l1 - l4  optional
      * @param {string} [opts.jobDesc]   optional
      * @param {string} [opts.scriptType]   optional
      * @param {string} [opts.runScript]   optional
      * @param {array} [opts.scriptContent]   optional
      * @param {string} [opts.cycle]   optional
      * @param {string} [opts.sequence]   optional
      * @param {string} [opts.lifeCycle]   optional
      * @param {boolean} [opts.retry]   optional
      * @param {integer} [opts.retryCount]   optional
      * @param {integer} [opts.retryInterval]   optional
      * @param {string} [opts.notifyOccasion]   optional
      * @param {string} [opts.notifyTime]   optional
      * @param {string} [opts.notifyPattern]   optional
      * @param {string} [opts.notifier]   optional
      * @param {string} [opts.startRunTime]   optional
      * @param {string} [opts.endRunTime]   optional
      * @param {string} [opts.runTime]   optional
      * @param {string} [opts.runDate]   optional
      * @param {string} [opts.flowId]   optional
      * @param {string} [opts.taskId]   optional
      * @param {string} [opts.userAccount]   optional
      * @param {string} [opts.userPwd]   optional
      * @param {string} [opts.markIds]   optional
      * @param {integer} [opts.runTimeOut]   optional
      * @param {string} [opts.scriptSourceType]   optional
      * @param {string} [opts.scriptTemplate]   optional
      * @param {array} [opts.dmrTableIds]   optional
      * @param {array} [opts.dmrTables]   optional
      * @param {array} [opts.gitFilesList]   optional
      * @param {boolean} [opts.isDeploy]   optional
      * @param {string} [opts.scriptPath]   optional
      * @param {array} [opts.scriptByte]   optional
      * @param {integer} [opts.fileId]   optional
      * @param {string} [opts.publishDesc]   optional
      * @param {string} [opts.scriptInfo]   optional
      * @param {integer} [opts.version]   optional
      * @param {string} [opts.channel]   optional
      * @param {string} [opts.sequenceStartTime]   optional
      * @param {string} [opts.sequenceEndTime]   optional
      * @param {integer} [opts.sequenceInterval]   optional
      * @param {string} [opts.runParams]   optional
      * @param {string} [opts.runQueue]   optional
      * @param {sparkJarRunParams} [opts.sparkJarRunParams]   optional
      * @param {array} [opts.submitConf]   optional
      * @param {integer} [opts.jobStatus]   optional
      * @param {string} [opts.resourceCode] - 计算资源组code  optional
      * @param {string} [opts.workspaceCode] - 工作空间code  optional
      * @param {string} [opts.cstJobName] - 客户作业名称  optional
      * @param {boolean} [opts.fromGravity]   optional
      * @param {string} [opts.processType] - 处理类型  optional
      * @param {string} [opts.companyCode] - 租户code  optional
      * @param {string} [opts.windowStartTime] - 窗口期开始时间  optional
      * @param {string} [opts.windowEndTime] - 窗口期结束时间  optional
      * @param {string} [opts.scriptUrl] - 脚本存储路径  optional
      * @param {string} [opts.resourceName] - 计算资源组名称  optional
      * @param {string} [opts.datasourceId] - 数据源ID，在一些要访问外部源的任务中，需要指定该数据源ID  optional
      * @param {array} [opts.inputParams] - 输入参数列表  optional
      * @param {array} [opts.outputParams] - 输出参数列表  optional
      * @param {gpdjmcLoopParam} [opts.loopParam] - 循环任务参数  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseBoolean gpdjmcRpcResponseBoolean
      */

  gravityParticleDubboJobManagerValidateJobRules (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerValidateJobRules"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerValidateJobRules"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerValidateJobRules"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerValidateJobRules"
      )
    }

    let postBody = {}
    if (opts.projectId !== undefined && opts.projectId !== null) {
      postBody['projectId'] = opts.projectId
    }
    if (opts.projectName !== undefined && opts.projectName !== null) {
      postBody['projectName'] = opts.projectName
    }
    if (opts.projectNameMatch !== undefined && opts.projectNameMatch !== null) {
      postBody['projectNameMatch'] = opts.projectNameMatch
    }
    if (opts.nameKeyWord !== undefined && opts.nameKeyWord !== null) {
      postBody['nameKeyWord'] = opts.nameKeyWord
    }
    if (opts.relationType !== undefined && opts.relationType !== null) {
      postBody['relationType'] = opts.relationType
    }
    if (opts.modelId !== undefined && opts.modelId !== null) {
      postBody['modelId'] = opts.modelId
    }
    if (opts.modelName !== undefined && opts.modelName !== null) {
      postBody['modelName'] = opts.modelName
    }
    if (opts.modelNameMatch !== undefined && opts.modelNameMatch !== null) {
      postBody['modelNameMatch'] = opts.modelNameMatch
    }
    if (opts.gitUrl !== undefined && opts.gitUrl !== null) {
      postBody['gitUrl'] = opts.gitUrl
    }
    if (opts.tableId !== undefined && opts.tableId !== null) {
      postBody['tableId'] = opts.tableId
    }
    if (opts.databaseName !== undefined && opts.databaseName !== null) {
      postBody['databaseName'] = opts.databaseName
    }
    if (opts.marketId !== undefined && opts.marketId !== null) {
      postBody['marketId'] = opts.marketId
    }
    if (opts.marketCode !== undefined && opts.marketCode !== null) {
      postBody['marketCode'] = opts.marketCode
    }
    if (opts.marketName !== undefined && opts.marketName !== null) {
      postBody['marketName'] = opts.marketName
    }
    if (opts.redirectType !== undefined && opts.redirectType !== null) {
      postBody['redirectType'] = opts.redirectType
    }
    if (opts.tableName !== undefined && opts.tableName !== null) {
      postBody['tableName'] = opts.tableName
    }
    if (opts.tableNameMatch !== undefined && opts.tableNameMatch !== null) {
      postBody['tableNameMatch'] = opts.tableNameMatch
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.jobSystem !== undefined && opts.jobSystem !== null) {
      postBody['jobSystem'] = opts.jobSystem
    }
    if (opts.triggerType !== undefined && opts.triggerType !== null) {
      postBody['triggerType'] = opts.triggerType
    }
    if (opts.triggerConfig !== undefined && opts.triggerConfig !== null) {
      postBody['triggerConfig'] = opts.triggerConfig
    }
    if (opts.zipCommand !== undefined && opts.zipCommand !== null) {
      postBody['zipCommand'] = opts.zipCommand
    }
    if (opts.zipFileName !== undefined && opts.zipFileName !== null) {
      postBody['zipFileName'] = opts.zipFileName
    }
    if (opts.zipParams !== undefined && opts.zipParams !== null) {
      postBody['zipParams'] = opts.zipParams
    }
    if (opts.dependencies !== undefined && opts.dependencies !== null) {
      postBody['dependencies'] = opts.dependencies
    }
    if (opts.manager !== undefined && opts.manager !== null) {
      postBody['manager'] = opts.manager
    }
    if (opts.cooperator !== undefined && opts.cooperator !== null) {
      postBody['cooperator'] = opts.cooperator
    }
    if (opts.priority !== undefined && opts.priority !== null) {
      postBody['priority'] = opts.priority
    }
    if (opts.jobDesc !== undefined && opts.jobDesc !== null) {
      postBody['jobDesc'] = opts.jobDesc
    }
    if (opts.scriptType !== undefined && opts.scriptType !== null) {
      postBody['scriptType'] = opts.scriptType
    }
    if (opts.runScript !== undefined && opts.runScript !== null) {
      postBody['runScript'] = opts.runScript
    }
    if (opts.scriptContent !== undefined && opts.scriptContent !== null) {
      postBody['scriptContent'] = opts.scriptContent
    }
    if (opts.cycle !== undefined && opts.cycle !== null) {
      postBody['cycle'] = opts.cycle
    }
    if (opts.sequence !== undefined && opts.sequence !== null) {
      postBody['sequence'] = opts.sequence
    }
    if (opts.lifeCycle !== undefined && opts.lifeCycle !== null) {
      postBody['lifeCycle'] = opts.lifeCycle
    }
    if (opts.retry !== undefined && opts.retry !== null) {
      postBody['retry'] = opts.retry
    }
    if (opts.retryCount !== undefined && opts.retryCount !== null) {
      postBody['retryCount'] = opts.retryCount
    }
    if (opts.retryInterval !== undefined && opts.retryInterval !== null) {
      postBody['retryInterval'] = opts.retryInterval
    }
    if (opts.notifyOccasion !== undefined && opts.notifyOccasion !== null) {
      postBody['notifyOccasion'] = opts.notifyOccasion
    }
    if (opts.notifyTime !== undefined && opts.notifyTime !== null) {
      postBody['notifyTime'] = opts.notifyTime
    }
    if (opts.notifyPattern !== undefined && opts.notifyPattern !== null) {
      postBody['notifyPattern'] = opts.notifyPattern
    }
    if (opts.notifier !== undefined && opts.notifier !== null) {
      postBody['notifier'] = opts.notifier
    }
    if (opts.startRunTime !== undefined && opts.startRunTime !== null) {
      postBody['startRunTime'] = opts.startRunTime
    }
    if (opts.endRunTime !== undefined && opts.endRunTime !== null) {
      postBody['endRunTime'] = opts.endRunTime
    }
    if (opts.runTime !== undefined && opts.runTime !== null) {
      postBody['runTime'] = opts.runTime
    }
    if (opts.runDate !== undefined && opts.runDate !== null) {
      postBody['runDate'] = opts.runDate
    }
    if (opts.flowId !== undefined && opts.flowId !== null) {
      postBody['flowId'] = opts.flowId
    }
    if (opts.taskId !== undefined && opts.taskId !== null) {
      postBody['taskId'] = opts.taskId
    }
    if (opts.userAccount !== undefined && opts.userAccount !== null) {
      postBody['userAccount'] = opts.userAccount
    }
    if (opts.userPwd !== undefined && opts.userPwd !== null) {
      postBody['userPwd'] = opts.userPwd
    }
    if (opts.markIds !== undefined && opts.markIds !== null) {
      postBody['markIds'] = opts.markIds
    }
    if (opts.runTimeOut !== undefined && opts.runTimeOut !== null) {
      postBody['runTimeOut'] = opts.runTimeOut
    }
    if (opts.scriptSourceType !== undefined && opts.scriptSourceType !== null) {
      postBody['scriptSourceType'] = opts.scriptSourceType
    }
    if (opts.scriptTemplate !== undefined && opts.scriptTemplate !== null) {
      postBody['scriptTemplate'] = opts.scriptTemplate
    }
    if (opts.dmrTableIds !== undefined && opts.dmrTableIds !== null) {
      postBody['dmrTableIds'] = opts.dmrTableIds
    }
    if (opts.dmrTables !== undefined && opts.dmrTables !== null) {
      postBody['dmrTables'] = opts.dmrTables
    }
    if (opts.gitFilesList !== undefined && opts.gitFilesList !== null) {
      postBody['gitFilesList'] = opts.gitFilesList
    }
    if (opts.isDeploy !== undefined && opts.isDeploy !== null) {
      postBody['isDeploy'] = opts.isDeploy
    }
    if (opts.scriptPath !== undefined && opts.scriptPath !== null) {
      postBody['scriptPath'] = opts.scriptPath
    }
    if (opts.scriptByte !== undefined && opts.scriptByte !== null) {
      postBody['scriptByte'] = opts.scriptByte
    }
    if (opts.fileId !== undefined && opts.fileId !== null) {
      postBody['fileId'] = opts.fileId
    }
    if (opts.publishDesc !== undefined && opts.publishDesc !== null) {
      postBody['publishDesc'] = opts.publishDesc
    }
    if (opts.scriptInfo !== undefined && opts.scriptInfo !== null) {
      postBody['scriptInfo'] = opts.scriptInfo
    }
    if (opts.version !== undefined && opts.version !== null) {
      postBody['version'] = opts.version
    }
    if (opts.channel !== undefined && opts.channel !== null) {
      postBody['channel'] = opts.channel
    }
    if (
      opts.sequenceStartTime !== undefined &&
      opts.sequenceStartTime !== null
    ) {
      postBody['sequenceStartTime'] = opts.sequenceStartTime
    }
    if (opts.sequenceEndTime !== undefined && opts.sequenceEndTime !== null) {
      postBody['sequenceEndTime'] = opts.sequenceEndTime
    }
    if (opts.sequenceInterval !== undefined && opts.sequenceInterval !== null) {
      postBody['sequenceInterval'] = opts.sequenceInterval
    }
    if (opts.runParams !== undefined && opts.runParams !== null) {
      postBody['runParams'] = opts.runParams
    }
    if (opts.runQueue !== undefined && opts.runQueue !== null) {
      postBody['runQueue'] = opts.runQueue
    }
    if (
      opts.sparkJarRunParams !== undefined &&
      opts.sparkJarRunParams !== null
    ) {
      postBody['sparkJarRunParams'] = opts.sparkJarRunParams
    }
    if (opts.submitConf !== undefined && opts.submitConf !== null) {
      postBody['submitConf'] = opts.submitConf
    }
    if (opts.jobStatus !== undefined && opts.jobStatus !== null) {
      postBody['jobStatus'] = opts.jobStatus
    }
    if (opts.resourceCode !== undefined && opts.resourceCode !== null) {
      postBody['resourceCode'] = opts.resourceCode
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.cstJobName !== undefined && opts.cstJobName !== null) {
      postBody['cstJobName'] = opts.cstJobName
    }
    if (opts.fromGravity !== undefined && opts.fromGravity !== null) {
      postBody['fromGravity'] = opts.fromGravity
    }
    if (opts.processType !== undefined && opts.processType !== null) {
      postBody['processType'] = opts.processType
    }
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      postBody['companyCode'] = opts.companyCode
    }
    if (opts.windowStartTime !== undefined && opts.windowStartTime !== null) {
      postBody['windowStartTime'] = opts.windowStartTime
    }
    if (opts.windowEndTime !== undefined && opts.windowEndTime !== null) {
      postBody['windowEndTime'] = opts.windowEndTime
    }
    if (opts.scriptUrl !== undefined && opts.scriptUrl !== null) {
      postBody['scriptUrl'] = opts.scriptUrl
    }
    if (opts.resourceName !== undefined && opts.resourceName !== null) {
      postBody['resourceName'] = opts.resourceName
    }
    if (opts.datasourceId !== undefined && opts.datasourceId !== null) {
      postBody['datasourceId'] = opts.datasourceId
    }
    if (opts.inputParams !== undefined && opts.inputParams !== null) {
      postBody['inputParams'] = opts.inputParams
    }
    if (opts.outputParams !== undefined && opts.outputParams !== null) {
      postBody['outputParams'] = opts.outputParams
    }
    if (opts.loopParam !== undefined && opts.loopParam !== null) {
      postBody['loopParam'] = opts.loopParam
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerValidateJobRules with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerValidateJobRules',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  脚本校验
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {array} [opts.scriptByte] - 脚本文件字节数组  optional
      * @param {string} [opts.scriptName] - 脚本名称  optional
      * @param {string} [opts.jobName] - 任务名称  optional
      * @param {string} [opts.scriptType] - 脚本类型  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseBoolean gpdjmcRpcResponseBoolean
      */

  gravityParticleDubboJobManagerVerifyScriptFile (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerVerifyScriptFile"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerVerifyScriptFile"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerVerifyScriptFile"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerVerifyScriptFile"
      )
    }

    let postBody = {}
    if (opts.scriptByte !== undefined && opts.scriptByte !== null) {
      postBody['scriptByte'] = opts.scriptByte
    }
    if (opts.scriptName !== undefined && opts.scriptName !== null) {
      postBody['scriptName'] = opts.scriptName
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.scriptType !== undefined && opts.scriptType !== null) {
      postBody['scriptType'] = opts.scriptType
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerVerifyScriptFile with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerVerifyScriptFile',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据作业类型，校验脚本文件扩展名是否合法
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {array} [opts.scriptByte] - 脚本文件字节数组  optional
      * @param {string} [opts.scriptName] - 脚本名称  optional
      * @param {string} [opts.jobName] - 任务名称  optional
      * @param {string} [opts.scriptType] - 脚本类型  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseListSchedJobDTO gpdjmcRpcResponseListSchedJobDTO
      */

  gravityParticleDubboJobManagerVerifyScriptFileList (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerVerifyScriptFileList"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerVerifyScriptFileList"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerVerifyScriptFileList"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerVerifyScriptFileList"
      )
    }

    let postBody = {}
    if (opts.scriptByte !== undefined && opts.scriptByte !== null) {
      postBody['scriptByte'] = opts.scriptByte
    }
    if (opts.scriptName !== undefined && opts.scriptName !== null) {
      postBody['scriptName'] = opts.scriptName
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.scriptType !== undefined && opts.scriptType !== null) {
      postBody['scriptType'] = opts.scriptType
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerVerifyScriptFileList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerVerifyScriptFileList',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  发布作业
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {integer} [opts.projectId]   optional
      * @param {string} [opts.projectName]   optional
      * @param {boolean} [opts.projectNameMatch]   optional
      * @param {string} [opts.nameKeyWord]   optional
      * @param {string} [opts.relationType]   optional
      * @param {integer} [opts.modelId]   optional
      * @param {string} [opts.modelName]   optional
      * @param {boolean} [opts.modelNameMatch]   optional
      * @param {string} [opts.gitUrl]   optional
      * @param {integer} [opts.tableId]   optional
      * @param {string} [opts.databaseName]   optional
      * @param {integer} [opts.marketId]   optional
      * @param {string} [opts.marketCode]   optional
      * @param {string} [opts.marketName]   optional
      * @param {string} [opts.redirectType]   optional
      * @param {string} [opts.tableName]   optional
      * @param {boolean} [opts.tableNameMatch]   optional
      * @param {string} [opts.jobName]   optional
      * @param {string} [opts.jobSystem]   optional
      * @param {string} [opts.triggerType]   optional
      * @param {gpdjmcTriggerConfigDTO} [opts.triggerConfig]   optional
      * @param {string} [opts.zipCommand]   optional
      * @param {string} [opts.zipFileName]   optional
      * @param {string} [opts.zipParams]   optional
      * @param {string} [opts.dependencies]   optional
      * @param {string} [opts.manager]   optional
      * @param {string} [opts.cooperator]   optional
      * @param {string} [opts.priority] - 优先级，l1 - l4  optional
      * @param {string} [opts.jobDesc]   optional
      * @param {string} [opts.scriptType]   optional
      * @param {string} [opts.runScript]   optional
      * @param {array} [opts.scriptContent]   optional
      * @param {string} [opts.cycle]   optional
      * @param {string} [opts.sequence]   optional
      * @param {string} [opts.lifeCycle]   optional
      * @param {boolean} [opts.retry]   optional
      * @param {integer} [opts.retryCount]   optional
      * @param {integer} [opts.retryInterval]   optional
      * @param {string} [opts.notifyOccasion]   optional
      * @param {string} [opts.notifyTime]   optional
      * @param {string} [opts.notifyPattern]   optional
      * @param {string} [opts.notifier]   optional
      * @param {string} [opts.startRunTime]   optional
      * @param {string} [opts.endRunTime]   optional
      * @param {string} [opts.runTime]   optional
      * @param {string} [opts.runDate]   optional
      * @param {string} [opts.flowId]   optional
      * @param {string} [opts.taskId]   optional
      * @param {string} [opts.userAccount]   optional
      * @param {string} [opts.userPwd]   optional
      * @param {string} [opts.markIds]   optional
      * @param {integer} [opts.runTimeOut]   optional
      * @param {string} [opts.scriptSourceType]   optional
      * @param {string} [opts.scriptTemplate]   optional
      * @param {array} [opts.dmrTableIds]   optional
      * @param {array} [opts.dmrTables]   optional
      * @param {array} [opts.gitFilesList]   optional
      * @param {boolean} [opts.isDeploy]   optional
      * @param {string} [opts.scriptPath]   optional
      * @param {array} [opts.scriptByte]   optional
      * @param {integer} [opts.fileId]   optional
      * @param {string} [opts.publishDesc]   optional
      * @param {string} [opts.scriptInfo]   optional
      * @param {integer} [opts.version]   optional
      * @param {string} [opts.channel]   optional
      * @param {string} [opts.sequenceStartTime]   optional
      * @param {string} [opts.sequenceEndTime]   optional
      * @param {integer} [opts.sequenceInterval]   optional
      * @param {string} [opts.runParams]   optional
      * @param {string} [opts.runQueue]   optional
      * @param {sparkJarRunParams} [opts.sparkJarRunParams]   optional
      * @param {array} [opts.submitConf]   optional
      * @param {integer} [opts.jobStatus]   optional
      * @param {string} [opts.resourceCode] - 计算资源组code  optional
      * @param {string} [opts.workspaceCode] - 工作空间code  optional
      * @param {string} [opts.cstJobName] - 客户作业名称  optional
      * @param {boolean} [opts.fromGravity]   optional
      * @param {string} [opts.processType] - 处理类型  optional
      * @param {string} [opts.companyCode] - 租户code  optional
      * @param {string} [opts.windowStartTime] - 窗口期开始时间  optional
      * @param {string} [opts.windowEndTime] - 窗口期结束时间  optional
      * @param {string} [opts.scriptUrl] - 脚本存储路径  optional
      * @param {string} [opts.resourceName] - 计算资源组名称  optional
      * @param {string} [opts.datasourceId] - 数据源ID，在一些要访问外部源的任务中，需要指定该数据源ID  optional
      * @param {array} [opts.inputParams] - 输入参数列表  optional
      * @param {array} [opts.outputParams] - 输出参数列表  optional
      * @param {gpdjmcLoopParam} [opts.loopParam] - 循环任务参数  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseBoolean gpdjmcRpcResponseBoolean
      */

  gravityParticleDubboJobManagerDeployJob (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerDeployJob"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerDeployJob"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerDeployJob"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerDeployJob"
      )
    }

    let postBody = {}
    if (opts.projectId !== undefined && opts.projectId !== null) {
      postBody['projectId'] = opts.projectId
    }
    if (opts.projectName !== undefined && opts.projectName !== null) {
      postBody['projectName'] = opts.projectName
    }
    if (opts.projectNameMatch !== undefined && opts.projectNameMatch !== null) {
      postBody['projectNameMatch'] = opts.projectNameMatch
    }
    if (opts.nameKeyWord !== undefined && opts.nameKeyWord !== null) {
      postBody['nameKeyWord'] = opts.nameKeyWord
    }
    if (opts.relationType !== undefined && opts.relationType !== null) {
      postBody['relationType'] = opts.relationType
    }
    if (opts.modelId !== undefined && opts.modelId !== null) {
      postBody['modelId'] = opts.modelId
    }
    if (opts.modelName !== undefined && opts.modelName !== null) {
      postBody['modelName'] = opts.modelName
    }
    if (opts.modelNameMatch !== undefined && opts.modelNameMatch !== null) {
      postBody['modelNameMatch'] = opts.modelNameMatch
    }
    if (opts.gitUrl !== undefined && opts.gitUrl !== null) {
      postBody['gitUrl'] = opts.gitUrl
    }
    if (opts.tableId !== undefined && opts.tableId !== null) {
      postBody['tableId'] = opts.tableId
    }
    if (opts.databaseName !== undefined && opts.databaseName !== null) {
      postBody['databaseName'] = opts.databaseName
    }
    if (opts.marketId !== undefined && opts.marketId !== null) {
      postBody['marketId'] = opts.marketId
    }
    if (opts.marketCode !== undefined && opts.marketCode !== null) {
      postBody['marketCode'] = opts.marketCode
    }
    if (opts.marketName !== undefined && opts.marketName !== null) {
      postBody['marketName'] = opts.marketName
    }
    if (opts.redirectType !== undefined && opts.redirectType !== null) {
      postBody['redirectType'] = opts.redirectType
    }
    if (opts.tableName !== undefined && opts.tableName !== null) {
      postBody['tableName'] = opts.tableName
    }
    if (opts.tableNameMatch !== undefined && opts.tableNameMatch !== null) {
      postBody['tableNameMatch'] = opts.tableNameMatch
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.jobSystem !== undefined && opts.jobSystem !== null) {
      postBody['jobSystem'] = opts.jobSystem
    }
    if (opts.triggerType !== undefined && opts.triggerType !== null) {
      postBody['triggerType'] = opts.triggerType
    }
    if (opts.triggerConfig !== undefined && opts.triggerConfig !== null) {
      postBody['triggerConfig'] = opts.triggerConfig
    }
    if (opts.zipCommand !== undefined && opts.zipCommand !== null) {
      postBody['zipCommand'] = opts.zipCommand
    }
    if (opts.zipFileName !== undefined && opts.zipFileName !== null) {
      postBody['zipFileName'] = opts.zipFileName
    }
    if (opts.zipParams !== undefined && opts.zipParams !== null) {
      postBody['zipParams'] = opts.zipParams
    }
    if (opts.dependencies !== undefined && opts.dependencies !== null) {
      postBody['dependencies'] = opts.dependencies
    }
    if (opts.manager !== undefined && opts.manager !== null) {
      postBody['manager'] = opts.manager
    }
    if (opts.cooperator !== undefined && opts.cooperator !== null) {
      postBody['cooperator'] = opts.cooperator
    }
    if (opts.priority !== undefined && opts.priority !== null) {
      postBody['priority'] = opts.priority
    }
    if (opts.jobDesc !== undefined && opts.jobDesc !== null) {
      postBody['jobDesc'] = opts.jobDesc
    }
    if (opts.scriptType !== undefined && opts.scriptType !== null) {
      postBody['scriptType'] = opts.scriptType
    }
    if (opts.runScript !== undefined && opts.runScript !== null) {
      postBody['runScript'] = opts.runScript
    }
    if (opts.scriptContent !== undefined && opts.scriptContent !== null) {
      postBody['scriptContent'] = opts.scriptContent
    }
    if (opts.cycle !== undefined && opts.cycle !== null) {
      postBody['cycle'] = opts.cycle
    }
    if (opts.sequence !== undefined && opts.sequence !== null) {
      postBody['sequence'] = opts.sequence
    }
    if (opts.lifeCycle !== undefined && opts.lifeCycle !== null) {
      postBody['lifeCycle'] = opts.lifeCycle
    }
    if (opts.retry !== undefined && opts.retry !== null) {
      postBody['retry'] = opts.retry
    }
    if (opts.retryCount !== undefined && opts.retryCount !== null) {
      postBody['retryCount'] = opts.retryCount
    }
    if (opts.retryInterval !== undefined && opts.retryInterval !== null) {
      postBody['retryInterval'] = opts.retryInterval
    }
    if (opts.notifyOccasion !== undefined && opts.notifyOccasion !== null) {
      postBody['notifyOccasion'] = opts.notifyOccasion
    }
    if (opts.notifyTime !== undefined && opts.notifyTime !== null) {
      postBody['notifyTime'] = opts.notifyTime
    }
    if (opts.notifyPattern !== undefined && opts.notifyPattern !== null) {
      postBody['notifyPattern'] = opts.notifyPattern
    }
    if (opts.notifier !== undefined && opts.notifier !== null) {
      postBody['notifier'] = opts.notifier
    }
    if (opts.startRunTime !== undefined && opts.startRunTime !== null) {
      postBody['startRunTime'] = opts.startRunTime
    }
    if (opts.endRunTime !== undefined && opts.endRunTime !== null) {
      postBody['endRunTime'] = opts.endRunTime
    }
    if (opts.runTime !== undefined && opts.runTime !== null) {
      postBody['runTime'] = opts.runTime
    }
    if (opts.runDate !== undefined && opts.runDate !== null) {
      postBody['runDate'] = opts.runDate
    }
    if (opts.flowId !== undefined && opts.flowId !== null) {
      postBody['flowId'] = opts.flowId
    }
    if (opts.taskId !== undefined && opts.taskId !== null) {
      postBody['taskId'] = opts.taskId
    }
    if (opts.userAccount !== undefined && opts.userAccount !== null) {
      postBody['userAccount'] = opts.userAccount
    }
    if (opts.userPwd !== undefined && opts.userPwd !== null) {
      postBody['userPwd'] = opts.userPwd
    }
    if (opts.markIds !== undefined && opts.markIds !== null) {
      postBody['markIds'] = opts.markIds
    }
    if (opts.runTimeOut !== undefined && opts.runTimeOut !== null) {
      postBody['runTimeOut'] = opts.runTimeOut
    }
    if (opts.scriptSourceType !== undefined && opts.scriptSourceType !== null) {
      postBody['scriptSourceType'] = opts.scriptSourceType
    }
    if (opts.scriptTemplate !== undefined && opts.scriptTemplate !== null) {
      postBody['scriptTemplate'] = opts.scriptTemplate
    }
    if (opts.dmrTableIds !== undefined && opts.dmrTableIds !== null) {
      postBody['dmrTableIds'] = opts.dmrTableIds
    }
    if (opts.dmrTables !== undefined && opts.dmrTables !== null) {
      postBody['dmrTables'] = opts.dmrTables
    }
    if (opts.gitFilesList !== undefined && opts.gitFilesList !== null) {
      postBody['gitFilesList'] = opts.gitFilesList
    }
    if (opts.isDeploy !== undefined && opts.isDeploy !== null) {
      postBody['isDeploy'] = opts.isDeploy
    }
    if (opts.scriptPath !== undefined && opts.scriptPath !== null) {
      postBody['scriptPath'] = opts.scriptPath
    }
    if (opts.scriptByte !== undefined && opts.scriptByte !== null) {
      postBody['scriptByte'] = opts.scriptByte
    }
    if (opts.fileId !== undefined && opts.fileId !== null) {
      postBody['fileId'] = opts.fileId
    }
    if (opts.publishDesc !== undefined && opts.publishDesc !== null) {
      postBody['publishDesc'] = opts.publishDesc
    }
    if (opts.scriptInfo !== undefined && opts.scriptInfo !== null) {
      postBody['scriptInfo'] = opts.scriptInfo
    }
    if (opts.version !== undefined && opts.version !== null) {
      postBody['version'] = opts.version
    }
    if (opts.channel !== undefined && opts.channel !== null) {
      postBody['channel'] = opts.channel
    }
    if (
      opts.sequenceStartTime !== undefined &&
      opts.sequenceStartTime !== null
    ) {
      postBody['sequenceStartTime'] = opts.sequenceStartTime
    }
    if (opts.sequenceEndTime !== undefined && opts.sequenceEndTime !== null) {
      postBody['sequenceEndTime'] = opts.sequenceEndTime
    }
    if (opts.sequenceInterval !== undefined && opts.sequenceInterval !== null) {
      postBody['sequenceInterval'] = opts.sequenceInterval
    }
    if (opts.runParams !== undefined && opts.runParams !== null) {
      postBody['runParams'] = opts.runParams
    }
    if (opts.runQueue !== undefined && opts.runQueue !== null) {
      postBody['runQueue'] = opts.runQueue
    }
    if (
      opts.sparkJarRunParams !== undefined &&
      opts.sparkJarRunParams !== null
    ) {
      postBody['sparkJarRunParams'] = opts.sparkJarRunParams
    }
    if (opts.submitConf !== undefined && opts.submitConf !== null) {
      postBody['submitConf'] = opts.submitConf
    }
    if (opts.jobStatus !== undefined && opts.jobStatus !== null) {
      postBody['jobStatus'] = opts.jobStatus
    }
    if (opts.resourceCode !== undefined && opts.resourceCode !== null) {
      postBody['resourceCode'] = opts.resourceCode
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.cstJobName !== undefined && opts.cstJobName !== null) {
      postBody['cstJobName'] = opts.cstJobName
    }
    if (opts.fromGravity !== undefined && opts.fromGravity !== null) {
      postBody['fromGravity'] = opts.fromGravity
    }
    if (opts.processType !== undefined && opts.processType !== null) {
      postBody['processType'] = opts.processType
    }
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      postBody['companyCode'] = opts.companyCode
    }
    if (opts.windowStartTime !== undefined && opts.windowStartTime !== null) {
      postBody['windowStartTime'] = opts.windowStartTime
    }
    if (opts.windowEndTime !== undefined && opts.windowEndTime !== null) {
      postBody['windowEndTime'] = opts.windowEndTime
    }
    if (opts.scriptUrl !== undefined && opts.scriptUrl !== null) {
      postBody['scriptUrl'] = opts.scriptUrl
    }
    if (opts.resourceName !== undefined && opts.resourceName !== null) {
      postBody['resourceName'] = opts.resourceName
    }
    if (opts.datasourceId !== undefined && opts.datasourceId !== null) {
      postBody['datasourceId'] = opts.datasourceId
    }
    if (opts.inputParams !== undefined && opts.inputParams !== null) {
      postBody['inputParams'] = opts.inputParams
    }
    if (opts.outputParams !== undefined && opts.outputParams !== null) {
      postBody['outputParams'] = opts.outputParams
    }
    if (opts.loopParam !== undefined && opts.loopParam !== null) {
      postBody['loopParam'] = opts.loopParam
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerDeployJob with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerDeployJob',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  编辑作业信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {integer} [opts.projectId]   optional
      * @param {string} [opts.projectName]   optional
      * @param {boolean} [opts.projectNameMatch]   optional
      * @param {string} [opts.nameKeyWord]   optional
      * @param {string} [opts.relationType]   optional
      * @param {integer} [opts.modelId]   optional
      * @param {string} [opts.modelName]   optional
      * @param {boolean} [opts.modelNameMatch]   optional
      * @param {string} [opts.gitUrl]   optional
      * @param {integer} [opts.tableId]   optional
      * @param {string} [opts.databaseName]   optional
      * @param {integer} [opts.marketId]   optional
      * @param {string} [opts.marketCode]   optional
      * @param {string} [opts.marketName]   optional
      * @param {string} [opts.redirectType]   optional
      * @param {string} [opts.tableName]   optional
      * @param {boolean} [opts.tableNameMatch]   optional
      * @param {string} [opts.jobName]   optional
      * @param {string} [opts.jobSystem]   optional
      * @param {string} [opts.triggerType]   optional
      * @param {gpdjmcTriggerConfigDTO} [opts.triggerConfig]   optional
      * @param {string} [opts.zipCommand]   optional
      * @param {string} [opts.zipFileName]   optional
      * @param {string} [opts.zipParams]   optional
      * @param {string} [opts.dependencies]   optional
      * @param {string} [opts.manager]   optional
      * @param {string} [opts.cooperator]   optional
      * @param {string} [opts.priority] - 优先级，l1 - l4  optional
      * @param {string} [opts.jobDesc]   optional
      * @param {string} [opts.scriptType]   optional
      * @param {string} [opts.runScript]   optional
      * @param {array} [opts.scriptContent]   optional
      * @param {string} [opts.cycle]   optional
      * @param {string} [opts.sequence]   optional
      * @param {string} [opts.lifeCycle]   optional
      * @param {boolean} [opts.retry]   optional
      * @param {integer} [opts.retryCount]   optional
      * @param {integer} [opts.retryInterval]   optional
      * @param {string} [opts.notifyOccasion]   optional
      * @param {string} [opts.notifyTime]   optional
      * @param {string} [opts.notifyPattern]   optional
      * @param {string} [opts.notifier]   optional
      * @param {string} [opts.startRunTime]   optional
      * @param {string} [opts.endRunTime]   optional
      * @param {string} [opts.runTime]   optional
      * @param {string} [opts.runDate]   optional
      * @param {string} [opts.flowId]   optional
      * @param {string} [opts.taskId]   optional
      * @param {string} [opts.userAccount]   optional
      * @param {string} [opts.userPwd]   optional
      * @param {string} [opts.markIds]   optional
      * @param {integer} [opts.runTimeOut]   optional
      * @param {string} [opts.scriptSourceType]   optional
      * @param {string} [opts.scriptTemplate]   optional
      * @param {array} [opts.dmrTableIds]   optional
      * @param {array} [opts.dmrTables]   optional
      * @param {array} [opts.gitFilesList]   optional
      * @param {boolean} [opts.isDeploy]   optional
      * @param {string} [opts.scriptPath]   optional
      * @param {array} [opts.scriptByte]   optional
      * @param {integer} [opts.fileId]   optional
      * @param {string} [opts.publishDesc]   optional
      * @param {string} [opts.scriptInfo]   optional
      * @param {integer} [opts.version]   optional
      * @param {string} [opts.channel]   optional
      * @param {string} [opts.sequenceStartTime]   optional
      * @param {string} [opts.sequenceEndTime]   optional
      * @param {integer} [opts.sequenceInterval]   optional
      * @param {string} [opts.runParams]   optional
      * @param {string} [opts.runQueue]   optional
      * @param {sparkJarRunParams} [opts.sparkJarRunParams]   optional
      * @param {array} [opts.submitConf]   optional
      * @param {integer} [opts.jobStatus]   optional
      * @param {string} [opts.resourceCode] - 计算资源组code  optional
      * @param {string} [opts.workspaceCode] - 工作空间code  optional
      * @param {string} [opts.cstJobName] - 客户作业名称  optional
      * @param {boolean} [opts.fromGravity]   optional
      * @param {string} [opts.processType] - 处理类型  optional
      * @param {string} [opts.companyCode] - 租户code  optional
      * @param {string} [opts.windowStartTime] - 窗口期开始时间  optional
      * @param {string} [opts.windowEndTime] - 窗口期结束时间  optional
      * @param {string} [opts.scriptUrl] - 脚本存储路径  optional
      * @param {string} [opts.resourceName] - 计算资源组名称  optional
      * @param {string} [opts.datasourceId] - 数据源ID，在一些要访问外部源的任务中，需要指定该数据源ID  optional
      * @param {array} [opts.inputParams] - 输入参数列表  optional
      * @param {array} [opts.outputParams] - 输出参数列表  optional
      * @param {gpdjmcLoopParam} [opts.loopParam] - 循环任务参数  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseBoolean gpdjmcRpcResponseBoolean
      */

  gravityParticleDubboJobManagerDeployJobEdit (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerDeployJobEdit"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerDeployJobEdit"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerDeployJobEdit"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerDeployJobEdit"
      )
    }

    let postBody = {}
    if (opts.projectId !== undefined && opts.projectId !== null) {
      postBody['projectId'] = opts.projectId
    }
    if (opts.projectName !== undefined && opts.projectName !== null) {
      postBody['projectName'] = opts.projectName
    }
    if (opts.projectNameMatch !== undefined && opts.projectNameMatch !== null) {
      postBody['projectNameMatch'] = opts.projectNameMatch
    }
    if (opts.nameKeyWord !== undefined && opts.nameKeyWord !== null) {
      postBody['nameKeyWord'] = opts.nameKeyWord
    }
    if (opts.relationType !== undefined && opts.relationType !== null) {
      postBody['relationType'] = opts.relationType
    }
    if (opts.modelId !== undefined && opts.modelId !== null) {
      postBody['modelId'] = opts.modelId
    }
    if (opts.modelName !== undefined && opts.modelName !== null) {
      postBody['modelName'] = opts.modelName
    }
    if (opts.modelNameMatch !== undefined && opts.modelNameMatch !== null) {
      postBody['modelNameMatch'] = opts.modelNameMatch
    }
    if (opts.gitUrl !== undefined && opts.gitUrl !== null) {
      postBody['gitUrl'] = opts.gitUrl
    }
    if (opts.tableId !== undefined && opts.tableId !== null) {
      postBody['tableId'] = opts.tableId
    }
    if (opts.databaseName !== undefined && opts.databaseName !== null) {
      postBody['databaseName'] = opts.databaseName
    }
    if (opts.marketId !== undefined && opts.marketId !== null) {
      postBody['marketId'] = opts.marketId
    }
    if (opts.marketCode !== undefined && opts.marketCode !== null) {
      postBody['marketCode'] = opts.marketCode
    }
    if (opts.marketName !== undefined && opts.marketName !== null) {
      postBody['marketName'] = opts.marketName
    }
    if (opts.redirectType !== undefined && opts.redirectType !== null) {
      postBody['redirectType'] = opts.redirectType
    }
    if (opts.tableName !== undefined && opts.tableName !== null) {
      postBody['tableName'] = opts.tableName
    }
    if (opts.tableNameMatch !== undefined && opts.tableNameMatch !== null) {
      postBody['tableNameMatch'] = opts.tableNameMatch
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.jobSystem !== undefined && opts.jobSystem !== null) {
      postBody['jobSystem'] = opts.jobSystem
    }
    if (opts.triggerType !== undefined && opts.triggerType !== null) {
      postBody['triggerType'] = opts.triggerType
    }
    if (opts.triggerConfig !== undefined && opts.triggerConfig !== null) {
      postBody['triggerConfig'] = opts.triggerConfig
    }
    if (opts.zipCommand !== undefined && opts.zipCommand !== null) {
      postBody['zipCommand'] = opts.zipCommand
    }
    if (opts.zipFileName !== undefined && opts.zipFileName !== null) {
      postBody['zipFileName'] = opts.zipFileName
    }
    if (opts.zipParams !== undefined && opts.zipParams !== null) {
      postBody['zipParams'] = opts.zipParams
    }
    if (opts.dependencies !== undefined && opts.dependencies !== null) {
      postBody['dependencies'] = opts.dependencies
    }
    if (opts.manager !== undefined && opts.manager !== null) {
      postBody['manager'] = opts.manager
    }
    if (opts.cooperator !== undefined && opts.cooperator !== null) {
      postBody['cooperator'] = opts.cooperator
    }
    if (opts.priority !== undefined && opts.priority !== null) {
      postBody['priority'] = opts.priority
    }
    if (opts.jobDesc !== undefined && opts.jobDesc !== null) {
      postBody['jobDesc'] = opts.jobDesc
    }
    if (opts.scriptType !== undefined && opts.scriptType !== null) {
      postBody['scriptType'] = opts.scriptType
    }
    if (opts.runScript !== undefined && opts.runScript !== null) {
      postBody['runScript'] = opts.runScript
    }
    if (opts.scriptContent !== undefined && opts.scriptContent !== null) {
      postBody['scriptContent'] = opts.scriptContent
    }
    if (opts.cycle !== undefined && opts.cycle !== null) {
      postBody['cycle'] = opts.cycle
    }
    if (opts.sequence !== undefined && opts.sequence !== null) {
      postBody['sequence'] = opts.sequence
    }
    if (opts.lifeCycle !== undefined && opts.lifeCycle !== null) {
      postBody['lifeCycle'] = opts.lifeCycle
    }
    if (opts.retry !== undefined && opts.retry !== null) {
      postBody['retry'] = opts.retry
    }
    if (opts.retryCount !== undefined && opts.retryCount !== null) {
      postBody['retryCount'] = opts.retryCount
    }
    if (opts.retryInterval !== undefined && opts.retryInterval !== null) {
      postBody['retryInterval'] = opts.retryInterval
    }
    if (opts.notifyOccasion !== undefined && opts.notifyOccasion !== null) {
      postBody['notifyOccasion'] = opts.notifyOccasion
    }
    if (opts.notifyTime !== undefined && opts.notifyTime !== null) {
      postBody['notifyTime'] = opts.notifyTime
    }
    if (opts.notifyPattern !== undefined && opts.notifyPattern !== null) {
      postBody['notifyPattern'] = opts.notifyPattern
    }
    if (opts.notifier !== undefined && opts.notifier !== null) {
      postBody['notifier'] = opts.notifier
    }
    if (opts.startRunTime !== undefined && opts.startRunTime !== null) {
      postBody['startRunTime'] = opts.startRunTime
    }
    if (opts.endRunTime !== undefined && opts.endRunTime !== null) {
      postBody['endRunTime'] = opts.endRunTime
    }
    if (opts.runTime !== undefined && opts.runTime !== null) {
      postBody['runTime'] = opts.runTime
    }
    if (opts.runDate !== undefined && opts.runDate !== null) {
      postBody['runDate'] = opts.runDate
    }
    if (opts.flowId !== undefined && opts.flowId !== null) {
      postBody['flowId'] = opts.flowId
    }
    if (opts.taskId !== undefined && opts.taskId !== null) {
      postBody['taskId'] = opts.taskId
    }
    if (opts.userAccount !== undefined && opts.userAccount !== null) {
      postBody['userAccount'] = opts.userAccount
    }
    if (opts.userPwd !== undefined && opts.userPwd !== null) {
      postBody['userPwd'] = opts.userPwd
    }
    if (opts.markIds !== undefined && opts.markIds !== null) {
      postBody['markIds'] = opts.markIds
    }
    if (opts.runTimeOut !== undefined && opts.runTimeOut !== null) {
      postBody['runTimeOut'] = opts.runTimeOut
    }
    if (opts.scriptSourceType !== undefined && opts.scriptSourceType !== null) {
      postBody['scriptSourceType'] = opts.scriptSourceType
    }
    if (opts.scriptTemplate !== undefined && opts.scriptTemplate !== null) {
      postBody['scriptTemplate'] = opts.scriptTemplate
    }
    if (opts.dmrTableIds !== undefined && opts.dmrTableIds !== null) {
      postBody['dmrTableIds'] = opts.dmrTableIds
    }
    if (opts.dmrTables !== undefined && opts.dmrTables !== null) {
      postBody['dmrTables'] = opts.dmrTables
    }
    if (opts.gitFilesList !== undefined && opts.gitFilesList !== null) {
      postBody['gitFilesList'] = opts.gitFilesList
    }
    if (opts.isDeploy !== undefined && opts.isDeploy !== null) {
      postBody['isDeploy'] = opts.isDeploy
    }
    if (opts.scriptPath !== undefined && opts.scriptPath !== null) {
      postBody['scriptPath'] = opts.scriptPath
    }
    if (opts.scriptByte !== undefined && opts.scriptByte !== null) {
      postBody['scriptByte'] = opts.scriptByte
    }
    if (opts.fileId !== undefined && opts.fileId !== null) {
      postBody['fileId'] = opts.fileId
    }
    if (opts.publishDesc !== undefined && opts.publishDesc !== null) {
      postBody['publishDesc'] = opts.publishDesc
    }
    if (opts.scriptInfo !== undefined && opts.scriptInfo !== null) {
      postBody['scriptInfo'] = opts.scriptInfo
    }
    if (opts.version !== undefined && opts.version !== null) {
      postBody['version'] = opts.version
    }
    if (opts.channel !== undefined && opts.channel !== null) {
      postBody['channel'] = opts.channel
    }
    if (
      opts.sequenceStartTime !== undefined &&
      opts.sequenceStartTime !== null
    ) {
      postBody['sequenceStartTime'] = opts.sequenceStartTime
    }
    if (opts.sequenceEndTime !== undefined && opts.sequenceEndTime !== null) {
      postBody['sequenceEndTime'] = opts.sequenceEndTime
    }
    if (opts.sequenceInterval !== undefined && opts.sequenceInterval !== null) {
      postBody['sequenceInterval'] = opts.sequenceInterval
    }
    if (opts.runParams !== undefined && opts.runParams !== null) {
      postBody['runParams'] = opts.runParams
    }
    if (opts.runQueue !== undefined && opts.runQueue !== null) {
      postBody['runQueue'] = opts.runQueue
    }
    if (
      opts.sparkJarRunParams !== undefined &&
      opts.sparkJarRunParams !== null
    ) {
      postBody['sparkJarRunParams'] = opts.sparkJarRunParams
    }
    if (opts.submitConf !== undefined && opts.submitConf !== null) {
      postBody['submitConf'] = opts.submitConf
    }
    if (opts.jobStatus !== undefined && opts.jobStatus !== null) {
      postBody['jobStatus'] = opts.jobStatus
    }
    if (opts.resourceCode !== undefined && opts.resourceCode !== null) {
      postBody['resourceCode'] = opts.resourceCode
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.cstJobName !== undefined && opts.cstJobName !== null) {
      postBody['cstJobName'] = opts.cstJobName
    }
    if (opts.fromGravity !== undefined && opts.fromGravity !== null) {
      postBody['fromGravity'] = opts.fromGravity
    }
    if (opts.processType !== undefined && opts.processType !== null) {
      postBody['processType'] = opts.processType
    }
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      postBody['companyCode'] = opts.companyCode
    }
    if (opts.windowStartTime !== undefined && opts.windowStartTime !== null) {
      postBody['windowStartTime'] = opts.windowStartTime
    }
    if (opts.windowEndTime !== undefined && opts.windowEndTime !== null) {
      postBody['windowEndTime'] = opts.windowEndTime
    }
    if (opts.scriptUrl !== undefined && opts.scriptUrl !== null) {
      postBody['scriptUrl'] = opts.scriptUrl
    }
    if (opts.resourceName !== undefined && opts.resourceName !== null) {
      postBody['resourceName'] = opts.resourceName
    }
    if (opts.datasourceId !== undefined && opts.datasourceId !== null) {
      postBody['datasourceId'] = opts.datasourceId
    }
    if (opts.inputParams !== undefined && opts.inputParams !== null) {
      postBody['inputParams'] = opts.inputParams
    }
    if (opts.outputParams !== undefined && opts.outputParams !== null) {
      postBody['outputParams'] = opts.outputParams
    }
    if (opts.loopParam !== undefined && opts.loopParam !== null) {
      postBody['loopParam'] = opts.loopParam
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerDeployJobEdit with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerDeployJobEdit',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取脚本类型和模板下载地址
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseScriptInfoTypeDTO gpdjmcRpcResponseScriptInfoTypeDTO
      */

  gravityParticleDubboJobManagerGetScriptInfoType (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerGetScriptInfoType"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerGetScriptInfoType"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerGetScriptInfoType"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerGetScriptInfoType"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerGetScriptInfoType with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerGetScriptInfoType',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据脚本类型获取模板引擎下载地址
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {string} opts.scriptType
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseListEngineTemplateDTO gpdjmcRpcResponseListEngineTemplateDTO
      */

  gravityParticleDubboJobManagerGetEngineTemplate (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerGetEngineTemplate"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerGetEngineTemplate"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerGetEngineTemplate"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerGetEngineTemplate"
      )
    }
    if (opts.scriptType === undefined || opts.scriptType === null) {
      throw new Error(
        "Missing the required parameter 'opts.scriptType' when calling gravityParticleDubboJobManagerGetEngineTemplate"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName,
      scriptType: opts.scriptType
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerGetEngineTemplate with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerGetEngineTemplate',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  校验作业名称是否存在，true表示不存在，可以新建，false表示已经存在
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {string} opts.jobName
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseBoolean gpdjmcRpcResponseBoolean
      */

  gravityParticleDubboJobManagerGetMgrJobByJobName (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerGetMgrJobByJobName"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerGetMgrJobByJobName"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerGetMgrJobByJobName"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerGetMgrJobByJobName"
      )
    }
    if (opts.jobName === undefined || opts.jobName === null) {
      throw new Error(
        "Missing the required parameter 'opts.jobName' when calling gravityParticleDubboJobManagerGetMgrJobByJobName"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName,
      jobName: opts.jobName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerGetMgrJobByJobName with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerGetMgrJobByJobName',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  重新上线接口 根据文件id和版本号
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {string} [opts.userName]   optional
      * @param {string} [opts.remark]   optional
      * @param {array} [opts.jobNames]   optional
      * @param {integer} [opts.fileId]   optional
      * @param {integer} [opts.version]   optional
      * @param {string} [opts.publishDesc]   optional
      * @param {boolean} [opts.manager]   optional
      * @param {boolean} [opts.jobManager]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseBoolean gpdjmcRpcResponseBoolean
      */

  gravityParticleDubboJobManagerGetMgrJobByJobe (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerGetMgrJobByJobe"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerGetMgrJobByJobe"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerGetMgrJobByJobe"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerGetMgrJobByJobe"
      )
    }

    let postBody = {}
    if (opts.userName !== undefined && opts.userName !== null) {
      postBody['userName'] = opts.userName
    }
    if (opts.remark !== undefined && opts.remark !== null) {
      postBody['remark'] = opts.remark
    }
    if (opts.jobNames !== undefined && opts.jobNames !== null) {
      postBody['jobNames'] = opts.jobNames
    }
    if (opts.fileId !== undefined && opts.fileId !== null) {
      postBody['fileId'] = opts.fileId
    }
    if (opts.version !== undefined && opts.version !== null) {
      postBody['version'] = opts.version
    }
    if (opts.publishDesc !== undefined && opts.publishDesc !== null) {
      postBody['publishDesc'] = opts.publishDesc
    }
    if (opts.manager !== undefined && opts.manager !== null) {
      postBody['manager'] = opts.manager
    }
    if (opts.jobManager !== undefined && opts.jobManager !== null) {
      postBody['jobManager'] = opts.jobManager
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerGetMgrJobByJobe with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerGetMgrJobByJobe',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除作业
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {string} [opts.jobName] - 作业名  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseBoolean gpdjmcRpcResponseBoolean
      */

  gravityParticleDubboJobManagerDeleteJob (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerDeleteJob"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerDeleteJob"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerDeleteJob"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerDeleteJob"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerDeleteJob with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerDeleteJob',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据表信息，查询其对应写入作业信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {string} [opts.databaseName] - 数据库名称  optional
      * @param {string} [opts.tableName] - 表名称  optional
      * @param {string} [opts.workspaceCode] - 工作空间名称  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseListString gpdjmcRpcResponseListString
      */

  gravityParticleDubboJobManagerQueryJobByOutputTable (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerQueryJobByOutputTable"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerQueryJobByOutputTable"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerQueryJobByOutputTable"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerQueryJobByOutputTable"
      )
    }

    let postBody = {}
    if (opts.databaseName !== undefined && opts.databaseName !== null) {
      postBody['databaseName'] = opts.databaseName
    }
    if (opts.tableName !== undefined && opts.tableName !== null) {
      postBody['tableName'] = opts.tableName
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerQueryJobByOutputTable with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerQueryJobByOutputTable',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  工作空间到期后删除该工作空间下的所有作业和日志
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName
      * @param {string} [opts.companyCode] - 表名称  optional
      * @param {string} [opts.workspaceCode] - 工作空间名称  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param gpdjmcRpcResponseBoolean gpdjmcRpcResponseBoolean
      */

  gravityParticleDubboJobManagerDeleteAllByWorkspace (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleDubboJobManagerDeleteAllByWorkspace"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerDeleteAllByWorkspace"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling gravityParticleDubboJobManagerDeleteAllByWorkspace"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleDubboJobManagerDeleteAllByWorkspace"
      )
    }

    let postBody = {}
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      postBody['companyCode'] = opts.companyCode
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleDubboJobManagerDeleteAllByWorkspace with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerDeleteAllByWorkspace',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  重跑指定任务的指定数据日期
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.txDate - 数据日期, 对于非小时/分钟周期任务，格式为 yyyy-MM-dd；对于小时/分钟周期任务，格式为 yyyy-MM-dd-HH-mm
      * @param {string} opts.workspaceCode - 作业所属工作空间编码，形如: ws_123456789012345678
      * @param {array} [opts.jobIdList] - 作业ID列表，最多允许传递20个作业  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param jobRerunResult result  返回结果对象
      * @param string code  返回状态码: 成功-1000，参数验证异常-1001，无操作权限-1005，未知异常-1003
      * @param string msg  返回状态信息
      */

  gravityParticleOpenRerun (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleOpenRerun"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleOpenRerun"
      )
    }
    if (opts.txDate === undefined || opts.txDate === null) {
      throw new Error(
        "Missing the required parameter 'opts.txDate' when calling gravityParticleOpenRerun"
      )
    }
    if (opts.workspaceCode === undefined || opts.workspaceCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.workspaceCode' when calling gravityParticleOpenRerun"
      )
    }

    let postBody = {}
    if (opts.txDate !== undefined && opts.txDate !== null) {
      postBody['txDate'] = opts.txDate
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.jobIdList !== undefined && opts.jobIdList !== null) {
      postBody['jobIdList'] = opts.jobIdList
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleOpenRerun with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleOpenRerun',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  首页调用-获取所有作业信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} opts.pageSize - 页面大小
      * @param {integer} opts.pageNum - 页码
      * @param {array} [opts.lastJobStatus] - 最后一次运行状态  optional
      * @param {array} [opts.excludeJobTypes] - 处理类型  optional
      * @param {string} [opts.marketJobsAll]   optional
      * @param {string} [opts.manager] - 负责人  optional
      * @param {string} [opts.queryMode] - 任务类型  optional
      * @param {string} [opts.enable] - 作业上上线下线状态  optional
      * @param {string} [opts.jobName] - 作业名  optional
      * @param {string} [opts.currentStatus]   optional
      * @param {string} [opts.processType] - 处理类型  optional
      * @param {string} [opts.lastTxdate] - 数据日期  optional
      * @param {string} [opts.cycle] - 运行周期  optional
      * @param {string} [opts.jobStartRunTime] - 任务执行时间开始  optional
      * @param {string} [opts.jobEndRunTime] - 任务执行时间- 结束  optional
      * @param {string} [opts.createTimeBefore] - 任务创建日期-结束  optional
      * @param {string} [opts.createTimeAfter] - 任务创建日期-开始  optional
      * @param {string} [opts.updateTimeBefore] - 任务修改日期-结束  optional
      * @param {string} [opts.updateTimeAfter] - 任务修改日期-开始  optional
      * @param {string} [opts.jobType] - 任务类型  optional
      * @param {string} [opts.markClassifyCode]   optional
      * @param {string} [opts.markName]   optional
      * @param {string} [opts.jobChildType]   optional
      * @param {string} [opts.cstJobName] - 客户作业名  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpjmPageInfoListJobResultDTO result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleParticleJobListJob (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleParticleJobListJob"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleParticleJobListJob"
      )
    }
    if (opts.pageSize === undefined || opts.pageSize === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageSize' when calling gravityParticleParticleJobListJob"
      )
    }
    if (opts.pageNum === undefined || opts.pageNum === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageNum' when calling gravityParticleParticleJobListJob"
      )
    }

    let postBody = {}
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.lastJobStatus !== undefined && opts.lastJobStatus !== null) {
      postBody['lastJobStatus'] = opts.lastJobStatus
    }
    if (opts.excludeJobTypes !== undefined && opts.excludeJobTypes !== null) {
      postBody['excludeJobTypes'] = opts.excludeJobTypes
    }
    if (opts.marketJobsAll !== undefined && opts.marketJobsAll !== null) {
      postBody['marketJobsAll'] = opts.marketJobsAll
    }
    if (opts.manager !== undefined && opts.manager !== null) {
      postBody['manager'] = opts.manager
    }
    if (opts.queryMode !== undefined && opts.queryMode !== null) {
      postBody['queryMode'] = opts.queryMode
    }
    if (opts.enable !== undefined && opts.enable !== null) {
      postBody['enable'] = opts.enable
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.currentStatus !== undefined && opts.currentStatus !== null) {
      postBody['currentStatus'] = opts.currentStatus
    }
    if (opts.processType !== undefined && opts.processType !== null) {
      postBody['processType'] = opts.processType
    }
    if (opts.lastTxdate !== undefined && opts.lastTxdate !== null) {
      postBody['lastTxdate'] = opts.lastTxdate
    }
    if (opts.cycle !== undefined && opts.cycle !== null) {
      postBody['cycle'] = opts.cycle
    }
    if (opts.jobStartRunTime !== undefined && opts.jobStartRunTime !== null) {
      postBody['jobStartRunTime'] = opts.jobStartRunTime
    }
    if (opts.jobEndRunTime !== undefined && opts.jobEndRunTime !== null) {
      postBody['jobEndRunTime'] = opts.jobEndRunTime
    }
    if (opts.createTimeBefore !== undefined && opts.createTimeBefore !== null) {
      postBody['createTimeBefore'] = opts.createTimeBefore
    }
    if (opts.createTimeAfter !== undefined && opts.createTimeAfter !== null) {
      postBody['createTimeAfter'] = opts.createTimeAfter
    }
    if (opts.updateTimeBefore !== undefined && opts.updateTimeBefore !== null) {
      postBody['updateTimeBefore'] = opts.updateTimeBefore
    }
    if (opts.updateTimeAfter !== undefined && opts.updateTimeAfter !== null) {
      postBody['updateTimeAfter'] = opts.updateTimeAfter
    }
    if (opts.jobType !== undefined && opts.jobType !== null) {
      postBody['jobType'] = opts.jobType
    }
    if (opts.markClassifyCode !== undefined && opts.markClassifyCode !== null) {
      postBody['markClassifyCode'] = opts.markClassifyCode
    }
    if (opts.markName !== undefined && opts.markName !== null) {
      postBody['markName'] = opts.markName
    }
    if (opts.jobChildType !== undefined && opts.jobChildType !== null) {
      postBody['jobChildType'] = opts.jobChildType
    }
    if (opts.cstJobName !== undefined && opts.cstJobName !== null) {
      postBody['cstJobName'] = opts.cstJobName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleParticleJobListJob with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleParticleJobListJob',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  条件查询-作业运行实例列表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} opts.pageSize - 页面大小
      * @param {integer} opts.pageNum - 页码
      * @param {array} [opts.statusList] - 运行状态  optional
      * @param {string} [opts.enable] - 作业上上线下线状态  optional
      * @param {string} [opts.cycle] - 运行周期  optional
      * @param {string} [opts.processType] - 处理类型  optional
      * @param {string} [opts.manager] - 负责人  optional
      * @param {string} [opts.jobName] - 作业名  optional
      * @param {string} [opts.jobType] - 任务类型  optional
      * @param {string} [opts.createTimeBefore] - 任务创建日期-结束  optional
      * @param {string} [opts.createTimeAfter] - 任务创建日期-开始  optional
      * @param {string} [opts.startTimeBefore] - 运行开始时间范围  optional
      * @param {string} [opts.startTimeAfter] - 运行开始时间范围  optional
      * @param {string} [opts.endTimeAfter] - 运行结束时间范围  optional
      * @param {string} [opts.endTimeBefore] - 运行结束时间范围  optional
      * @param {string} [opts.txDate] - 数据日期  optional
      * @param {string} [opts.jobChildType]   optional
      * @param {string} [opts.cstJobName] - 客户作业名  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpjmPageInfoListJobInstanceResultDTO result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleParticleJobListJobInstance (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleParticleJobListJobInstance"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleParticleJobListJobInstance"
      )
    }
    if (opts.pageSize === undefined || opts.pageSize === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageSize' when calling gravityParticleParticleJobListJobInstance"
      )
    }
    if (opts.pageNum === undefined || opts.pageNum === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageNum' when calling gravityParticleParticleJobListJobInstance"
      )
    }

    let postBody = {}
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.statusList !== undefined && opts.statusList !== null) {
      postBody['statusList'] = opts.statusList
    }
    if (opts.enable !== undefined && opts.enable !== null) {
      postBody['enable'] = opts.enable
    }
    if (opts.cycle !== undefined && opts.cycle !== null) {
      postBody['cycle'] = opts.cycle
    }
    if (opts.processType !== undefined && opts.processType !== null) {
      postBody['processType'] = opts.processType
    }
    if (opts.manager !== undefined && opts.manager !== null) {
      postBody['manager'] = opts.manager
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.jobType !== undefined && opts.jobType !== null) {
      postBody['jobType'] = opts.jobType
    }
    if (opts.createTimeBefore !== undefined && opts.createTimeBefore !== null) {
      postBody['createTimeBefore'] = opts.createTimeBefore
    }
    if (opts.createTimeAfter !== undefined && opts.createTimeAfter !== null) {
      postBody['createTimeAfter'] = opts.createTimeAfter
    }
    if (opts.startTimeBefore !== undefined && opts.startTimeBefore !== null) {
      postBody['startTimeBefore'] = opts.startTimeBefore
    }
    if (opts.startTimeAfter !== undefined && opts.startTimeAfter !== null) {
      postBody['startTimeAfter'] = opts.startTimeAfter
    }
    if (opts.endTimeAfter !== undefined && opts.endTimeAfter !== null) {
      postBody['endTimeAfter'] = opts.endTimeAfter
    }
    if (opts.endTimeBefore !== undefined && opts.endTimeBefore !== null) {
      postBody['endTimeBefore'] = opts.endTimeBefore
    }
    if (opts.txDate !== undefined && opts.txDate !== null) {
      postBody['txDate'] = opts.txDate
    }
    if (opts.jobChildType !== undefined && opts.jobChildType !== null) {
      postBody['jobChildType'] = opts.jobChildType
    }
    if (opts.cstJobName !== undefined && opts.cstJobName !== null) {
      postBody['cstJobName'] = opts.cstJobName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleParticleJobListJobInstance with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleParticleJobListJobInstance',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询作业详细信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.jobName] - 作业名  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpjmJobBasicInfoResultDTO result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleParticleJobGetBasicInfo (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleParticleJobGetBasicInfo"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleParticleJobGetBasicInfo"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      queryParams['jobName'] = opts.jobName
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleParticleJobGetBasicInfo with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleParticleJobGetBasicInfo',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询作业运行信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} opts.pageSize - 页面大小
      * @param {integer} opts.pageNum - 页码
      * @param {string} [opts.jobName] - 作业名  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpjmPageInfoJobRunInfoResultDTO result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleParticleJobGetRunInfos (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleParticleJobGetRunInfos"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleParticleJobGetRunInfos"
      )
    }
    if (opts.pageSize === undefined || opts.pageSize === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageSize' when calling gravityParticleParticleJobGetRunInfos"
      )
    }
    if (opts.pageNum === undefined || opts.pageNum === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageNum' when calling gravityParticleParticleJobGetRunInfos"
      )
    }

    let postBody = {}
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleParticleJobGetRunInfos with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleParticleJobGetRunInfos',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询作业操作记录
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} opts.pageSize - 页面大小
      * @param {integer} opts.pageNum - 页码
      * @param {integer} [opts.jobId] - 作业id  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpjmPageInfoMgrOperationRecords result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleParticleJobListOperationRecord (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleParticleJobListOperationRecord"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleParticleJobListOperationRecord"
      )
    }
    if (opts.pageSize === undefined || opts.pageSize === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageSize' when calling gravityParticleParticleJobListOperationRecord"
      )
    }
    if (opts.pageNum === undefined || opts.pageNum === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageNum' when calling gravityParticleParticleJobListOperationRecord"
      )
    }

    let postBody = {}
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.jobId !== undefined && opts.jobId !== null) {
      postBody['jobId'] = opts.jobId
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleParticleJobListOperationRecord with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleParticleJobListOperationRecord',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询作业完成信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.jobName
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpjmJobCompletionResultDTO result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleParticleJobJobCompletionInfo (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleParticleJobJobCompletionInfo"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleParticleJobJobCompletionInfo"
      )
    }
    if (opts.jobName === undefined || opts.jobName === null) {
      throw new Error(
        "Missing the required parameter 'opts.jobName' when calling gravityParticleParticleJobJobCompletionInfo"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      queryParams['jobName'] = opts.jobName
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleParticleJobJobCompletionInfo with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleParticleJobJobCompletionInfo',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取作业触发条件信息信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpjmConditionInfo result
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleParticleJobGetConditionInfo (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleParticleJobGetConditionInfo"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleParticleJobGetConditionInfo"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleParticleJobGetConditionInfo with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleParticleJobGetConditionInfo',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询mgrJob信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {string} [opts.enable] - 是否可用，1 已上线，2已下线  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpjmMgrJob result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleParticleJobGetMgrJobInfo (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleParticleJobGetMgrJobInfo"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleParticleJobGetMgrJobInfo"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.enable !== undefined && opts.enable !== null) {
      postBody['enable'] = opts.enable
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleParticleJobGetMgrJobInfo with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleParticleJobGetMgrJobInfo',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询作业类型信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {string} [opts.enable] - 是否可用，1 已上线，2已下线  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpjmJobTypeInfoDto result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleParticleJobGetJobTypeInfo (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleParticleJobGetJobTypeInfo"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleParticleJobGetJobTypeInfo"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.enable !== undefined && opts.enable !== null) {
      postBody['enable'] = opts.enable
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleParticleJobGetJobTypeInfo with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleParticleJobGetJobTypeInfo',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取作业脚本扩展名信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.clusterCode] - 集群代码  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpjsScriptExtensionDto result
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobGetScriptExtensions (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobGetScriptExtensions"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobGetScriptExtensions"
      )
    }

    let postBody = {}
    if (opts.clusterCode !== undefined && opts.clusterCode !== null) {
      postBody['clusterCode'] = opts.clusterCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobGetScriptExtensions with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobGetScriptExtensions',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  解析作业完成信息进行作业实例运行状态更新
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {string} [opts.txDate] - 数据日期  optional
      * @param {integer} [opts.sessionId] - 作业执行会话ID  optional
      * @param {string} [opts.serverName] - 运行服务器名称  optional
      * @param {string} [opts.startTime] - 作业运行开始时间  optional
      * @param {string} [opts.endTime] - 作业运行结束时间  optional
      * @param {string} [opts.jobStatus] - 作业执行状态  optional
      * @param {integer} [opts.returnCode] - 作业返回码  optional
      * @param {integer} [opts.affectRows] - 作业执行影响记录条数  optional
      * @param {integer} [opts.warningCode] - 作业执行警告代码  optional
      * @param {array} [opts.pids] - 作业执行集群job app id  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param string result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobscheProcessJobExeRst (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobscheProcessJobExeRst"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobscheProcessJobExeRst"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.txDate !== undefined && opts.txDate !== null) {
      postBody['txDate'] = opts.txDate
    }
    if (opts.sessionId !== undefined && opts.sessionId !== null) {
      postBody['sessionId'] = opts.sessionId
    }
    if (opts.serverName !== undefined && opts.serverName !== null) {
      postBody['serverName'] = opts.serverName
    }
    if (opts.startTime !== undefined && opts.startTime !== null) {
      postBody['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      postBody['endTime'] = opts.endTime
    }
    if (opts.jobStatus !== undefined && opts.jobStatus !== null) {
      postBody['jobStatus'] = opts.jobStatus
    }
    if (opts.returnCode !== undefined && opts.returnCode !== null) {
      postBody['returnCode'] = opts.returnCode
    }
    if (opts.affectRows !== undefined && opts.affectRows !== null) {
      postBody['affectRows'] = opts.affectRows
    }
    if (opts.warningCode !== undefined && opts.warningCode !== null) {
      postBody['warningCode'] = opts.warningCode
    }
    if (opts.pids !== undefined && opts.pids !== null) {
      postBody['pids'] = opts.pids
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobscheProcessJobExeRst with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobscheProcessJobExeRst',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  更新作业的可用状态
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {string} [opts.enableFlag] - 是否可用，1 已上线，2已下线  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param string result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobscheSetJobEnableFlag (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobscheSetJobEnableFlag"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobscheSetJobEnableFlag"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.enableFlag !== undefined && opts.enableFlag !== null) {
      postBody['enableFlag'] = opts.enableFlag
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobscheSetJobEnableFlag with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobscheSetJobEnableFlag',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  强制运行作业实例
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {string} [opts.txDate] - 数据日期  optional
      * @param {integer} [opts.sessionId] - sessionId  optional
      * @param {string} [opts.isCleanBeforeInst] - 是否清理之前的实例  optional
      * @param {string} [opts.system] - 调用系统  optional
      * @param {string} [opts.isComplement] - 是否完成  optional
      * @param {string} [opts._REQ_SEQ_NO_] - 请求序列号  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpjsSchedQueuePendingDto result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobscheForceRunJobInst (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobscheForceRunJobInst"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobscheForceRunJobInst"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.txDate !== undefined && opts.txDate !== null) {
      postBody['txDate'] = opts.txDate
    }
    if (opts.sessionId !== undefined && opts.sessionId !== null) {
      postBody['sessionId'] = opts.sessionId
    }
    if (
      opts.isCleanBeforeInst !== undefined &&
      opts.isCleanBeforeInst !== null
    ) {
      postBody['isCleanBeforeInst'] = opts.isCleanBeforeInst
    }
    if (opts.system !== undefined && opts.system !== null) {
      postBody['system'] = opts.system
    }
    if (opts.isComplement !== undefined && opts.isComplement !== null) {
      postBody['isComplement'] = opts.isComplement
    }
    if (opts._REQ_SEQ_NO_ !== undefined && opts._REQ_SEQ_NO_ !== null) {
      postBody['_REQ_SEQ_NO_'] = opts._REQ_SEQ_NO_
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobscheForceRunJobInst with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobscheForceRunJobInst',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  重置作业实例的状态为制定状态
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {string} [opts.txDate] - 数据日期  optional
      * @param {string} [opts.jobStatus] - 作业重置的状态  optional
      * @param {string} [opts.status] - 作业重置的状态，向后兼容字段和jobStatus一个含义，新接口用jobStatus  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param string result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobscheResetJobInstStatus (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobscheResetJobInstStatus"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobscheResetJobInstStatus"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.txDate !== undefined && opts.txDate !== null) {
      postBody['txDate'] = opts.txDate
    }
    if (opts.jobStatus !== undefined && opts.jobStatus !== null) {
      postBody['jobStatus'] = opts.jobStatus
    }
    if (opts.status !== undefined && opts.status !== null) {
      postBody['status'] = opts.status
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobscheResetJobInstStatus with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobscheResetJobInstStatus',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  强制运行作业实例，允许触发作业失败，用于补数，商城触发
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {string} [opts.txDate] - 数据日期  optional
      * @param {integer} [opts.sessionId] - sessionId  optional
      * @param {string} [opts.isCleanBeforeInst] - 是否清理之前的实例  optional
      * @param {string} [opts.system] - 调用系统  optional
      * @param {string} [opts.isComplement] - 是否完成  optional
      * @param {string} [opts._REQ_SEQ_NO_] - 请求序列号  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpjsSchedQueuePendingDto result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobscheReRunJobInst (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobscheReRunJobInst"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobscheReRunJobInst"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.txDate !== undefined && opts.txDate !== null) {
      postBody['txDate'] = opts.txDate
    }
    if (opts.sessionId !== undefined && opts.sessionId !== null) {
      postBody['sessionId'] = opts.sessionId
    }
    if (
      opts.isCleanBeforeInst !== undefined &&
      opts.isCleanBeforeInst !== null
    ) {
      postBody['isCleanBeforeInst'] = opts.isCleanBeforeInst
    }
    if (opts.system !== undefined && opts.system !== null) {
      postBody['system'] = opts.system
    }
    if (opts.isComplement !== undefined && opts.isComplement !== null) {
      postBody['isComplement'] = opts.isComplement
    }
    if (opts._REQ_SEQ_NO_ !== undefined && opts._REQ_SEQ_NO_ !== null) {
      postBody['_REQ_SEQ_NO_'] = opts._REQ_SEQ_NO_
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobscheReRunJobInst with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobscheReRunJobInst',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  判断作业和上游是否完全同频
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {array} [opts.dependJobName] - 依赖作业名称清单  optional
      * @param {string} [opts.startTime] - 作业开始时间  optional
      * @param {string} [opts.endTime] - 作业结束时间  optional
      * @param {integer} [opts.interval] - 作业时间间隔  optional
      * @param {string} [opts.cycle] - 作业运行周期  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param boolean result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobscheIsUpstreamSameFrequency (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobscheIsUpstreamSameFrequency"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobscheIsUpstreamSameFrequency"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.dependJobName !== undefined && opts.dependJobName !== null) {
      postBody['dependJobName'] = opts.dependJobName
    }
    if (opts.startTime !== undefined && opts.startTime !== null) {
      postBody['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      postBody['endTime'] = opts.endTime
    }
    if (opts.interval !== undefined && opts.interval !== null) {
      postBody['interval'] = opts.interval
    }
    if (opts.cycle !== undefined && opts.cycle !== null) {
      postBody['cycle'] = opts.cycle
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobscheIsUpstreamSameFrequency with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobscheIsUpstreamSameFrequency',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除作业以及子作业和质量作业
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {string} [opts.isDelSonJob] - 是否删除子作业 1删除   0不删  optional
      * @param {string} [opts.isDelQualityJob] - 是否删除质量作业  1删除   0不删  optional
      * @param {string} [opts.user_roles] - 用户角色列表  optional
      * @param {string} [opts.username] - 作业负责人  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param string result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleChannelJobInfoDeleteJob (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleChannelJobInfoDeleteJob"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleChannelJobInfoDeleteJob"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.isDelSonJob !== undefined && opts.isDelSonJob !== null) {
      postBody['isDelSonJob'] = opts.isDelSonJob
    }
    if (opts.isDelQualityJob !== undefined && opts.isDelQualityJob !== null) {
      postBody['isDelQualityJob'] = opts.isDelQualityJob
    }
    if (opts.user_roles !== undefined && opts.user_roles !== null) {
      postBody['user_roles'] = opts.user_roles
    }
    if (opts.username !== undefined && opts.username !== null) {
      postBody['username'] = opts.username
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleChannelJobInfoDeleteJob with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleChannelJobInfoDeleteJob',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询作业清单
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {string} [opts.enable] - 是否可用，1 已上线，2已下线  optional
      * @param {string} [opts.cstJobName] - 客户作业名称  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpmdSchedJobDTO result
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleParticleModelCalcListJob (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleParticleModelCalcListJob"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleParticleModelCalcListJob"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.enable !== undefined && opts.enable !== null) {
      postBody['enable'] = opts.enable
    }
    if (opts.cstJobName !== undefined && opts.cstJobName !== null) {
      postBody['cstJobName'] = opts.cstJobName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleParticleModelCalcListJob with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleParticleModelCalcListJob',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  计算作业详情
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {string} [opts.enable] - 是否可用，1 已上线，2已下线  optional
      * @param {string} [opts.cstJobName] - 客户作业名称  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpmdCalcJobResultDTO result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleParticleModelCalcCalcJobDetail (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleParticleModelCalcCalcJobDetail"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleParticleModelCalcCalcJobDetail"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.enable !== undefined && opts.enable !== null) {
      postBody['enable'] = opts.enable
    }
    if (opts.cstJobName !== undefined && opts.cstJobName !== null) {
      postBody['cstJobName'] = opts.cstJobName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleParticleModelCalcCalcJobDetail with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleParticleModelCalcCalcJobDetail',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  统计作业数量
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {boolean} [opts.isMine] - 是否统计本人作业  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpmnJobCountDto result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobMonitorJobCountInfo (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobMonitorJobCountInfo"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobMonitorJobCountInfo"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.isMine !== undefined && opts.isMine !== null) {
      queryParams['isMine'] = opts.isMine
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobMonitorJobCountInfo with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobMonitorJobCountInfo',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询作业类型清单
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpmnPieData result
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobMonitorJobTypeList (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobMonitorJobTypeList"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobMonitorJobTypeList"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobMonitorJobTypeList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobMonitorJobTypeList',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  统计作业状态数量
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.processType - 处理类型
      * @param {boolean} [opts.isMine] - 是否统计本人作业  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpmnPieData result
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobMonitorJobStatusCount (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobMonitorJobStatusCount"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobMonitorJobStatusCount"
      )
    }
    if (opts.processType === undefined || opts.processType === null) {
      throw new Error(
        "Missing the required parameter 'opts.processType' when calling gravityParticleJobMonitorJobStatusCount"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.processType !== undefined && opts.processType !== null) {
      queryParams['processType'] = opts.processType
    }
    if (opts.isMine !== undefined && opts.isMine !== null) {
      queryParams['isMine'] = opts.isMine
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobMonitorJobStatusCount with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobMonitorJobStatusCount',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  统计失败作业状态数量
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {boolean} [opts.isMine] - 是否统计本人作业  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpmnPieData result
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobMonitorJobFailCount (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobMonitorJobFailCount"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobMonitorJobFailCount"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.isMine !== undefined && opts.isMine !== null) {
      queryParams['isMine'] = opts.isMine
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobMonitorJobFailCount with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobMonitorJobFailCount',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  统计成功作业状态数量
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {boolean} [opts.isMine] - 是否统计本人作业  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpmnLineDataVo result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobMonitorJobSuccessCount (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobMonitorJobSuccessCount"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobMonitorJobSuccessCount"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.isMine !== undefined && opts.isMine !== null) {
      queryParams['isMine'] = opts.isMine
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobMonitorJobSuccessCount with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobMonitorJobSuccessCount',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  统计不同类型作业的数量
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {boolean} [opts.isMine] - 是否统计本人作业  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpmnPieData result
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobMonitorJobTypeCount (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobMonitorJobTypeCount"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobMonitorJobTypeCount"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.isMine !== undefined && opts.isMine !== null) {
      queryParams['isMine'] = opts.isMine
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobMonitorJobTypeCount with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobMonitorJobTypeCount',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  将作业按趋势进行数据量的统计
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {boolean} [opts.isMine] - 是否统计本人作业  optional
      * @param {string} opts.dimType - 统计维度：job作业，inst实例
      * @param {integer} opts.slot - 统计范围天数
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpmnLineStringDataVo result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobMonitorJobDispatchTrend (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobMonitorJobDispatchTrend"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobMonitorJobDispatchTrend"
      )
    }
    if (opts.dimType === undefined || opts.dimType === null) {
      throw new Error(
        "Missing the required parameter 'opts.dimType' when calling gravityParticleJobMonitorJobDispatchTrend"
      )
    }
    if (opts.slot === undefined || opts.slot === null) {
      throw new Error(
        "Missing the required parameter 'opts.slot' when calling gravityParticleJobMonitorJobDispatchTrend"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.isMine !== undefined && opts.isMine !== null) {
      queryParams['isMine'] = opts.isMine
    }
    if (opts.dimType !== undefined && opts.dimType !== null) {
      queryParams['dimType'] = opts.dimType
    }
    if (opts.slot !== undefined && opts.slot !== null) {
      queryParams['slot'] = opts.slot
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobMonitorJobDispatchTrend with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobMonitorJobDispatchTrend',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  统计作业耗时排名
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {boolean} [opts.isMine] - 是否统计本人作业  optional
      * @param {string} opts.num - 排名作业数量
      * @param {integer} opts.slot - 统计范围天数
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpmnJobSpendTimeRankingVo result
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobMonitorJobSpendTimeRanking (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobMonitorJobSpendTimeRanking"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobMonitorJobSpendTimeRanking"
      )
    }
    if (opts.num === undefined || opts.num === null) {
      throw new Error(
        "Missing the required parameter 'opts.num' when calling gravityParticleJobMonitorJobSpendTimeRanking"
      )
    }
    if (opts.slot === undefined || opts.slot === null) {
      throw new Error(
        "Missing the required parameter 'opts.slot' when calling gravityParticleJobMonitorJobSpendTimeRanking"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.isMine !== undefined && opts.isMine !== null) {
      queryParams['isMine'] = opts.isMine
    }
    if (opts.num !== undefined && opts.num !== null) {
      queryParams['num'] = opts.num
    }
    if (opts.slot !== undefined && opts.slot !== null) {
      queryParams['slot'] = opts.slot
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobMonitorJobSpendTimeRanking with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobMonitorJobSpendTimeRanking',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  统计不成功作业的数量
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {boolean} [opts.isMine] - 是否统计本人作业  optional
      * @param {string} opts.num - 排名作业数量
      * @param {integer} opts.slot - 统计范围天数
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpmnJobUnsuccessRankingVo result
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleJobMonitorJobUnsuccessRanking (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleJobMonitorJobUnsuccessRanking"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleJobMonitorJobUnsuccessRanking"
      )
    }
    if (opts.num === undefined || opts.num === null) {
      throw new Error(
        "Missing the required parameter 'opts.num' when calling gravityParticleJobMonitorJobUnsuccessRanking"
      )
    }
    if (opts.slot === undefined || opts.slot === null) {
      throw new Error(
        "Missing the required parameter 'opts.slot' when calling gravityParticleJobMonitorJobUnsuccessRanking"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.isMine !== undefined && opts.isMine !== null) {
      queryParams['isMine'] = opts.isMine
    }
    if (opts.num !== undefined && opts.num !== null) {
      queryParams['num'] = opts.num
    }
    if (opts.slot !== undefined && opts.slot !== null) {
      queryParams['slot'] = opts.slot
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleJobMonitorJobUnsuccessRanking with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleJobMonitorJobUnsuccessRanking',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  工作台作业统计接口
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.processType] - 处理类型  optional
      * @param {string} [opts.date] - 查询数据  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpmnWorkTableJobStatusDto result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleParticleJobMonitorJobStatusCount (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleParticleJobMonitorJobStatusCount"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleParticleJobMonitorJobStatusCount"
      )
    }

    let postBody = {}
    if (opts.processType !== undefined && opts.processType !== null) {
      postBody['processType'] = opts.processType
    }
    if (opts.date !== undefined && opts.date !== null) {
      postBody['date'] = opts.date
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleParticleJobMonitorJobStatusCount with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleParticleJobMonitorJobStatusCount',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据类型获取数据字典
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} [opts.id] - 数据字典id  optional
      * @param {string} [opts.dictCode] - 数据字典code  optional
      * @param {string} [opts.pDictCode] - 数据字典父级code  optional
      * @param {string} [opts.dictName] - 数据字典名称  optional
      * @param {integer} [opts.dictSort] - 数据字典排序  optional
      * @param {string} [opts.dictBak] - 数据字典备份  optional
      * @param {string} [opts.dictDesc] - 数据字典描述  optional
      * @param {string} [opts.isValid] - 是否有效 1: 有效, 0: 无效  optional
      * @param {string} [opts.isDel] - 是否删除 1: 删除, 0: 未删除  optional
      * @param {string} [opts.createdTime] - 创建时间  optional
      * @param {string} [opts.modifiedTime] - 修改时间  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpsdalueDict result
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleSchedDictGetByType (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleSchedDictGetByType"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleSchedDictGetByType"
      )
    }

    let postBody = {}
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }
    if (opts.dictCode !== undefined && opts.dictCode !== null) {
      postBody['dictCode'] = opts.dictCode
    }
    if (opts.pDictCode !== undefined && opts.pDictCode !== null) {
      postBody['pDictCode'] = opts.pDictCode
    }
    if (opts.dictName !== undefined && opts.dictName !== null) {
      postBody['dictName'] = opts.dictName
    }
    if (opts.dictSort !== undefined && opts.dictSort !== null) {
      postBody['dictSort'] = opts.dictSort
    }
    if (opts.dictBak !== undefined && opts.dictBak !== null) {
      postBody['dictBak'] = opts.dictBak
    }
    if (opts.dictDesc !== undefined && opts.dictDesc !== null) {
      postBody['dictDesc'] = opts.dictDesc
    }
    if (opts.isValid !== undefined && opts.isValid !== null) {
      postBody['isValid'] = opts.isValid
    }
    if (opts.isDel !== undefined && opts.isDel !== null) {
      postBody['isDel'] = opts.isDel
    }
    if (opts.createdTime !== undefined && opts.createdTime !== null) {
      postBody['createdTime'] = opts.createdTime
    }
    if (opts.modifiedTime !== undefined && opts.modifiedTime !== null) {
      postBody['modifiedTime'] = opts.modifiedTime
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleSchedDictGetByType with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleSchedDictGetByType',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取作业类型关系
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpsdSchedDictRelationDto result
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleSchedDictGetJobTypeR (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleSchedDictGetJobTypeR"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleSchedDictGetJobTypeR"
      )
    }

    let postBody = {}

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleSchedDictGetJobTypeR with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleSchedDictGetJobTypeR',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  重置作业为done
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {array} [opts.arrayObjectParam]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param string result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleParticleJobSchedResetStsDone (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleParticleJobSchedResetStsDone"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleParticleJobSchedResetStsDone"
      )
    }

    let postBody = {}
    if (opts.arrayObjectParam !== undefined && opts.arrayObjectParam !== null) {
      postBody['arrayObjectParam'] = opts.arrayObjectParam
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleParticleJobSchedResetStsDone with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleParticleJobSchedResetStsDone',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取作业分页日志
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} opts.pageSize - 页面大小
      * @param {integer} opts.pageNum - 页码
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {string} [opts.jobSessionId] - job 运行session id  optional
      * @param {string} [opts.txDate] - job运行日期  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpsmOpenApiResponsePageInfoObject result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleParticleJobSchedGetRunLog (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleParticleJobSchedGetRunLog"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleParticleJobSchedGetRunLog"
      )
    }
    if (opts.pageSize === undefined || opts.pageSize === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageSize' when calling gravityParticleParticleJobSchedGetRunLog"
      )
    }
    if (opts.pageNum === undefined || opts.pageNum === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageNum' when calling gravityParticleParticleJobSchedGetRunLog"
      )
    }

    let postBody = {}
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.jobSessionId !== undefined && opts.jobSessionId !== null) {
      postBody['jobSessionId'] = opts.jobSessionId
    }
    if (opts.txDate !== undefined && opts.txDate !== null) {
      postBody['txDate'] = opts.txDate
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleParticleJobSchedGetRunLog with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleParticleJobSchedGetRunLog',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  批量强制作业运行
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.txDate] - 数据日期  optional
      * @param {array} [opts.jobNames] - 作业名称列表  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param string result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleParticleJobSchedForceJobBatch (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleParticleJobSchedForceJobBatch"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleParticleJobSchedForceJobBatch"
      )
    }

    let postBody = {}
    if (opts.txDate !== undefined && opts.txDate !== null) {
      postBody['txDate'] = opts.txDate
    }
    if (opts.jobNames !== undefined && opts.jobNames !== null) {
      postBody['jobNames'] = opts.jobNames
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleParticleJobSchedForceJobBatch with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleParticleJobSchedForceJobBatch',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  下线作业
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {array} [opts.jobNames] - 作业名称列表  optional
      * @param {string} [opts.remark] - 操作备注  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param string result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleParticleJobSchedCancelJob (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleParticleJobSchedCancelJob"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleParticleJobSchedCancelJob"
      )
    }

    let postBody = {}
    if (opts.jobNames !== undefined && opts.jobNames !== null) {
      postBody['jobNames'] = opts.jobNames
    }
    if (opts.remark !== undefined && opts.remark !== null) {
      postBody['remark'] = opts.remark
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleParticleJobSchedCancelJob with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleParticleJobSchedCancelJob',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  批量接口上线
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {array} [opts.jobNames] - 作业名称列表  optional
      * @param {string} [opts.remark] - 操作备注  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param string result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleParticleJobSchedReuseJob (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleParticleJobSchedReuseJob"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleParticleJobSchedReuseJob"
      )
    }

    let postBody = {}
    if (opts.jobNames !== undefined && opts.jobNames !== null) {
      postBody['jobNames'] = opts.jobNames
    }
    if (opts.remark !== undefined && opts.remark !== null) {
      postBody['remark'] = opts.remark
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleParticleJobSchedReuseJob with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleParticleJobSchedReuseJob',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  批量接口上线
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {array} [opts.jobNames] - 作业名称列表  optional
      * @param {string} [opts.remark] - 操作备注  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param string result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleParticleJobSchedReuseJobWithDepend (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleParticleJobSchedReuseJobWithDepend"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleParticleJobSchedReuseJobWithDepend"
      )
    }

    let postBody = {}
    if (opts.jobNames !== undefined && opts.jobNames !== null) {
      postBody['jobNames'] = opts.jobNames
    }
    if (opts.remark !== undefined && opts.remark !== null) {
      postBody['remark'] = opts.remark
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleParticleJobSchedReuseJobWithDepend with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleParticleJobSchedReuseJobWithDepend',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  对作业进行查杀
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {string} [opts.txDate] - 数据日期  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param string result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleParticleJobSchedKillJob (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleParticleJobSchedKillJob"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleParticleJobSchedKillJob"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.txDate !== undefined && opts.txDate !== null) {
      postBody['txDate'] = opts.txDate
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleParticleJobSchedKillJob with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleParticleJobSchedKillJob',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  作业信息更新
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {string} [opts.cstJobName] - 客户作业名称  optional
      * @param {string} [opts.companyCode] - 租户code  optional
      * @param {string} [opts.workspaceCode] - 工作空间code  optional
      * @param {string} [opts.resourceCode] - 计算资源组code  optional
      * @param {string} [opts.jobDesc] - 作业描述  optional
      * @param {string} [opts.lastStatus] - 最后一次运行状态，Pending、Ready、Running、Done、Failed、Clean  optional
      * @param {string} [opts.lastTxDate] - 最后一次执行日期  optional
      * @param {string} [opts.lastStartTime] - 最后一次运行开始时间  optional
      * @param {string} [opts.lastEndTime] - 最后一次运行结束时间  optional
      * @param {string} [opts.lastServer] - 最后一次运行服务器  optional
      * @param {integer} [opts.lastSessionid] - Session ID  optional
      * @param {integer} [opts.lastReturnCode] - 最后返回编码  optional
      * @param {string} [opts.currentStatusMsg] - 当前作业状态信息  optional
      * @param {string} [opts.triggerType] - 触发类型:dependency 依赖、time 时间、file 文件、manual 手工、once 一次性  optional
      * @param {string} [opts.cycle] - 运行周期 ,F 分钟、H 小时、D 天、W 周、M 月、O 一次性运行、N 无周期  optional
      * @param {string} [opts.sequence] - 周期具体日期  optional
      * @param {integer} [opts.txDateOffset] - T+N，偏移量  optional
      * @param {integer} [opts.priority] - 作业优先级，数字越小优先级越高  optional
      * @param {integer} [opts.timeout] - 作业超时时间，单位分钟  optional
      * @param {string} [opts.windowStartTime] - 窗口期开始时间  optional
      * @param {string} [opts.windowEndTime] - 窗口期结束时间  optional
      * @param {string} [opts.morrowAutoExec] - 失败后次日是否自动运行，1是、0否  optional
      * @param {integer} [opts.dataZeroKillEnable] - 抽空之后的处理 0 无操作 1 作业失败 2发出警告  optional
      * @param {integer} [opts.retryCount] - 重试次数  optional
      * @param {integer} [opts.retryInterval] - 间隔/秒  optional
      * @param {string} [opts.flagAgain] - 当期已经跑成功过，是否可以再跑，1启用、0关闭  optional
      * @param {string} [opts.flagAcross] - 是否可以跨周期跑，1启用、0关闭  optional
      * @param {string} [opts.flagParallel] - 是否可以自身并行，1启用、0关闭  optional
      * @param {string} [opts.flagCascadedTrigger] - 是否级联触发，父任务重跑后是否被强制触发重跑，1是、0否  optional
      * @param {string} [opts.requiredRunEnv] - 需要的运行环境  optional
      * @param {string} [opts.runScript] - 运行脚本  optional
      * @param {string} [opts.enable] - 是否启用，0未上线、1已上线、2已下线  optional
      * @param {string} [opts.manager] - 负责人，不超过10个  optional
      * @param {string} [opts.shareUser] - 共享人，不超过10个  optional
      * @param {string} [opts.expireTime] - 失效时间  optional
      * @param {string} [opts.commands] - zip命令行  optional
      * @param {string} [opts.createUser] - 创建人  optional
      * @param {string} [opts.createTime] - 创建时间  optional
      * @param {string} [opts.updateTime] - 更新时间  optional
      * @param {string} [opts.nodeName] - 实时结点名称  optional
      * @param {string} [opts.topic] - 实时主题  optional
      * @param {string} [opts.jobRunWay] - 作业执行方式  0离线 1双写 2实时  optional
      * @param {string} [opts.belongSys] - 所属系统  optional
      * @param {string} [opts.msDelayDealWay] - 主从同步延迟处理方式。0:警告无处理，1:作业延迟启动  optional
      * @param {string} [opts.sequenceStartTime] - 周期开始时间(适用小时分钟)  optional
      * @param {string} [opts.sequenceEndTime] - 周期结束时间(适用小时分钟)  optional
      * @param {integer} [opts.sequenceInterval] - 周期间隔(适用小时分钟，当周期为小时，含义为间隔小时数，当周期为分钟，含义为间隔分钟数)  optional
      * @param {string} [opts.runParams] - 作业运行参数  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param string result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleParticleJobSchedUpdateSchedJob (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleParticleJobSchedUpdateSchedJob"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleParticleJobSchedUpdateSchedJob"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.cstJobName !== undefined && opts.cstJobName !== null) {
      postBody['cstJobName'] = opts.cstJobName
    }
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      postBody['companyCode'] = opts.companyCode
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.resourceCode !== undefined && opts.resourceCode !== null) {
      postBody['resourceCode'] = opts.resourceCode
    }
    if (opts.jobDesc !== undefined && opts.jobDesc !== null) {
      postBody['jobDesc'] = opts.jobDesc
    }
    if (opts.lastStatus !== undefined && opts.lastStatus !== null) {
      postBody['lastStatus'] = opts.lastStatus
    }
    if (opts.lastTxDate !== undefined && opts.lastTxDate !== null) {
      postBody['lastTxDate'] = opts.lastTxDate
    }
    if (opts.lastStartTime !== undefined && opts.lastStartTime !== null) {
      postBody['lastStartTime'] = opts.lastStartTime
    }
    if (opts.lastEndTime !== undefined && opts.lastEndTime !== null) {
      postBody['lastEndTime'] = opts.lastEndTime
    }
    if (opts.lastServer !== undefined && opts.lastServer !== null) {
      postBody['lastServer'] = opts.lastServer
    }
    if (opts.lastSessionid !== undefined && opts.lastSessionid !== null) {
      postBody['lastSessionid'] = opts.lastSessionid
    }
    if (opts.lastReturnCode !== undefined && opts.lastReturnCode !== null) {
      postBody['lastReturnCode'] = opts.lastReturnCode
    }
    if (opts.currentStatusMsg !== undefined && opts.currentStatusMsg !== null) {
      postBody['currentStatusMsg'] = opts.currentStatusMsg
    }
    if (opts.triggerType !== undefined && opts.triggerType !== null) {
      postBody['triggerType'] = opts.triggerType
    }
    if (opts.cycle !== undefined && opts.cycle !== null) {
      postBody['cycle'] = opts.cycle
    }
    if (opts.sequence !== undefined && opts.sequence !== null) {
      postBody['sequence'] = opts.sequence
    }
    if (opts.txDateOffset !== undefined && opts.txDateOffset !== null) {
      postBody['txDateOffset'] = opts.txDateOffset
    }
    if (opts.priority !== undefined && opts.priority !== null) {
      postBody['priority'] = opts.priority
    }
    if (opts.timeout !== undefined && opts.timeout !== null) {
      postBody['timeout'] = opts.timeout
    }
    if (opts.windowStartTime !== undefined && opts.windowStartTime !== null) {
      postBody['windowStartTime'] = opts.windowStartTime
    }
    if (opts.windowEndTime !== undefined && opts.windowEndTime !== null) {
      postBody['windowEndTime'] = opts.windowEndTime
    }
    if (opts.morrowAutoExec !== undefined && opts.morrowAutoExec !== null) {
      postBody['morrowAutoExec'] = opts.morrowAutoExec
    }
    if (
      opts.dataZeroKillEnable !== undefined &&
      opts.dataZeroKillEnable !== null
    ) {
      postBody['dataZeroKillEnable'] = opts.dataZeroKillEnable
    }
    if (opts.retryCount !== undefined && opts.retryCount !== null) {
      postBody['retryCount'] = opts.retryCount
    }
    if (opts.retryInterval !== undefined && opts.retryInterval !== null) {
      postBody['retryInterval'] = opts.retryInterval
    }
    if (opts.flagAgain !== undefined && opts.flagAgain !== null) {
      postBody['flagAgain'] = opts.flagAgain
    }
    if (opts.flagAcross !== undefined && opts.flagAcross !== null) {
      postBody['flagAcross'] = opts.flagAcross
    }
    if (opts.flagParallel !== undefined && opts.flagParallel !== null) {
      postBody['flagParallel'] = opts.flagParallel
    }
    if (
      opts.flagCascadedTrigger !== undefined &&
      opts.flagCascadedTrigger !== null
    ) {
      postBody['flagCascadedTrigger'] = opts.flagCascadedTrigger
    }
    if (opts.requiredRunEnv !== undefined && opts.requiredRunEnv !== null) {
      postBody['requiredRunEnv'] = opts.requiredRunEnv
    }
    if (opts.runScript !== undefined && opts.runScript !== null) {
      postBody['runScript'] = opts.runScript
    }
    if (opts.enable !== undefined && opts.enable !== null) {
      postBody['enable'] = opts.enable
    }
    if (opts.manager !== undefined && opts.manager !== null) {
      postBody['manager'] = opts.manager
    }
    if (opts.shareUser !== undefined && opts.shareUser !== null) {
      postBody['shareUser'] = opts.shareUser
    }
    if (opts.expireTime !== undefined && opts.expireTime !== null) {
      postBody['expireTime'] = opts.expireTime
    }
    if (opts.commands !== undefined && opts.commands !== null) {
      postBody['commands'] = opts.commands
    }
    if (opts.createUser !== undefined && opts.createUser !== null) {
      postBody['createUser'] = opts.createUser
    }
    if (opts.createTime !== undefined && opts.createTime !== null) {
      postBody['createTime'] = opts.createTime
    }
    if (opts.updateTime !== undefined && opts.updateTime !== null) {
      postBody['updateTime'] = opts.updateTime
    }
    if (opts.nodeName !== undefined && opts.nodeName !== null) {
      postBody['nodeName'] = opts.nodeName
    }
    if (opts.topic !== undefined && opts.topic !== null) {
      postBody['topic'] = opts.topic
    }
    if (opts.jobRunWay !== undefined && opts.jobRunWay !== null) {
      postBody['jobRunWay'] = opts.jobRunWay
    }
    if (opts.belongSys !== undefined && opts.belongSys !== null) {
      postBody['belongSys'] = opts.belongSys
    }
    if (opts.msDelayDealWay !== undefined && opts.msDelayDealWay !== null) {
      postBody['msDelayDealWay'] = opts.msDelayDealWay
    }
    if (
      opts.sequenceStartTime !== undefined &&
      opts.sequenceStartTime !== null
    ) {
      postBody['sequenceStartTime'] = opts.sequenceStartTime
    }
    if (opts.sequenceEndTime !== undefined && opts.sequenceEndTime !== null) {
      postBody['sequenceEndTime'] = opts.sequenceEndTime
    }
    if (opts.sequenceInterval !== undefined && opts.sequenceInterval !== null) {
      postBody['sequenceInterval'] = opts.sequenceInterval
    }
    if (opts.runParams !== undefined && opts.runParams !== null) {
      postBody['runParams'] = opts.runParams
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleParticleJobSchedUpdateSchedJob with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleParticleJobSchedUpdateSchedJob',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询作业信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {string} [opts.enable] - 是否可用，1 已上线，2已下线  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpsmJobAllqueryInfoDto result  返回结果对象
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleParticleJobSchedGetSchedJobInfo (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleParticleJobSchedGetSchedJobInfo"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleParticleJobSchedGetSchedJobInfo"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.enable !== undefined && opts.enable !== null) {
      postBody['enable'] = opts.enable
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleParticleJobSchedGetSchedJobInfo with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleParticleJobSchedGetSchedJobInfo',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据类型获取数据字典
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.userCode] - 用户code  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer success  成功标识，1成功，0失败
      * @param gpuserMatchUserResDto result
      * @param string code  返回状态码
      * @param string msg  返回状态信息
      * @param string _REQ_SEQ_NO_  返回请求流水号
      */

  gravityParticleConfigUserMatchUser (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  gravityParticleConfigUserMatchUser"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling gravityParticleConfigUserMatchUser"
      )
    }

    let postBody = {}
    if (opts.userCode !== undefined && opts.userCode !== null) {
      postBody['userCode'] = opts.userCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call gravityParticleConfigUserMatchUser with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/gravityParticleConfigUserMatchUser',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  列出值班表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param rosterVo result
      */

  manageHubDutyListRoster (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubDutyListRoster"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubDutyListRoster"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubDutyListRoster"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubDutyListRoster"
      )
    }

    let postBody = {}

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubDutyListRoster with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubDutyListRoster',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  修改值班表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {array} [opts.rosterList] - 全部值班表信息  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      */

  manageHubDutyUpdateRoster (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubDutyUpdateRoster"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubDutyUpdateRoster"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubDutyUpdateRoster"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubDutyUpdateRoster"
      )
    }

    let postBody = {}
    if (opts.rosterList !== undefined && opts.rosterList !== null) {
      postBody['rosterList'] = opts.rosterList
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubDutyUpdateRoster with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubDutyUpdateRoster',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  增加值班人
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} [opts.name] - 值班人名称  optional
      * @param {string} [opts.pin] - 值班人Pin  optional
      * @param {string} [opts.erp] - 值班人Erp  optional
      * @param {string} [opts.phoneNumber] - 值班人手机号  optional
      * @param {string} [opts.email] - 值班人邮箱地址  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      */

  manageHubDutyAddWatchman (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubDutyAddWatchman"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubDutyAddWatchman"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubDutyAddWatchman"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubDutyAddWatchman"
      )
    }

    let postBody = {}
    if (opts.name !== undefined && opts.name !== null) {
      postBody['name'] = opts.name
    }
    if (opts.pin !== undefined && opts.pin !== null) {
      postBody['pin'] = opts.pin
    }
    if (opts.erp !== undefined && opts.erp !== null) {
      postBody['erp'] = opts.erp
    }
    if (opts.phoneNumber !== undefined && opts.phoneNumber !== null) {
      postBody['phoneNumber'] = opts.phoneNumber
    }
    if (opts.email !== undefined && opts.email !== null) {
      postBody['email'] = opts.email
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubDutyAddWatchman with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubDutyAddWatchman',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除值班人
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.id] - 值班人id  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      */

  manageHubDutyDeleteWatchman (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubDutyDeleteWatchman"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubDutyDeleteWatchman"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubDutyDeleteWatchman"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubDutyDeleteWatchman"
      )
    }

    let postBody = {}
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubDutyDeleteWatchman with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubDutyDeleteWatchman',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  更新值班人
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.id] - 值班人id  optional
      * @param {string} [opts.name] - 值班人名称  optional
      * @param {string} [opts.pin] - 值班人Pin  optional
      * @param {string} [opts.erp] - 值班人Erp  optional
      * @param {string} [opts.phoneNumber] - 值班人手机号  optional
      * @param {string} [opts.email] - 值班人邮箱地址  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      */

  manageHubDutyUpdateWatchman (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubDutyUpdateWatchman"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubDutyUpdateWatchman"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubDutyUpdateWatchman"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubDutyUpdateWatchman"
      )
    }

    let postBody = {}
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }
    if (opts.name !== undefined && opts.name !== null) {
      postBody['name'] = opts.name
    }
    if (opts.pin !== undefined && opts.pin !== null) {
      postBody['pin'] = opts.pin
    }
    if (opts.erp !== undefined && opts.erp !== null) {
      postBody['erp'] = opts.erp
    }
    if (opts.phoneNumber !== undefined && opts.phoneNumber !== null) {
      postBody['phoneNumber'] = opts.phoneNumber
    }
    if (opts.email !== undefined && opts.email !== null) {
      postBody['email'] = opts.email
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubDutyUpdateWatchman with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubDutyUpdateWatchman',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  列出值班人
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param watchmanVo result
      */

  manageHubDutyListWatchman (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubDutyListWatchman"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubDutyListWatchman"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubDutyListWatchman"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubDutyListWatchman"
      )
    }

    let postBody = {}

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubDutyListWatchman with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubDutyListWatchman',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  任务属性
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} opts.jobName
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param jobPropertyVo result
      */

  manageHubGravityJobProperty (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubGravityJobProperty"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityJobProperty"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubGravityJobProperty"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityJobProperty"
      )
    }
    if (opts.jobName === undefined || opts.jobName === null) {
      throw new Error(
        "Missing the required parameter 'opts.jobName' when calling manageHubGravityJobProperty"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      queryParams['jobName'] = opts.jobName
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubGravityJobProperty with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubGravityJobProperty',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  分页查询任务运行历史
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageNum] - 分页-页码  optional
      * @param {integer} [opts.pageSize] - 分页-每页数量  optional
      * @param {string} [opts.jobName] - 任务编码  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param pageVoJobRunHistoryVo result
      */

  manageHubGravityJobRunHistory (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubGravityJobRunHistory"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityJobRunHistory"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubGravityJobRunHistory"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityJobRunHistory"
      )
    }

    let postBody = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubGravityJobRunHistory with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubGravityJobRunHistory',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  分页查询父任务列表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageNum] - 分页-页码  optional
      * @param {integer} [opts.pageSize] - 分页-每页数量  optional
      * @param {string} [opts.jobName] - 作业编码  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param pageVoJobRelationVo result
      */

  manageHubGravityJobParent (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubGravityJobParent"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityJobParent"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubGravityJobParent"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityJobParent"
      )
    }

    let postBody = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubGravityJobParent with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubGravityJobParent',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  分页查询子任务列表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageNum] - 分页-页码  optional
      * @param {integer} [opts.pageSize] - 分页-每页数量  optional
      * @param {string} [opts.jobName] - 作业编码  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param pageVoJobRelationVo result
      */

  manageHubGravityJobChild (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubGravityJobChild"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityJobChild"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubGravityJobChild"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityJobChild"
      )
    }

    let postBody = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubGravityJobChild with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubGravityJobChild',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  分页查询任务操作历史
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageNum] - 分页-页码  optional
      * @param {integer} [opts.pageSize] - 分页-每页数量  optional
      * @param {integer} [opts.jobId] - 作业id  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param pageVoJobOperateHistoryVo result
      */

  manageHubGravityJobOperateHistory (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubGravityJobOperateHistory"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityJobOperateHistory"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubGravityJobOperateHistory"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityJobOperateHistory"
      )
    }

    let postBody = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.jobId !== undefined && opts.jobId !== null) {
      postBody['jobId'] = opts.jobId
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubGravityJobOperateHistory with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubGravityJobOperateHistory',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询计算任务日志
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageNum] - 分页-页码  optional
      * @param {integer} [opts.pageSize] - 分页-每页数量  optional
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {string} [opts.jobSessionId] - session id  optional
      * @param {string} [opts.txDate] - 数据日期  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param pageVoString result
      */

  manageHubGravityJobLog (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubGravityJobLog"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityJobLog"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubGravityJobLog"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityJobLog"
      )
    }

    let postBody = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.jobSessionId !== undefined && opts.jobSessionId !== null) {
      postBody['jobSessionId'] = opts.jobSessionId
    }
    if (opts.txDate !== undefined && opts.txDate !== null) {
      postBody['txDate'] = opts.txDate
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubGravityJobLog with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubGravityJobLog',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  分页查询作业列表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageNum] - 分页-页码  optional
      * @param {integer} [opts.pageSize] - 分页-每页数量  optional
      * @param {string} [opts.cstJobName] - 任务名称  optional
      * @param {string} [opts.jobName] - 任务编码  optional
      * @param {string} [opts.companyCode] - 租户编码  optional
      * @param {string} [opts.managerPin] - 负责人pin  optional
      * @param {string} [opts.workspaceCode] - 工作空间编码  optional
      * @param {string} [opts.createTimeAfter] - 任务创建-开始日期: yyyy-MM-dd  optional
      * @param {string} [opts.createTimeBefore] - 任务创建-结束日期: yyyy-MM-dd  optional
      * @param {string} [opts.updateTimeAfter] - 任务更新-开始日期: yyyy-MM-dd  optional
      * @param {string} [opts.updateTimeBefore] - 任务更新-结束日期: yyyy-MM-dd  optional
      * @param {string} [opts.jobStartRunTime] - 任务运行-开始时间: yyyy-MM-dd HH:mm  optional
      * @param {string} [opts.jobEndRunTime] - 任务运行-结束时间: yyyy-MM-dd HH:mm  optional
      * @param {integer} [opts.enable] - 任务上下线状态: 1-上线 2-下线  optional
      * @param {string} [opts.cycle] - 任务周期  optional
      * @param {string} [opts.jobType] - 任务父类型  optional
      * @param {string} [opts.jobChildType] - 任务子类型  optional
      * @param {array} [opts.lastJobStatus] - 任务最后状态: not,Done,Pending,Running,Failed,Timeout,Clean,Ready  optional
      * @param {string} [opts.lastTxdate] - 任务最后数据日期  optional
      * @param {string} [opts.manager] - 任务负责人  optional
      * @param {string} [opts.queryMode] - 过滤模式: exact-精确过滤，否则为模糊过滤  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param pageVoJobInfoVo result
      */

  manageHubGravityListJob (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubGravityListJob"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityListJob"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubGravityListJob"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityListJob"
      )
    }

    let postBody = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.cstJobName !== undefined && opts.cstJobName !== null) {
      postBody['cstJobName'] = opts.cstJobName
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      postBody['companyCode'] = opts.companyCode
    }
    if (opts.managerPin !== undefined && opts.managerPin !== null) {
      postBody['managerPin'] = opts.managerPin
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.createTimeAfter !== undefined && opts.createTimeAfter !== null) {
      postBody['createTimeAfter'] = opts.createTimeAfter
    }
    if (opts.createTimeBefore !== undefined && opts.createTimeBefore !== null) {
      postBody['createTimeBefore'] = opts.createTimeBefore
    }
    if (opts.updateTimeAfter !== undefined && opts.updateTimeAfter !== null) {
      postBody['updateTimeAfter'] = opts.updateTimeAfter
    }
    if (opts.updateTimeBefore !== undefined && opts.updateTimeBefore !== null) {
      postBody['updateTimeBefore'] = opts.updateTimeBefore
    }
    if (opts.jobStartRunTime !== undefined && opts.jobStartRunTime !== null) {
      postBody['jobStartRunTime'] = opts.jobStartRunTime
    }
    if (opts.jobEndRunTime !== undefined && opts.jobEndRunTime !== null) {
      postBody['jobEndRunTime'] = opts.jobEndRunTime
    }
    if (opts.enable !== undefined && opts.enable !== null) {
      postBody['enable'] = opts.enable
    }
    if (opts.cycle !== undefined && opts.cycle !== null) {
      postBody['cycle'] = opts.cycle
    }
    if (opts.jobType !== undefined && opts.jobType !== null) {
      postBody['jobType'] = opts.jobType
    }
    if (opts.jobChildType !== undefined && opts.jobChildType !== null) {
      postBody['jobChildType'] = opts.jobChildType
    }
    if (opts.lastJobStatus !== undefined && opts.lastJobStatus !== null) {
      postBody['lastJobStatus'] = opts.lastJobStatus
    }
    if (opts.lastTxdate !== undefined && opts.lastTxdate !== null) {
      postBody['lastTxdate'] = opts.lastTxdate
    }
    if (opts.manager !== undefined && opts.manager !== null) {
      postBody['manager'] = opts.manager
    }
    if (opts.queryMode !== undefined && opts.queryMode !== null) {
      postBody['queryMode'] = opts.queryMode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubGravityListJob with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubGravityListJob',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  重跑作业
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} [opts.txDate] - 数据日期  optional
      * @param {array} [opts.jobNames] - 任务名称列表  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      */

  manageHubGravityRerun (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubGravityRerun"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityRerun"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubGravityRerun"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityRerun"
      )
    }

    let postBody = {}
    if (opts.txDate !== undefined && opts.txDate !== null) {
      postBody['txDate'] = opts.txDate
    }
    if (opts.jobNames !== undefined && opts.jobNames !== null) {
      postBody['jobNames'] = opts.jobNames
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubGravityRerun with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubGravityRerun',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  重置作业
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {array} [opts.arrayObjectParam] - 重置作业参数列表  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      */

  manageHubGravityReset (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubGravityReset"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityReset"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubGravityReset"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityReset"
      )
    }

    let postBody = {}
    if (opts.arrayObjectParam !== undefined && opts.arrayObjectParam !== null) {
      postBody['arrayObjectParam'] = opts.arrayObjectParam
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubGravityReset with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubGravityReset',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  终止作业
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {string} [opts.txDate] - 数据日期  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      */

  manageHubGravityKill (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubGravityKill"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityKill"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubGravityKill"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityKill"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.txDate !== undefined && opts.txDate !== null) {
      postBody['txDate'] = opts.txDate
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubGravityKill with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubGravityKill',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  作业父子类型枚举
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param jobTypeVo result
      */

  manageHubGravityJobType (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubGravityJobType"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityJobType"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubGravityJobType"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityJobType"
      )
    }

    let postBody = {}

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubGravityJobType with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubGravityJobType',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  分页查询作业数据日期状态列表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageNum] - 页码  optional
      * @param {integer} [opts.pageSize] - 页大小  optional
      * @param {string} [opts.companyCode] - 任务编码  optional
      * @param {string} [opts.managerPin] - 负责人pin  optional
      * @param {string} [opts.workspaceCode] - 工作空间编码  optional
      * @param {string} [opts.cstJobName] - 任务名称  optional
      * @param {string} [opts.txDate] - 数据日期  optional
      * @param {string} [opts.jobStartAfterTime] - 任务运行开始-开始时间: yyyy-MM-dd HH:mm  optional
      * @param {string} [opts.jobStartBeforeTime] - 任务运行开始-结束时间: yyyy-MM-dd HH:mm  optional
      * @param {string} [opts.jobEndAfterTime] - 任务运行结束-开始时间: yyyy-MM-dd HH:mm  optional
      * @param {string} [opts.jobEndBeforeTime] - 任务运行结束-结束时间: yyyy-MM-dd HH:mm  optional
      * @param {string} [opts.jobType] - 任务类型  optional
      * @param {string} [opts.cycle] - 运行频率  optional
      * @param {string} [opts.status] - 运行状态  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param pageVoJobTxDateStatusVo result
      */

  manageHubGravityListTxDateStatus (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubGravityListTxDateStatus"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityListTxDateStatus"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubGravityListTxDateStatus"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityListTxDateStatus"
      )
    }

    let postBody = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      postBody['companyCode'] = opts.companyCode
    }
    if (opts.managerPin !== undefined && opts.managerPin !== null) {
      postBody['managerPin'] = opts.managerPin
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.cstJobName !== undefined && opts.cstJobName !== null) {
      postBody['cstJobName'] = opts.cstJobName
    }
    if (opts.txDate !== undefined && opts.txDate !== null) {
      postBody['txDate'] = opts.txDate
    }
    if (
      opts.jobStartAfterTime !== undefined &&
      opts.jobStartAfterTime !== null
    ) {
      postBody['jobStartAfterTime'] = opts.jobStartAfterTime
    }
    if (
      opts.jobStartBeforeTime !== undefined &&
      opts.jobStartBeforeTime !== null
    ) {
      postBody['jobStartBeforeTime'] = opts.jobStartBeforeTime
    }
    if (opts.jobEndAfterTime !== undefined && opts.jobEndAfterTime !== null) {
      postBody['jobEndAfterTime'] = opts.jobEndAfterTime
    }
    if (opts.jobEndBeforeTime !== undefined && opts.jobEndBeforeTime !== null) {
      postBody['jobEndBeforeTime'] = opts.jobEndBeforeTime
    }
    if (opts.jobType !== undefined && opts.jobType !== null) {
      postBody['jobType'] = opts.jobType
    }
    if (opts.cycle !== undefined && opts.cycle !== null) {
      postBody['cycle'] = opts.cycle
    }
    if (opts.status !== undefined && opts.status !== null) {
      postBody['status'] = opts.status
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubGravityListTxDateStatus with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubGravityListTxDateStatus',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  一键重跑预览
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageNum] - 页码  optional
      * @param {integer} [opts.pageSize] - 页大小  optional
      * @param {string} [opts.companyCode] - 任务编码  optional
      * @param {string} [opts.managerPin] - 负责人pin  optional
      * @param {string} [opts.workspaceCode] - 工作空间编码  optional
      * @param {string} [opts.cstJobName] - 任务名称  optional
      * @param {string} [opts.txDate] - 数据日期  optional
      * @param {string} [opts.jobStartAfterTime] - 任务运行开始-开始时间: yyyy-MM-dd HH:mm  optional
      * @param {string} [opts.jobStartBeforeTime] - 任务运行开始-结束时间: yyyy-MM-dd HH:mm  optional
      * @param {string} [opts.jobEndAfterTime] - 任务运行结束-开始时间: yyyy-MM-dd HH:mm  optional
      * @param {string} [opts.jobEndBeforeTime] - 任务运行结束-结束时间: yyyy-MM-dd HH:mm  optional
      * @param {string} [opts.jobType] - 任务类型  optional
      * @param {string} [opts.cycle] - 运行频率  optional
      * @param {string} [opts.status] - 运行状态  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param oneClickRerunPreviewVo result
      */

  manageHubGravityOneClickRerunPreview (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubGravityOneClickRerunPreview"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityOneClickRerunPreview"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubGravityOneClickRerunPreview"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityOneClickRerunPreview"
      )
    }

    let postBody = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      postBody['companyCode'] = opts.companyCode
    }
    if (opts.managerPin !== undefined && opts.managerPin !== null) {
      postBody['managerPin'] = opts.managerPin
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.cstJobName !== undefined && opts.cstJobName !== null) {
      postBody['cstJobName'] = opts.cstJobName
    }
    if (opts.txDate !== undefined && opts.txDate !== null) {
      postBody['txDate'] = opts.txDate
    }
    if (
      opts.jobStartAfterTime !== undefined &&
      opts.jobStartAfterTime !== null
    ) {
      postBody['jobStartAfterTime'] = opts.jobStartAfterTime
    }
    if (
      opts.jobStartBeforeTime !== undefined &&
      opts.jobStartBeforeTime !== null
    ) {
      postBody['jobStartBeforeTime'] = opts.jobStartBeforeTime
    }
    if (opts.jobEndAfterTime !== undefined && opts.jobEndAfterTime !== null) {
      postBody['jobEndAfterTime'] = opts.jobEndAfterTime
    }
    if (opts.jobEndBeforeTime !== undefined && opts.jobEndBeforeTime !== null) {
      postBody['jobEndBeforeTime'] = opts.jobEndBeforeTime
    }
    if (opts.jobType !== undefined && opts.jobType !== null) {
      postBody['jobType'] = opts.jobType
    }
    if (opts.cycle !== undefined && opts.cycle !== null) {
      postBody['cycle'] = opts.cycle
    }
    if (opts.status !== undefined && opts.status !== null) {
      postBody['status'] = opts.status
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubGravityOneClickRerunPreview with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubGravityOneClickRerunPreview',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  一键重跑
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {listTxDateStatusParam} [opts.filterParam]   optional
      * @param {string} [opts.remark] - 备注  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      */

  manageHubGravityOneClickRerun (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubGravityOneClickRerun"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityOneClickRerun"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubGravityOneClickRerun"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityOneClickRerun"
      )
    }

    let postBody = {}
    if (opts.filterParam !== undefined && opts.filterParam !== null) {
      postBody['filterParam'] = opts.filterParam
    }
    if (opts.remark !== undefined && opts.remark !== null) {
      postBody['remark'] = opts.remark
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubGravityOneClickRerun with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubGravityOneClickRerun',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  一键重跑批次记录
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageNum] - 页号  optional
      * @param {integer} [opts.pageSize] - 页大小  optional
      * @param {string} [opts.operator] - 操作人  optional
      * @param {integer} [opts.operateTimeAfter] - 操作时间-开始  optional
      * @param {integer} [opts.operateTimeBefore] - 操作时间-结束  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param pageVoRerunBatchVo result
      */

  manageHubGravityOneClickRerunBatches (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubGravityOneClickRerunBatches"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityOneClickRerunBatches"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubGravityOneClickRerunBatches"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityOneClickRerunBatches"
      )
    }

    let postBody = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.operator !== undefined && opts.operator !== null) {
      postBody['operator'] = opts.operator
    }
    if (opts.operateTimeAfter !== undefined && opts.operateTimeAfter !== null) {
      postBody['operateTimeAfter'] = opts.operateTimeAfter
    }
    if (
      opts.operateTimeBefore !== undefined &&
      opts.operateTimeBefore !== null
    ) {
      postBody['operateTimeBefore'] = opts.operateTimeBefore
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubGravityOneClickRerunBatches with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubGravityOneClickRerunBatches',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  一键重跑任务详情
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageNum] - 页号  optional
      * @param {integer} [opts.pageSize] - 页大小  optional
      * @param {integer} [opts.batchId] - 批次id  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param pageVoRerunTaskVo result
      */

  manageHubGravityOneClickRerunTasks (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubGravityOneClickRerunTasks"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityOneClickRerunTasks"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubGravityOneClickRerunTasks"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityOneClickRerunTasks"
      )
    }

    let postBody = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.batchId !== undefined && opts.batchId !== null) {
      postBody['batchId'] = opts.batchId
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubGravityOneClickRerunTasks with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubGravityOneClickRerunTasks',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  一键重跑任务重新提交
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.taskId] - 任务id  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      */

  manageHubGravityOneClickRerunResubmit (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubGravityOneClickRerunResubmit"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityOneClickRerunResubmit"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubGravityOneClickRerunResubmit"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubGravityOneClickRerunResubmit"
      )
    }

    let postBody = {}
    if (opts.taskId !== undefined && opts.taskId !== null) {
      postBody['taskId'] = opts.taskId
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubGravityOneClickRerunResubmit with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubGravityOneClickRerunResubmit',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  存储概览
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param jcwSpaceSummaryVo result
      */

  manageHubStorageSummary (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubStorageSummary"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubStorageSummary"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubStorageSummary"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubStorageSummary"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubStorageSummary with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubStorageSummary',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  每日存储增量
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} [opts.companyCode] - 租户code, 当该参数不为空时，返回该租户的存储日增量；当该参数为空时返回集群的存储日增量  optional
      * @param {string} opts.startTime - 开始日期 yyyy-MM-dd
      * @param {string} opts.endTime - 结束日期 yyyy-MM-dd
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param jcwSpaceIncreUsedByDayVo result
      */

  manageHubStorageIncrement (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubStorageIncrement"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubStorageIncrement"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubStorageIncrement"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubStorageIncrement"
      )
    }
    if (opts.startTime === undefined || opts.startTime === null) {
      throw new Error(
        "Missing the required parameter 'opts.startTime' when calling manageHubStorageIncrement"
      )
    }
    if (opts.endTime === undefined || opts.endTime === null) {
      throw new Error(
        "Missing the required parameter 'opts.endTime' when calling manageHubStorageIncrement"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      queryParams['companyCode'] = opts.companyCode
    }
    if (opts.startTime !== undefined && opts.startTime !== null) {
      queryParams['startTime'] = opts.startTime
    }
    if (opts.endTime !== undefined && opts.endTime !== null) {
      queryParams['endTime'] = opts.endTime
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubStorageIncrement with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubStorageIncrement',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  租户/库/表存储详情
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageNum] - 分页-页码  optional
      * @param {integer} [opts.pageSize] - 分页-每页数量  optional
      * @param {string} [opts.companyCode] - 租户编码  optional
      * @param {string} [opts.account] - 租户主账号  optional
      * @param {string} [opts.databaseName] - 数据库名称  optional
      * @param {string} [opts.objectType] - 查询类型，租户、数据库、表  optional
      * @param {string} [opts.orderFieldType] - 排序字段，租户/库/表存储空间总使用量、数据库数量、表数量、每日增量、创建时间  optional
      * @param {string} [opts.orderType] - 排序方式，升序、降序  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param pageVoStorageSpaceUsedDetailVo result
      */

  manageHubStorageDetails (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubStorageDetails"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubStorageDetails"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubStorageDetails"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubStorageDetails"
      )
    }

    let postBody = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      postBody['companyCode'] = opts.companyCode
    }
    if (opts.account !== undefined && opts.account !== null) {
      postBody['account'] = opts.account
    }
    if (opts.databaseName !== undefined && opts.databaseName !== null) {
      postBody['databaseName'] = opts.databaseName
    }
    if (opts.objectType !== undefined && opts.objectType !== null) {
      postBody['objectType'] = opts.objectType
    }
    if (opts.orderFieldType !== undefined && opts.orderFieldType !== null) {
      postBody['orderFieldType'] = opts.orderFieldType
    }
    if (opts.orderType !== undefined && opts.orderType !== null) {
      postBody['orderType'] = opts.orderType
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubStorageDetails with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubStorageDetails',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询表DDL
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} opts.companyCode - 租户code
      * @param {string} opts.database - 数据库名称
      * @param {string} opts.table - 表名称
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param string result
      */

  manageHubStorageTableDDL (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubStorageTableDDL"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubStorageTableDDL"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubStorageTableDDL"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubStorageTableDDL"
      )
    }
    if (opts.companyCode === undefined || opts.companyCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.companyCode' when calling manageHubStorageTableDDL"
      )
    }
    if (opts.database === undefined || opts.database === null) {
      throw new Error(
        "Missing the required parameter 'opts.database' when calling manageHubStorageTableDDL"
      )
    }
    if (opts.table === undefined || opts.table === null) {
      throw new Error(
        "Missing the required parameter 'opts.table' when calling manageHubStorageTableDDL"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      queryParams['companyCode'] = opts.companyCode
    }
    if (opts.database !== undefined && opts.database !== null) {
      queryParams['database'] = opts.database
    }
    if (opts.table !== undefined && opts.table !== null) {
      queryParams['table'] = opts.table
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubStorageTableDDL with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubStorageTableDDL',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  列出分区存储详情
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} opts.companyCode - 租户code
      * @param {string} opts.database - 数据库名称
      * @param {string} opts.table - 表名称
      * @param {integer} opts.pageSize - 分页大小
      * @param {integer} opts.pageNum - 页码
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param pageVoJcwSpacePartUsedVo result
      */

  manageHubStoragePartitionList (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  manageHubStoragePartitionList"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubStoragePartitionList"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling manageHubStoragePartitionList"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling manageHubStoragePartitionList"
      )
    }
    if (opts.companyCode === undefined || opts.companyCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.companyCode' when calling manageHubStoragePartitionList"
      )
    }
    if (opts.database === undefined || opts.database === null) {
      throw new Error(
        "Missing the required parameter 'opts.database' when calling manageHubStoragePartitionList"
      )
    }
    if (opts.table === undefined || opts.table === null) {
      throw new Error(
        "Missing the required parameter 'opts.table' when calling manageHubStoragePartitionList"
      )
    }
    if (opts.pageSize === undefined || opts.pageSize === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageSize' when calling manageHubStoragePartitionList"
      )
    }
    if (opts.pageNum === undefined || opts.pageNum === null) {
      throw new Error(
        "Missing the required parameter 'opts.pageNum' when calling manageHubStoragePartitionList"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      queryParams['companyCode'] = opts.companyCode
    }
    if (opts.database !== undefined && opts.database !== null) {
      queryParams['database'] = opts.database
    }
    if (opts.table !== undefined && opts.table !== null) {
      queryParams['table'] = opts.table
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      queryParams['pageNum'] = opts.pageNum
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call manageHubStoragePartitionList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/manageHubStoragePartitionList',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  分页查询发布对象列表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageSize] - 页面容量  optional
      * @param {integer} [opts.pageNum] - 页号  optional
      * @param {string} [opts.objUk] - 对象ID  optional
      * @param {string} [opts.objName] - 对象名称  optional
      * @param {string} [opts.objTypeCode] - 对象类型编码  optional
      * @param {string} [opts.objChangeTypeCode] - 变更类型编码  optional
      * @param {string} [opts.submitterPin] - 提交人  optional
      * @param {integer} [opts.submitTimeStart] - 提交开始时间  optional
      * @param {integer} [opts.submitTimeEnd] - 提交结束时间  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param publishObjPageVo result
      */

  describePublishObjs (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  describePublishObjs"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling describePublishObjs"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling describePublishObjs"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling describePublishObjs"
      )
    }

    let postBody = {}
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.objUk !== undefined && opts.objUk !== null) {
      postBody['objUk'] = opts.objUk
    }
    if (opts.objName !== undefined && opts.objName !== null) {
      postBody['objName'] = opts.objName
    }
    if (opts.objTypeCode !== undefined && opts.objTypeCode !== null) {
      postBody['objTypeCode'] = opts.objTypeCode
    }
    if (
      opts.objChangeTypeCode !== undefined &&
      opts.objChangeTypeCode !== null
    ) {
      postBody['objChangeTypeCode'] = opts.objChangeTypeCode
    }
    if (opts.submitterPin !== undefined && opts.submitterPin !== null) {
      postBody['submitterPin'] = opts.submitterPin
    }
    if (opts.submitTimeStart !== undefined && opts.submitTimeStart !== null) {
      postBody['submitTimeStart'] = opts.submitTimeStart
    }
    if (opts.submitTimeEnd !== undefined && opts.submitTimeEnd !== null) {
      postBody['submitTimeEnd'] = opts.submitTimeEnd
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describePublishObjs with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/describePublishObjs',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  撤销发布对象
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {array} [opts.objIds] - ID列表  optional
      * @param {string} [opts.workspaceCode] - 当前工作空间编码  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      */

  deletePublishObj (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  deletePublishObj"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling deletePublishObj"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling deletePublishObj"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling deletePublishObj"
      )
    }

    let postBody = {}
    if (opts.objIds !== undefined && opts.objIds !== null) {
      postBody['objIds'] = opts.objIds
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deletePublishObj with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/deletePublishObj',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  发布对象信息细节查看
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.objId] - ID  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param publishObjDetailVo result
      */

  describePublishObj (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  describePublishObj"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling describePublishObj"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling describePublishObj"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling describePublishObj"
      )
    }

    let postBody = {}
    if (opts.objId !== undefined && opts.objId !== null) {
      postBody['objId'] = opts.objId
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describePublishObj with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/describePublishObj',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  发布包信息预览
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {array} [opts.objIds] - ID列表  optional
      * @param {string} [opts.workspaceCode] - 当前工作空间编码  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param previewPackageVo result
      */

  previewPackage (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  previewPackage"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling previewPackage"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling previewPackage"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling previewPackage"
      )
    }

    let postBody = {}
    if (opts.objIds !== undefined && opts.objIds !== null) {
      postBody['objIds'] = opts.objIds
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call previewPackage with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/previewPackage',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  将发布物打包
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {array} [opts.objIds] - ID列表  optional
      * @param {string} [opts.workspaceCode] - 当前工作空间编码  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      */

  packagePublishObj (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  packagePublishObj"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling packagePublishObj"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling packagePublishObj"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling packagePublishObj"
      )
    }

    let postBody = {}
    if (opts.objIds !== undefined && opts.objIds !== null) {
      postBody['objIds'] = opts.objIds
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call packagePublishObj with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/packagePublishObj',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  分页查询发布包列表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageSize] - 页面容量  optional
      * @param {integer} [opts.pageNum] - 页号  optional
      * @param {string} [opts.pkgName] - 发布包名称  optional
      * @param {integer} [opts.pkgId] - 发布包ID  optional
      * @param {string} [opts.publisher] - 发布人  optional
      * @param {string} [opts.pkgStatus] - 发布包状态  optional
      * @param {integer} [opts.pkgPublishTimeStart] - 发布时间开始  optional
      * @param {integer} [opts.pkgPublishTimeEnd] - 发布时间结束  optional
      * @param {string} [opts.pkgCreator] - 打包人  optional
      * @param {integer} [opts.pkgCreateTimeStart] - 打包时间开始  optional
      * @param {integer} [opts.pkgCreateTimeEnd] - 打包时间结束  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param publishPkgPageVo result
      */

  describePublishPkgs (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  describePublishPkgs"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling describePublishPkgs"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling describePublishPkgs"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling describePublishPkgs"
      )
    }

    let postBody = {}
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pkgName !== undefined && opts.pkgName !== null) {
      postBody['pkgName'] = opts.pkgName
    }
    if (opts.pkgId !== undefined && opts.pkgId !== null) {
      postBody['pkgId'] = opts.pkgId
    }
    if (opts.publisher !== undefined && opts.publisher !== null) {
      postBody['publisher'] = opts.publisher
    }
    if (opts.pkgStatus !== undefined && opts.pkgStatus !== null) {
      postBody['pkgStatus'] = opts.pkgStatus
    }
    if (
      opts.pkgPublishTimeStart !== undefined &&
      opts.pkgPublishTimeStart !== null
    ) {
      postBody['pkgPublishTimeStart'] = opts.pkgPublishTimeStart
    }
    if (
      opts.pkgPublishTimeEnd !== undefined &&
      opts.pkgPublishTimeEnd !== null
    ) {
      postBody['pkgPublishTimeEnd'] = opts.pkgPublishTimeEnd
    }
    if (opts.pkgCreator !== undefined && opts.pkgCreator !== null) {
      postBody['pkgCreator'] = opts.pkgCreator
    }
    if (
      opts.pkgCreateTimeStart !== undefined &&
      opts.pkgCreateTimeStart !== null
    ) {
      postBody['pkgCreateTimeStart'] = opts.pkgCreateTimeStart
    }
    if (opts.pkgCreateTimeEnd !== undefined && opts.pkgCreateTimeEnd !== null) {
      postBody['pkgCreateTimeEnd'] = opts.pkgCreateTimeEnd
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describePublishPkgs with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/describePublishPkgs',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  发布包详情查询
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pkgId] - ID  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param publishPkgDetailVo result
      */

  describePublishPkg (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  describePublishPkg"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling describePublishPkg"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling describePublishPkg"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling describePublishPkg"
      )
    }

    let postBody = {}
    if (opts.pkgId !== undefined && opts.pkgId !== null) {
      postBody['pkgId'] = opts.pkgId
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describePublishPkg with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/describePublishPkg',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  驳回发布包
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {array} [opts.pkgIds] - 发布包ID列表  optional
      * @param {string} [opts.workspaceCode] - 当前工作空间编码  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      */

  deletePublishPkg (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  deletePublishPkg"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling deletePublishPkg"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling deletePublishPkg"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling deletePublishPkg"
      )
    }

    let postBody = {}
    if (opts.pkgIds !== undefined && opts.pkgIds !== null) {
      postBody['pkgIds'] = opts.pkgIds
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deletePublishPkg with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/deletePublishPkg',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  发布发布包
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {array} [opts.pkgIds] - 发布包ID列表  optional
      * @param {string} [opts.workspaceCode] - 当前工作空间编码  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      */

  publishPkg (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  publishPkg"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling publishPkg"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling publishPkg"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling publishPkg"
      )
    }

    let postBody = {}
    if (opts.pkgIds !== undefined && opts.pkgIds !== null) {
      postBody['pkgIds'] = opts.pkgIds
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call publishPkg with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/publishPkg',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据父目录CODE删除目录
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.catalogCode - 目录code
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusCatalogDelete (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusCatalogDelete"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusCatalogDelete"
      )
    }
    if (opts.catalogCode === undefined || opts.catalogCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.catalogCode' when calling uranusCatalogDelete"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.catalogCode !== undefined && opts.catalogCode !== null) {
      queryParams['catalogCode'] = opts.catalogCode
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusCatalogDelete with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusCatalogDelete',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  目录根据companyCode查询目录
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.parentCode - 父目录code
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListCatalogInfoCode uranusResultListCatalogInfoCode
      */

  uranusCatalogQueryList (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusCatalogQueryList"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusCatalogQueryList"
      )
    }
    if (opts.parentCode === undefined || opts.parentCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.parentCode' when calling uranusCatalogQueryList"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.parentCode !== undefined && opts.parentCode !== null) {
      queryParams['parentCode'] = opts.parentCode
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusCatalogQueryList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusCatalogQueryList',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  工作流目录树
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.keyWord] - 关键字查询  optional
      * @param {string} [opts.catalogCode] - 目录code  optional
      * @param {string} [opts.flowCode] - 工作流code  optional
      * @param {string} [opts.searchType] - 查询过滤条件  all 全部、recent 最近使用、join 参数、collection 收藏  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListCatalogInfoList uranusResultListCatalogInfoList
      */

  uranusQueryList (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusQueryList"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusQueryList"
      )
    }

    let postBody = {}
    if (opts.keyWord !== undefined && opts.keyWord !== null) {
      postBody['keyWord'] = opts.keyWord
    }
    if (opts.catalogCode !== undefined && opts.catalogCode !== null) {
      postBody['catalogCode'] = opts.catalogCode
    }
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      postBody['flowCode'] = opts.flowCode
    }
    if (opts.searchType !== undefined && opts.searchType !== null) {
      postBody['searchType'] = opts.searchType
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusQueryList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusQueryList',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  修改目录属性
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.unrealId] - 前端排序唯一ID  optional
      * @param {string} opts.catalogCode - 目录code
      * @param {string} [opts.catalogName] - 目录名称  optional
      * @param {integer} [opts.catalogType] - 0：非叶子目录， 1：叶子目录  optional
      * @param {string} [opts.parentCode] - 父目录code  optional
      * @param {integer} [opts.childrenNum] - 子节点数量  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusCatalogUpdate (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusCatalogUpdate"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusCatalogUpdate"
      )
    }
    if (opts.catalogCode === undefined || opts.catalogCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.catalogCode' when calling uranusCatalogUpdate"
      )
    }

    let postBody = {}
    if (opts.unrealId !== undefined && opts.unrealId !== null) {
      postBody['unrealId'] = opts.unrealId
    }
    if (opts.catalogCode !== undefined && opts.catalogCode !== null) {
      postBody['catalogCode'] = opts.catalogCode
    }
    if (opts.catalogName !== undefined && opts.catalogName !== null) {
      postBody['catalogName'] = opts.catalogName
    }
    if (opts.catalogType !== undefined && opts.catalogType !== null) {
      postBody['catalogType'] = opts.catalogType
    }
    if (opts.parentCode !== undefined && opts.parentCode !== null) {
      postBody['parentCode'] = opts.parentCode
    }
    if (opts.childrenNum !== undefined && opts.childrenNum !== null) {
      postBody['childrenNum'] = opts.childrenNum
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusCatalogUpdate with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusCatalogUpdate',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  创建新的目录
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.catalogName - 目录名称
      * @param {integer} [opts.catalogType] - 0：非叶子目录， 1：叶子目录  optional
      * @param {string} [opts.parentCode] - 父目录code  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusCatalogSave (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusCatalogSave"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusCatalogSave"
      )
    }
    if (opts.catalogName === undefined || opts.catalogName === null) {
      throw new Error(
        "Missing the required parameter 'opts.catalogName' when calling uranusCatalogSave"
      )
    }

    let postBody = {}
    if (opts.catalogName !== undefined && opts.catalogName !== null) {
      postBody['catalogName'] = opts.catalogName
    }
    if (opts.catalogType !== undefined && opts.catalogType !== null) {
      postBody['catalogType'] = opts.catalogType
    }
    if (opts.parentCode !== undefined && opts.parentCode !== null) {
      postBody['parentCode'] = opts.parentCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusCatalogSave with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusCatalogSave',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  数据下载
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} opts.historyId - 执行历史ID
      * @param {string} opts.fileName - 文件名称
      * @param {string} [opts.characterSet] - 字符集: GBK、UTF-8  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param string result  下载地址
      */

  uranusTableDataDownload (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTableDataDownload"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTableDataDownload"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling uranusTableDataDownload"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTableDataDownload"
      )
    }
    if (opts.historyId === undefined || opts.historyId === null) {
      throw new Error(
        "Missing the required parameter 'opts.historyId' when calling uranusTableDataDownload"
      )
    }
    if (opts.fileName === undefined || opts.fileName === null) {
      throw new Error(
        "Missing the required parameter 'opts.fileName' when calling uranusTableDataDownload"
      )
    }

    let postBody = {}
    if (opts.historyId !== undefined && opts.historyId !== null) {
      postBody['historyId'] = opts.historyId
    }
    if (opts.fileName !== undefined && opts.fileName !== null) {
      postBody['fileName'] = opts.fileName
    }
    if (opts.characterSet !== undefined && opts.characterSet !== null) {
      postBody['characterSet'] = opts.characterSet
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTableDataDownload with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTableDataDownload',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  数据上传
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} opts.fileKey - 文件路径（key）
      * @param {string} opts.fileType - 文件类型：csv、text、xls、xlsx
      * @param {string} [opts.delimiter] - 分隔符: en-comma 英文逗号，en-semicolon 英文分号，space 空格，pipe 竖线，hash 井号，and 与号，line-feed-lf 换行符（UNIX），line-feed-crlf 换行符（Windows）  optional
      * @param {string} [opts.characterSet] - 字符集: GBK、UTF-8、ISO-8859-1  optional
      * @param {integer} [opts.startRow] - 导入起始行  optional
      * @param {string} opts.projectEnv - 项目环境: prod 生产环境、dev开发环境
      * @param {string} opts.projectCode - 项目编码
      * @param {string} opts.tableName - 目标表名
      * @param {array} [opts.partitionInfos] - 导入分区，如果是分区表则必传  optional
      * @param {string} opts.importStrategy - 导入策略：append 追加、overwrite 覆盖
      * @param {string} opts.resourceCode - 资源组编码
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param string result  任务id
      */

  uranusTableDataLoad (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTableDataLoad"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTableDataLoad"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling uranusTableDataLoad"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTableDataLoad"
      )
    }
    if (opts.fileKey === undefined || opts.fileKey === null) {
      throw new Error(
        "Missing the required parameter 'opts.fileKey' when calling uranusTableDataLoad"
      )
    }
    if (opts.fileType === undefined || opts.fileType === null) {
      throw new Error(
        "Missing the required parameter 'opts.fileType' when calling uranusTableDataLoad"
      )
    }
    if (opts.projectEnv === undefined || opts.projectEnv === null) {
      throw new Error(
        "Missing the required parameter 'opts.projectEnv' when calling uranusTableDataLoad"
      )
    }
    if (opts.projectCode === undefined || opts.projectCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.projectCode' when calling uranusTableDataLoad"
      )
    }
    if (opts.tableName === undefined || opts.tableName === null) {
      throw new Error(
        "Missing the required parameter 'opts.tableName' when calling uranusTableDataLoad"
      )
    }
    if (opts.importStrategy === undefined || opts.importStrategy === null) {
      throw new Error(
        "Missing the required parameter 'opts.importStrategy' when calling uranusTableDataLoad"
      )
    }
    if (opts.resourceCode === undefined || opts.resourceCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.resourceCode' when calling uranusTableDataLoad"
      )
    }

    let postBody = {}
    if (opts.fileKey !== undefined && opts.fileKey !== null) {
      postBody['fileKey'] = opts.fileKey
    }
    if (opts.fileType !== undefined && opts.fileType !== null) {
      postBody['fileType'] = opts.fileType
    }
    if (opts.delimiter !== undefined && opts.delimiter !== null) {
      postBody['delimiter'] = opts.delimiter
    }
    if (opts.characterSet !== undefined && opts.characterSet !== null) {
      postBody['characterSet'] = opts.characterSet
    }
    if (opts.startRow !== undefined && opts.startRow !== null) {
      postBody['startRow'] = opts.startRow
    }
    if (opts.projectEnv !== undefined && opts.projectEnv !== null) {
      postBody['projectEnv'] = opts.projectEnv
    }
    if (opts.projectCode !== undefined && opts.projectCode !== null) {
      postBody['projectCode'] = opts.projectCode
    }
    if (opts.tableName !== undefined && opts.tableName !== null) {
      postBody['tableName'] = opts.tableName
    }
    if (opts.partitionInfos !== undefined && opts.partitionInfos !== null) {
      postBody['partitionInfos'] = opts.partitionInfos
    }
    if (opts.importStrategy !== undefined && opts.importStrategy !== null) {
      postBody['importStrategy'] = opts.importStrategy
    }
    if (opts.resourceCode !== undefined && opts.resourceCode !== null) {
      postBody['resourceCode'] = opts.resourceCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTableDataLoad with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTableDataLoad',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  数据预览
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} opts.fileType - 文件类型：csv、text、xls、xlsx
      * @param {string} opts.fileKey - 文件路径（key）
      * @param {string} [opts.delimiter] - 分隔符: en-comma 英文逗号，en-semicolon 英文分号，space 空格，pipe 竖线，hash 井号，and 与号，line-feed-lf 换行符（UNIX），line-feed-crlf 换行符（Windows）  optional
      * @param {integer} [opts.startRow] - 导入起始行  optional
      * @param {string} [opts.characterSet] - 字符集: GBK、UTF-8、ISO-8859-1，默认为  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param row result
      */

  uranusDataLoadPreview (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusDataLoadPreview"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusDataLoadPreview"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling uranusDataLoadPreview"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusDataLoadPreview"
      )
    }
    if (opts.fileType === undefined || opts.fileType === null) {
      throw new Error(
        "Missing the required parameter 'opts.fileType' when calling uranusDataLoadPreview"
      )
    }
    if (opts.fileKey === undefined || opts.fileKey === null) {
      throw new Error(
        "Missing the required parameter 'opts.fileKey' when calling uranusDataLoadPreview"
      )
    }

    let postBody = {}
    if (opts.fileType !== undefined && opts.fileType !== null) {
      postBody['fileType'] = opts.fileType
    }
    if (opts.fileKey !== undefined && opts.fileKey !== null) {
      postBody['fileKey'] = opts.fileKey
    }
    if (opts.delimiter !== undefined && opts.delimiter !== null) {
      postBody['delimiter'] = opts.delimiter
    }
    if (opts.startRow !== undefined && opts.startRow !== null) {
      postBody['startRow'] = opts.startRow
    }
    if (opts.characterSet !== undefined && opts.characterSet !== null) {
      postBody['characterSet'] = opts.characterSet
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusDataLoadPreview with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusDataLoadPreview',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  数据上传历史任务
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageNum] - 页号  optional
      * @param {integer} [opts.pageSize] - 页面容量  optional
      * @param {string} [opts.tableName] - 表名  optional
      * @param {array} [opts.states] - 状态过滤: SUBMITTED 已提交、ACCEPTED 等待执行、RUNNING 上传中、FINISHED 成功、FAILED 上传失败、KILLED 终止、UNKNOWN 未知  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param dataLoadHistoryResult result
      */

  uranusDataLoadHistory (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusDataLoadHistory"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusDataLoadHistory"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling uranusDataLoadHistory"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusDataLoadHistory"
      )
    }

    let postBody = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.tableName !== undefined && opts.tableName !== null) {
      postBody['tableName'] = opts.tableName
    }
    if (opts.states !== undefined && opts.states !== null) {
      postBody['states'] = opts.states
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusDataLoadHistory with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusDataLoadHistory',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  终止数据上传任务
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} opts.applicationId - 任务id
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      */

  uranusDataLoadKill (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusDataLoadKill"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusDataLoadKill"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling uranusDataLoadKill"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusDataLoadKill"
      )
    }
    if (opts.applicationId === undefined || opts.applicationId === null) {
      throw new Error(
        "Missing the required parameter 'opts.applicationId' when calling uranusDataLoadKill"
      )
    }

    let postBody = {}
    if (opts.applicationId !== undefined && opts.applicationId !== null) {
      postBody['applicationId'] = opts.applicationId
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusDataLoadKill with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusDataLoadKill',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取数据上传任务日志
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} opts.applicationId - 任务id
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param string result
      */

  uranusDataLoadLog (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusDataLoadLog"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusDataLoadLog"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling uranusDataLoadLog"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusDataLoadLog"
      )
    }
    if (opts.applicationId === undefined || opts.applicationId === null) {
      throw new Error(
        "Missing the required parameter 'opts.applicationId' when calling uranusDataLoadLog"
      )
    }

    let postBody = {}
    if (opts.applicationId !== undefined && opts.applicationId !== null) {
      postBody['applicationId'] = opts.applicationId
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusDataLoadLog with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusDataLoadLog',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询系统参数
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultResListString uranusResultResListString
      */

  uranusDictQuerySysParam (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusDictQuerySysParam"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusDictQuerySysParam"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusDictQuerySysParam with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusDictQuerySysParam',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  建表的列类型查询
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListDictVO uranusResultListDictVO
      */

  uranusDictTableCode (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusDictTableCode"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusDictTableCode"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusDictTableCode with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusDictTableCode',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  节点发布状态public_status 节点发布变更类型 public_chage_type
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.pDictCode - pDictCode
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListDictRes uranusResultListDictRes
      */

  queryList (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  queryList"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling queryList"
      )
    }
    if (opts.pDictCode === undefined || opts.pDictCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.pDictCode' when calling queryList"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.pDictCode !== undefined && opts.pDictCode !== null) {
      queryParams['pDictCode'] = opts.pDictCode
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call queryList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusDictQueryList',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  执行查询
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.flowCode] - 流程code  optional
      * @param {string} [opts.content] - 脚本内容  optional
      * @param {string} [opts.execEngine] - 执行引擎MapReduce,Spark,Tez,presto,Python2,Python3,auto,默认spark  optional
      * @param {uranusTaskParamReq} [opts.args] - 脚本内容的变量参数配置  optional
      * @param {string} [opts.resourceName] - 资源组名称  optional
      * @param {string} [opts.resourceCode] - 资源组code  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultInteger uranusResultInteger
      */

  uranusExtraRunnerStart (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusExtraRunnerStart"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusExtraRunnerStart"
      )
    }

    let postBody = {}
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      postBody['flowCode'] = opts.flowCode
    }
    if (opts.content !== undefined && opts.content !== null) {
      postBody['content'] = opts.content
    }
    if (opts.execEngine !== undefined && opts.execEngine !== null) {
      postBody['execEngine'] = opts.execEngine
    }
    if (opts.args !== undefined && opts.args !== null) {
      postBody['args'] = opts.args
    }
    if (opts.resourceName !== undefined && opts.resourceName !== null) {
      postBody['resourceName'] = opts.resourceName
    }
    if (opts.resourceCode !== undefined && opts.resourceCode !== null) {
      postBody['resourceCode'] = opts.resourceCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusExtraRunnerStart with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusExtraRunnerStart',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  停止查询
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} opts.runId - 执行id
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultBoolean uranusResultBoolean
      */

  uranusExtraRunnerStop (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusExtraRunnerStop"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusExtraRunnerStop"
      )
    }
    if (opts.runId === undefined || opts.runId === null) {
      throw new Error(
        "Missing the required parameter 'opts.runId' when calling uranusExtraRunnerStop"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.runId !== undefined && opts.runId !== null) {
      queryParams['runId'] = opts.runId
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusExtraRunnerStop with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusExtraRunnerStop',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取查询结果文件列表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} opts.runId - 执行id
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListString uranusResultListString
      */

  uranusExtraRunnerResultList (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusExtraRunnerResultList"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusExtraRunnerResultList"
      )
    }
    if (opts.runId === undefined || opts.runId === null) {
      throw new Error(
        "Missing the required parameter 'opts.runId' when calling uranusExtraRunnerResultList"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.runId !== undefined && opts.runId !== null) {
      queryParams['runId'] = opts.runId
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusExtraRunnerResultList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusExtraRunnerResultList',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取查询结果
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} opts.runId - 执行id
      * @param {string} opts.fileName - 结果文件名称
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultLinkedHashMapObjectObject uranusResultLinkedHashMapObjectObject
      */

  uranusExtraRunnerResult (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusExtraRunnerResult"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusExtraRunnerResult"
      )
    }
    if (opts.runId === undefined || opts.runId === null) {
      throw new Error(
        "Missing the required parameter 'opts.runId' when calling uranusExtraRunnerResult"
      )
    }
    if (opts.fileName === undefined || opts.fileName === null) {
      throw new Error(
        "Missing the required parameter 'opts.fileName' when calling uranusExtraRunnerResult"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.runId !== undefined && opts.runId !== null) {
      queryParams['runId'] = opts.runId
    }
    if (opts.fileName !== undefined && opts.fileName !== null) {
      queryParams['fileName'] = opts.fileName
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusExtraRunnerResult with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusExtraRunnerResult',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  解析脚本中参数
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.content] - 脚本内容  optional
      * @param {string} [opts.simDate] - 调试模拟时间 默认今天 2015-10-02 00:00  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListTaskParamReq uranusResultListTaskParamReq
      */

  uranusExtraRunnerParamParse (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusExtraRunnerParamParse"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusExtraRunnerParamParse"
      )
    }

    let postBody = {}
    if (opts.content !== undefined && opts.content !== null) {
      postBody['content'] = opts.content
    }
    if (opts.simDate !== undefined && opts.simDate !== null) {
      postBody['simDate'] = opts.simDate
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusExtraRunnerParamParse with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusExtraRunnerParamParse',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据空间code获取jar包目录树
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} opts.isDir - 是否是目录 0 返回全部 1 只返回目录
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListSparkJarManagerRes uranusResultListSparkJarManagerRes
      */

  uranusQueryJarManagementTree (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusQueryJarManagementTree"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusQueryJarManagementTree"
      )
    }
    if (opts.isDir === undefined || opts.isDir === null) {
      throw new Error(
        "Missing the required parameter 'opts.isDir' when calling uranusQueryJarManagementTree"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.isDir !== undefined && opts.isDir !== null) {
      queryParams['isDir'] = opts.isDir
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusQueryJarManagementTree with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusQueryJarManagementTree',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取目录树
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.flowCode - 工作流code
      * @param {integer} opts.isDir - 是否是目录 0 返回全部 1 只返回目录
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListFileManagerRes uranusResultListFileManagerRes
      */

  uranusQueryFileTree (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusQueryFileTree"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusQueryFileTree"
      )
    }
    if (opts.flowCode === undefined || opts.flowCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.flowCode' when calling uranusQueryFileTree"
      )
    }
    if (opts.isDir === undefined || opts.isDir === null) {
      throw new Error(
        "Missing the required parameter 'opts.isDir' when calling uranusQueryFileTree"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      queryParams['flowCode'] = opts.flowCode
    }
    if (opts.isDir !== undefined && opts.isDir !== null) {
      queryParams['isDir'] = opts.isDir
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusQueryFileTree with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusQueryFileTree',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  新建资源（包含资源目录和资源文件）
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.resourceName] - 资源名称（支持中文、字母、数字、下划线，不超过50个字符）  optional
      * @param {string} [opts.originalName] - 原始资源名称（上传的原始文件在本地客户端的文件名称）  optional
      * @param {string} [opts.parentCode] - 父资源code（目录的根目录的父资源code为ROOT）  optional
      * @param {string} [opts.resourceType] - 资源类型（DIRECTORY：目录；JAR：java的jar文件；FILE：其他普通文件；ARCHIVE：其他压缩文件/归档文件）  optional
      * @param {string} [opts.relativeEngine] - 关联引擎（默认为JCW）  optional
      * @param {string} [opts.uploadMode] - 文件上传方式（默认为本地上传）  optional
      * @param {string} [opts.env] - 环境信息（prod：生产环境；dev：开发环境），简单模式默认为prod  optional
      * @param {array} [opts.managers] - 负责人  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultResourceVo uranusResultResourceVo
      */

  uranusResourceCreate (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusResourceCreate"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusResourceCreate"
      )
    }

    let postBody = {}
    if (opts.resourceName !== undefined && opts.resourceName !== null) {
      postBody['resourceName'] = opts.resourceName
    }
    if (opts.originalName !== undefined && opts.originalName !== null) {
      postBody['originalName'] = opts.originalName
    }
    if (opts.parentCode !== undefined && opts.parentCode !== null) {
      postBody['parentCode'] = opts.parentCode
    }
    if (opts.resourceType !== undefined && opts.resourceType !== null) {
      postBody['resourceType'] = opts.resourceType
    }
    if (opts.relativeEngine !== undefined && opts.relativeEngine !== null) {
      postBody['relativeEngine'] = opts.relativeEngine
    }
    if (opts.uploadMode !== undefined && opts.uploadMode !== null) {
      postBody['uploadMode'] = opts.uploadMode
    }
    if (opts.env !== undefined && opts.env !== null) {
      postBody['env'] = opts.env
    }
    if (opts.managers !== undefined && opts.managers !== null) {
      postBody['managers'] = opts.managers
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusResourceCreate with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusResourceCreate',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  更新资源
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.resourceCode] - 资源code  optional
      * @param {string} [opts.originalName] - 原始资源名称（上传的原始文件在本地客户端的文件名称）  optional
      * @param {string} [opts.uploadMode] - 文件上传方式（默认为本地上传）  optional
      * @param {array} [opts.managers] - 负责人  optional
      * @param {string} [opts.status] - 资源状态  optional
      * @param {string} [opts.env] - 环境信息（prod：生产环境；dev：开发环境），简单模式默认为prod  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultResourceVo uranusResultResourceVo
      */

  uranusResourceUpdate (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusResourceUpdate"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusResourceUpdate"
      )
    }

    let postBody = {}
    if (opts.resourceCode !== undefined && opts.resourceCode !== null) {
      postBody['resourceCode'] = opts.resourceCode
    }
    if (opts.originalName !== undefined && opts.originalName !== null) {
      postBody['originalName'] = opts.originalName
    }
    if (opts.uploadMode !== undefined && opts.uploadMode !== null) {
      postBody['uploadMode'] = opts.uploadMode
    }
    if (opts.managers !== undefined && opts.managers !== null) {
      postBody['managers'] = opts.managers
    }
    if (opts.status !== undefined && opts.status !== null) {
      postBody['status'] = opts.status
    }
    if (opts.env !== undefined && opts.env !== null) {
      postBody['env'] = opts.env
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusResourceUpdate with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusResourceUpdate',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取资源状态
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.resourceName - 资源名称（支持中文、字母、数字、下划线，不超过50个字符）
      * @param {string} opts.parentCode - 父资源code（如果没有父资源则填ROOT）
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultString uranusResultString  返回资源状态（DELETED：删除, AVAILABLE：可用, WRITING：正在写入, NONEXISTENT：不存在, FAILED：上传失败）
      */

  uranusResourceStatus (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusResourceStatus"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusResourceStatus"
      )
    }
    if (opts.resourceName === undefined || opts.resourceName === null) {
      throw new Error(
        "Missing the required parameter 'opts.resourceName' when calling uranusResourceStatus"
      )
    }
    if (opts.parentCode === undefined || opts.parentCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.parentCode' when calling uranusResourceStatus"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.resourceName !== undefined && opts.resourceName !== null) {
      queryParams['resourceName'] = opts.resourceName
    }
    if (opts.parentCode !== undefined && opts.parentCode !== null) {
      queryParams['parentCode'] = opts.parentCode
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusResourceStatus with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusResourceStatus',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  列出所有根目录(只包含根目录)
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.env - 环境信息
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultResourceVo uranusResultResourceVo  返回资源只包含目录
      */

  uranusResourceListRoot (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusResourceListRoot"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusResourceListRoot"
      )
    }
    if (opts.env === undefined || opts.env === null) {
      throw new Error(
        "Missing the required parameter 'opts.env' when calling uranusResourceListRoot"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.env !== undefined && opts.env !== null) {
      queryParams['env'] = opts.env
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusResourceListRoot with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusResourceListRoot',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  列出所有目录(只包含目录)
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.env - 环境信息
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultResourceVo uranusResultResourceVo  返回资源只包含目录
      */

  uranusResourceListDirectory (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusResourceListDirectory"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusResourceListDirectory"
      )
    }
    if (opts.env === undefined || opts.env === null) {
      throw new Error(
        "Missing the required parameter 'opts.env' when calling uranusResourceListDirectory"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.env !== undefined && opts.env !== null) {
      queryParams['env'] = opts.env
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusResourceListDirectory with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusResourceListDirectory',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  列出根目录下所有资源
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.resourceCode - 根目录的resourceCode
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultResourceVo uranusResultResourceVo  这个根目录下的所有资源
      */

  uranusResourceListRootResources (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusResourceListRootResources"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusResourceListRootResources"
      )
    }
    if (opts.resourceCode === undefined || opts.resourceCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.resourceCode' when calling uranusResourceListRootResources"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.resourceCode !== undefined && opts.resourceCode !== null) {
      queryParams['resourceCode'] = opts.resourceCode
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusResourceListRootResources with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusResourceListRootResources',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除资源
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.resourceCode] - 资源code  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultBoolean uranusResultBoolean
      */

  uranusResourceDelete (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusResourceDelete"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusResourceDelete"
      )
    }

    let postBody = {}
    if (opts.resourceCode !== undefined && opts.resourceCode !== null) {
      postBody['resourceCode'] = opts.resourceCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusResourceDelete with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusResourceDelete',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  发布资源
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.resourceCode - 资源的Code
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultBoolean uranusResultBoolean
      */

  uranusResourcePublish (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusResourcePublish"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusResourcePublish"
      )
    }
    if (opts.resourceCode === undefined || opts.resourceCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.resourceCode' when calling uranusResourcePublish"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.resourceCode !== undefined && opts.resourceCode !== null) {
      queryParams['resourceCode'] = opts.resourceCode
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusResourcePublish with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusResourcePublish',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  上传资源
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultBoolean uranusResultBoolean
      */

  uranusResourceAppendFile (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusResourceAppendFile"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusResourceAppendFile"
      )
    }

    let postBody = {}

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusResourceAppendFile with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusResourceAppendFile',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  完成并关闭资源上传
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.resourceCode] - 资源code  optional
      * @param {integer} [opts.sliceTotal] - 总片数（建议5MB一片；不分片的文件为1片）  optional
      * @param {string} [opts.md5code] - 文件md5值  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultBoolean uranusResultBoolean
      */

  uranusResourceCloseFile (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusResourceCloseFile"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusResourceCloseFile"
      )
    }

    let postBody = {}
    if (opts.resourceCode !== undefined && opts.resourceCode !== null) {
      postBody['resourceCode'] = opts.resourceCode
    }
    if (opts.sliceTotal !== undefined && opts.sliceTotal !== null) {
      postBody['sliceTotal'] = opts.sliceTotal
    }
    if (opts.md5code !== undefined && opts.md5code !== null) {
      postBody['md5code'] = opts.md5code
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusResourceCloseFile with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusResourceCloseFile',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取资源下载链接
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.resourceCode - 资源的Code
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultString uranusResultString
      */

  uranusResourceDownloadUrl (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusResourceDownloadUrl"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusResourceDownloadUrl"
      )
    }
    if (opts.resourceCode === undefined || opts.resourceCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.resourceCode' when calling uranusResourceDownloadUrl"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.resourceCode !== undefined && opts.resourceCode !== null) {
      queryParams['resourceCode'] = opts.resourceCode
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusResourceDownloadUrl with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusResourceDownloadUrl',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取资源简要信息（根据资源codes）
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.resourceCodes] - 资源codes  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultResourceBriefInfoVo uranusResultResourceBriefInfoVo  返回资源简要信息
      */

  uranusResourceGetBriefByCodes (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusResourceGetBriefByCodes"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusResourceGetBriefByCodes"
      )
    }

    let postBody = null
    let queryParams = {}
    Object.assign(
      queryParams,
      super.buildArrayParam(opts.resourceCodes, 'resourceCodes')
    )

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusResourceGetBriefByCodes with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusResourceGetBriefByCodes',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取资源简要信息(前缀匹配资源名称)
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.prefix - 资源名称前缀
      * @param {string} opts.env - 环境信息
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultResourceBriefInfoVo uranusResultResourceBriefInfoVo  返回资源简要信息
      */

  uranusResourceGetBriefByPrefix (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusResourceGetBriefByPrefix"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusResourceGetBriefByPrefix"
      )
    }
    if (opts.prefix === undefined || opts.prefix === null) {
      throw new Error(
        "Missing the required parameter 'opts.prefix' when calling uranusResourceGetBriefByPrefix"
      )
    }
    if (opts.env === undefined || opts.env === null) {
      throw new Error(
        "Missing the required parameter 'opts.env' when calling uranusResourceGetBriefByPrefix"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.prefix !== undefined && opts.prefix !== null) {
      queryParams['prefix'] = opts.prefix
    }
    if (opts.env !== undefined && opts.env !== null) {
      queryParams['env'] = opts.env
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusResourceGetBriefByPrefix with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusResourceGetBriefByPrefix',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取资源简要信息(前缀匹配资源名称)
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.prefix - 资源名称前缀
      * @param {string} opts.env - 环境信息
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultResourceVo uranusResultResourceVo  返回资源简要信息
      */

  uranusResourceGetDetailByPrefix (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusResourceGetDetailByPrefix"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusResourceGetDetailByPrefix"
      )
    }
    if (opts.prefix === undefined || opts.prefix === null) {
      throw new Error(
        "Missing the required parameter 'opts.prefix' when calling uranusResourceGetDetailByPrefix"
      )
    }
    if (opts.env === undefined || opts.env === null) {
      throw new Error(
        "Missing the required parameter 'opts.env' when calling uranusResourceGetDetailByPrefix"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.prefix !== undefined && opts.prefix !== null) {
      queryParams['prefix'] = opts.prefix
    }
    if (opts.env !== undefined && opts.env !== null) {
      queryParams['env'] = opts.env
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusResourceGetDetailByPrefix with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusResourceGetDetailByPrefix',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  停止脚本
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} opts.runId - 运行ID
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultBoolean uranusResultBoolean
      */

  uranusScriptStop (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusScriptStop"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusScriptStop"
      )
    }
    if (opts.runId === undefined || opts.runId === null) {
      throw new Error(
        "Missing the required parameter 'opts.runId' when calling uranusScriptStop"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.runId !== undefined && opts.runId !== null) {
      queryParams['runId'] = opts.runId
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusScriptStop with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusScriptStop',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  sql语法检测
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.flowCode - 流程code
      * @param {string} opts.dataSourceCode - 数据源code
      * @param {string} opts.fileCode - 文件code
      * @param {string} opts.fileName - 文件名称
      * @param {string} opts.fileType - 文件类型 SQL,SHELL,PYTHON,PERL,R,SparkJar,StarRocks,MySQL
      * @param {string} opts.content - 脚本内容
      * @param {string} opts.execEngine - sql执行引擎 apReduce,Spark,Tez,presto,Python2,Python3,auto,StarRocks,MySQL
      * @param {array} [opts.args] - 脚本参数配置  optional
      * @param {boolean} opts.segment - sql脚本是否全部执行 是false,否true
      * @param {string} [opts.resourceName] - 队列名称  optional
      * @param {string} [opts.resourceCode] - 队列code  optional
      * @param {array} [opts.loopInfo] - 循环节点信息  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListObject uranusResultListObject
      */

  uranusScriptSyntaxCheck (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusScriptSyntaxCheck"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusScriptSyntaxCheck"
      )
    }
    if (opts.flowCode === undefined || opts.flowCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.flowCode' when calling uranusScriptSyntaxCheck"
      )
    }
    if (opts.dataSourceCode === undefined || opts.dataSourceCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.dataSourceCode' when calling uranusScriptSyntaxCheck"
      )
    }
    if (opts.fileCode === undefined || opts.fileCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.fileCode' when calling uranusScriptSyntaxCheck"
      )
    }
    if (opts.fileName === undefined || opts.fileName === null) {
      throw new Error(
        "Missing the required parameter 'opts.fileName' when calling uranusScriptSyntaxCheck"
      )
    }
    if (opts.fileType === undefined || opts.fileType === null) {
      throw new Error(
        "Missing the required parameter 'opts.fileType' when calling uranusScriptSyntaxCheck"
      )
    }
    if (opts.content === undefined || opts.content === null) {
      throw new Error(
        "Missing the required parameter 'opts.content' when calling uranusScriptSyntaxCheck"
      )
    }
    if (opts.execEngine === undefined || opts.execEngine === null) {
      throw new Error(
        "Missing the required parameter 'opts.execEngine' when calling uranusScriptSyntaxCheck"
      )
    }
    if (opts.segment === undefined || opts.segment === null) {
      throw new Error(
        "Missing the required parameter 'opts.segment' when calling uranusScriptSyntaxCheck"
      )
    }

    let postBody = {}
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      postBody['flowCode'] = opts.flowCode
    }
    if (opts.dataSourceCode !== undefined && opts.dataSourceCode !== null) {
      postBody['dataSourceCode'] = opts.dataSourceCode
    }
    if (opts.fileCode !== undefined && opts.fileCode !== null) {
      postBody['fileCode'] = opts.fileCode
    }
    if (opts.fileName !== undefined && opts.fileName !== null) {
      postBody['fileName'] = opts.fileName
    }
    if (opts.fileType !== undefined && opts.fileType !== null) {
      postBody['fileType'] = opts.fileType
    }
    if (opts.content !== undefined && opts.content !== null) {
      postBody['content'] = opts.content
    }
    if (opts.execEngine !== undefined && opts.execEngine !== null) {
      postBody['execEngine'] = opts.execEngine
    }
    if (opts.args !== undefined && opts.args !== null) {
      postBody['args'] = opts.args
    }
    if (opts.segment !== undefined && opts.segment !== null) {
      postBody['segment'] = opts.segment
    }
    if (opts.resourceName !== undefined && opts.resourceName !== null) {
      postBody['resourceName'] = opts.resourceName
    }
    if (opts.resourceCode !== undefined && opts.resourceCode !== null) {
      postBody['resourceCode'] = opts.resourceCode
    }
    if (opts.loopInfo !== undefined && opts.loopInfo !== null) {
      postBody['loopInfo'] = opts.loopInfo
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusScriptSyntaxCheck with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusScriptSyntaxCheck',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  执行脚本
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.flowCode - 流程code
      * @param {string} opts.dataSourceCode - 数据源code
      * @param {string} opts.fileCode - 文件code
      * @param {string} opts.fileName - 文件名称
      * @param {string} opts.fileType - 文件类型 SQL,SHELL,PYTHON,PERL,R,SparkJar,StarRocks,MySQL
      * @param {string} opts.content - 脚本内容
      * @param {string} opts.execEngine - sql执行引擎 apReduce,Spark,Tez,presto,Python2,Python3,auto,StarRocks,MySQL
      * @param {array} [opts.args] - 脚本参数配置  optional
      * @param {boolean} opts.segment - sql脚本是否全部执行 是false,否true
      * @param {string} [opts.resourceName] - 队列名称  optional
      * @param {string} [opts.resourceCode] - 队列code  optional
      * @param {array} [opts.loopInfo] - 循环节点信息  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultString uranusResultString
      */

  uranusScriptStarters (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusScriptStarters"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusScriptStarters"
      )
    }
    if (opts.flowCode === undefined || opts.flowCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.flowCode' when calling uranusScriptStarters"
      )
    }
    if (opts.dataSourceCode === undefined || opts.dataSourceCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.dataSourceCode' when calling uranusScriptStarters"
      )
    }
    if (opts.fileCode === undefined || opts.fileCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.fileCode' when calling uranusScriptStarters"
      )
    }
    if (opts.fileName === undefined || opts.fileName === null) {
      throw new Error(
        "Missing the required parameter 'opts.fileName' when calling uranusScriptStarters"
      )
    }
    if (opts.fileType === undefined || opts.fileType === null) {
      throw new Error(
        "Missing the required parameter 'opts.fileType' when calling uranusScriptStarters"
      )
    }
    if (opts.content === undefined || opts.content === null) {
      throw new Error(
        "Missing the required parameter 'opts.content' when calling uranusScriptStarters"
      )
    }
    if (opts.execEngine === undefined || opts.execEngine === null) {
      throw new Error(
        "Missing the required parameter 'opts.execEngine' when calling uranusScriptStarters"
      )
    }
    if (opts.segment === undefined || opts.segment === null) {
      throw new Error(
        "Missing the required parameter 'opts.segment' when calling uranusScriptStarters"
      )
    }

    let postBody = {}
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      postBody['flowCode'] = opts.flowCode
    }
    if (opts.dataSourceCode !== undefined && opts.dataSourceCode !== null) {
      postBody['dataSourceCode'] = opts.dataSourceCode
    }
    if (opts.fileCode !== undefined && opts.fileCode !== null) {
      postBody['fileCode'] = opts.fileCode
    }
    if (opts.fileName !== undefined && opts.fileName !== null) {
      postBody['fileName'] = opts.fileName
    }
    if (opts.fileType !== undefined && opts.fileType !== null) {
      postBody['fileType'] = opts.fileType
    }
    if (opts.content !== undefined && opts.content !== null) {
      postBody['content'] = opts.content
    }
    if (opts.execEngine !== undefined && opts.execEngine !== null) {
      postBody['execEngine'] = opts.execEngine
    }
    if (opts.args !== undefined && opts.args !== null) {
      postBody['args'] = opts.args
    }
    if (opts.segment !== undefined && opts.segment !== null) {
      postBody['segment'] = opts.segment
    }
    if (opts.resourceName !== undefined && opts.resourceName !== null) {
      postBody['resourceName'] = opts.resourceName
    }
    if (opts.resourceCode !== undefined && opts.resourceCode !== null) {
      postBody['resourceCode'] = opts.resourceCode
    }
    if (opts.loopInfo !== undefined && opts.loopInfo !== null) {
      postBody['loopInfo'] = opts.loopInfo
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusScriptStarters with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusScriptStarters',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取运行脚本结果
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.fileName] - 文件名称 taskId_${结果集数字}  第一个结果就是：1_1,第二个结果集就是：1_2  optional
      * @param {string} [opts.fileCode] - 文件业务code  optional
      * @param {integer} [opts.pos] - 文件偏移量  optional
      * @param {integer} [opts.lines] - 读取结果条数  optional
      * @param {integer} [opts.historyId] - 运行ID  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultLinkedHashMapObjectObject uranusResultLinkedHashMapObjectObject
      */

  uranusScriptGetScriptRunResult (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusScriptGetScriptRunResult"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusScriptGetScriptRunResult"
      )
    }

    let postBody = {}
    if (opts.fileName !== undefined && opts.fileName !== null) {
      postBody['fileName'] = opts.fileName
    }
    if (opts.fileCode !== undefined && opts.fileCode !== null) {
      postBody['fileCode'] = opts.fileCode
    }
    if (opts.pos !== undefined && opts.pos !== null) {
      postBody['pos'] = opts.pos
    }
    if (opts.lines !== undefined && opts.lines !== null) {
      postBody['lines'] = opts.lines
    }
    if (opts.historyId !== undefined && opts.historyId !== null) {
      postBody['historyId'] = opts.historyId
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusScriptGetScriptRunResult with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusScriptGetScriptRunResult',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取运行脚本结果列表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.fileName] - 文件名称 taskId_${结果集数字}  第一个结果就是：1_1,第二个结果集就是：1_2  optional
      * @param {string} [opts.fileCode] - 文件业务code  optional
      * @param {integer} [opts.pos] - 文件偏移量  optional
      * @param {integer} [opts.lines] - 读取结果条数  optional
      * @param {integer} [opts.historyId] - 运行ID  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListString uranusResultListString
      */

  uranusScriptGetScriptRunResultList (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusScriptGetScriptRunResultList"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusScriptGetScriptRunResultList"
      )
    }

    let postBody = {}
    if (opts.fileName !== undefined && opts.fileName !== null) {
      postBody['fileName'] = opts.fileName
    }
    if (opts.fileCode !== undefined && opts.fileCode !== null) {
      postBody['fileCode'] = opts.fileCode
    }
    if (opts.pos !== undefined && opts.pos !== null) {
      postBody['pos'] = opts.pos
    }
    if (opts.lines !== undefined && opts.lines !== null) {
      postBody['lines'] = opts.lines
    }
    if (opts.historyId !== undefined && opts.historyId !== null) {
      postBody['historyId'] = opts.historyId
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusScriptGetScriptRunResultList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusScriptGetScriptRunResultList',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  脚本检测依赖
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.content - 脚本内容
      * @param {string} opts.fileCode - 文件Code
      * @param {integer} opts.fileType - 文件类型
      * @param {string} [opts.scriptName] - 脚本名称  optional
      * @param {array} [opts.scriptByte] - 脚本字节  optional
      * @param {string} [opts.jobName] - 任务名称  optional
      * @param {string} [opts.dependencies] - 依赖任务名称  optional
      * @param {string} [opts.scriptType] - 脚本类型  optional
      * @param {string} [opts.targetTables] - 目标表  optional
      * @param {string} [opts.saveRelFlag] - 是否保存脚本中解析出来的表相关信息  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListSchedJobDTO uranusResultListSchedJobDTO
      */

  uranusScriptVerifyScriptFileDepend (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusScriptVerifyScriptFileDepend"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusScriptVerifyScriptFileDepend"
      )
    }
    if (opts.content === undefined || opts.content === null) {
      throw new Error(
        "Missing the required parameter 'opts.content' when calling uranusScriptVerifyScriptFileDepend"
      )
    }
    if (opts.fileCode === undefined || opts.fileCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.fileCode' when calling uranusScriptVerifyScriptFileDepend"
      )
    }
    if (opts.fileType === undefined || opts.fileType === null) {
      throw new Error(
        "Missing the required parameter 'opts.fileType' when calling uranusScriptVerifyScriptFileDepend"
      )
    }

    let postBody = {}
    if (opts.content !== undefined && opts.content !== null) {
      postBody['content'] = opts.content
    }
    if (opts.fileCode !== undefined && opts.fileCode !== null) {
      postBody['fileCode'] = opts.fileCode
    }
    if (opts.fileType !== undefined && opts.fileType !== null) {
      postBody['fileType'] = opts.fileType
    }
    if (opts.scriptName !== undefined && opts.scriptName !== null) {
      postBody['scriptName'] = opts.scriptName
    }
    if (opts.scriptByte !== undefined && opts.scriptByte !== null) {
      postBody['scriptByte'] = opts.scriptByte
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.dependencies !== undefined && opts.dependencies !== null) {
      postBody['dependencies'] = opts.dependencies
    }
    if (opts.scriptType !== undefined && opts.scriptType !== null) {
      postBody['scriptType'] = opts.scriptType
    }
    if (opts.targetTables !== undefined && opts.targetTables !== null) {
      postBody['targetTables'] = opts.targetTables
    }
    if (opts.saveRelFlag !== undefined && opts.saveRelFlag !== null) {
      postBody['saveRelFlag'] = opts.saveRelFlag
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusScriptVerifyScriptFileDepend with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusScriptVerifyScriptFileDepend',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  脚本内容更新
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.fileCode - 文件Code
      * @param {string} opts.content - 文件内容
      * @param {string} opts.fileType - 文件类型 后缀名
      * @param {string} [opts.createdTime] - 创建时间  optional
      * @param {integer} opts.lockStatus - 锁状态
      * @param {string} opts.lockUser - 获得锁的用户
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusScriptSaveContent (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusScriptSaveContent"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusScriptSaveContent"
      )
    }
    if (opts.fileCode === undefined || opts.fileCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.fileCode' when calling uranusScriptSaveContent"
      )
    }
    if (opts.content === undefined || opts.content === null) {
      throw new Error(
        "Missing the required parameter 'opts.content' when calling uranusScriptSaveContent"
      )
    }
    if (opts.fileType === undefined || opts.fileType === null) {
      throw new Error(
        "Missing the required parameter 'opts.fileType' when calling uranusScriptSaveContent"
      )
    }
    if (opts.lockStatus === undefined || opts.lockStatus === null) {
      throw new Error(
        "Missing the required parameter 'opts.lockStatus' when calling uranusScriptSaveContent"
      )
    }
    if (opts.lockUser === undefined || opts.lockUser === null) {
      throw new Error(
        "Missing the required parameter 'opts.lockUser' when calling uranusScriptSaveContent"
      )
    }

    let postBody = {}
    if (opts.fileCode !== undefined && opts.fileCode !== null) {
      postBody['fileCode'] = opts.fileCode
    }
    if (opts.content !== undefined && opts.content !== null) {
      postBody['content'] = opts.content
    }
    if (opts.fileType !== undefined && opts.fileType !== null) {
      postBody['fileType'] = opts.fileType
    }
    if (opts.createdTime !== undefined && opts.createdTime !== null) {
      postBody['createdTime'] = opts.createdTime
    }
    if (opts.lockStatus !== undefined && opts.lockStatus !== null) {
      postBody['lockStatus'] = opts.lockStatus
    }
    if (opts.lockUser !== undefined && opts.lockUser !== null) {
      postBody['lockUser'] = opts.lockUser
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusScriptSaveContent with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusScriptSaveContent',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  脚本运行列表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.fileCode] - 业务线Code  optional
      * @param {array} [opts.statusList] - 运行状态列表  optional
      * @param {string} [opts.startTimeFrom] - 启动时间起点  optional
      * @param {string} [opts.startTimeTo] - 启动时间截至  optional
      * @param {string} [opts.endTimeFrom] - 结束时间起点  optional
      * @param {string} [opts.endTimeTo] - 结束时间截至  optional
      * @param {string} [opts.filePath] - 文件路径  optional
      * @param {integer} [opts.page] - 第几页  optional
      * @param {integer} [opts.pageSize] - 分页大小  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultPageResultContentScriptRunLogRes uranusResultPageResultContentScriptRunLogRes
      */

  uranusScriptRunLogList (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusScriptRunLogList"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusScriptRunLogList"
      )
    }

    let postBody = {}
    if (opts.fileCode !== undefined && opts.fileCode !== null) {
      postBody['fileCode'] = opts.fileCode
    }
    if (opts.statusList !== undefined && opts.statusList !== null) {
      postBody['statusList'] = opts.statusList
    }
    if (opts.startTimeFrom !== undefined && opts.startTimeFrom !== null) {
      postBody['startTimeFrom'] = opts.startTimeFrom
    }
    if (opts.startTimeTo !== undefined && opts.startTimeTo !== null) {
      postBody['startTimeTo'] = opts.startTimeTo
    }
    if (opts.endTimeFrom !== undefined && opts.endTimeFrom !== null) {
      postBody['endTimeFrom'] = opts.endTimeFrom
    }
    if (opts.endTimeTo !== undefined && opts.endTimeTo !== null) {
      postBody['endTimeTo'] = opts.endTimeTo
    }
    if (opts.filePath !== undefined && opts.filePath !== null) {
      postBody['filePath'] = opts.filePath
    }
    if (opts.page !== undefined && opts.page !== null) {
      postBody['page'] = opts.page
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusScriptRunLogList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusScriptRunLogList',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询脚本参数或任务参数
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.fileCode] - 文件Code  optional
      * @param {string} [opts.taskCode] - 任务Code  optional
      * @param {string} [opts.content] - 文件内容  optional
      * @param {string} [opts.sysType] - 前端传的系统参数  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListTaskParamReq uranusResultListTaskParamReq
      */

  uranusScriptQueryParams (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusScriptQueryParams"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusScriptQueryParams"
      )
    }

    let postBody = {}
    if (opts.fileCode !== undefined && opts.fileCode !== null) {
      postBody['fileCode'] = opts.fileCode
    }
    if (opts.taskCode !== undefined && opts.taskCode !== null) {
      postBody['taskCode'] = opts.taskCode
    }
    if (opts.content !== undefined && opts.content !== null) {
      postBody['content'] = opts.content
    }
    if (opts.sysType !== undefined && opts.sysType !== null) {
      postBody['sysType'] = opts.sysType
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusScriptQueryParams with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusScriptQueryParams',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  脚本参数保存/更新
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.fileCode - 文件Code
      * @param {array} [opts.params] - 脚本参数 list  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusScriptParams (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusScriptParams"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusScriptParams"
      )
    }
    if (opts.fileCode === undefined || opts.fileCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.fileCode' when calling uranusScriptParams"
      )
    }

    let postBody = {}
    if (opts.fileCode !== undefined && opts.fileCode !== null) {
      postBody['fileCode'] = opts.fileCode
    }
    if (opts.params !== undefined && opts.params !== null) {
      postBody['params'] = opts.params
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusScriptParams with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusScriptParams',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获得脚本运行日志
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} opts.historyId - 运行历史ID
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultString uranusResultString
      */

  uranusScriptRunLogLogContent (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusScriptRunLogLogContent"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusScriptRunLogLogContent"
      )
    }
    if (opts.historyId === undefined || opts.historyId === null) {
      throw new Error(
        "Missing the required parameter 'opts.historyId' when calling uranusScriptRunLogLogContent"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.historyId !== undefined && opts.historyId !== null) {
      queryParams['historyId'] = opts.historyId
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusScriptRunLogLogContent with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusScriptRunLogLogContent',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获得脚本运行记录详情
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} opts.historyId - 运行历史ID
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultScriptRunLogRes uranusResultScriptRunLogRes
      */

  uranusScriptRunLogDetail (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusScriptRunLogDetail"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusScriptRunLogDetail"
      )
    }
    if (opts.historyId === undefined || opts.historyId === null) {
      throw new Error(
        "Missing the required parameter 'opts.historyId' when calling uranusScriptRunLogDetail"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.historyId !== undefined && opts.historyId !== null) {
      queryParams['historyId'] = opts.historyId
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusScriptRunLogDetail with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusScriptRunLogDetail',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获得脚本运行的内容
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} opts.historyId - 运行历史ID
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultString uranusResultString
      */

  uranusScriptRunLogContent (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusScriptRunLogContent"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusScriptRunLogContent"
      )
    }
    if (opts.historyId === undefined || opts.historyId === null) {
      throw new Error(
        "Missing the required parameter 'opts.historyId' when calling uranusScriptRunLogContent"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.historyId !== undefined && opts.historyId !== null) {
      queryParams['historyId'] = opts.historyId
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusScriptRunLogContent with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusScriptRunLogContent',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获得脚本详情
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.fileCode - 文件code
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListTaskParamReq uranusResultListTaskParamReq
      */

  uranusScriptQueries (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusScriptQueries"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusScriptQueries"
      )
    }
    if (opts.fileCode === undefined || opts.fileCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.fileCode' when calling uranusScriptQueries"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.fileCode !== undefined && opts.fileCode !== null) {
      queryParams['fileCode'] = opts.fileCode
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusScriptQueries with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusScriptQueries',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  发布，保存发布，更新发布等等
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.tableEnName - 表英文名称
      * @param {string} [opts.tableCnName] - 表中文名  optional
      * @param {string} [opts.owner] - 负责人  optional
      * @param {string} [opts.manager] - 协助人  optional
      * @param {array} [opts.columns] - 表的普通字段信息  optional
      * @param {array} [opts.partitions] - 表的分区字段信息  optional
      * @param {integer} [opts.isPartition] - 0 非分区表 1 分区表  optional
      * @param {integer} [opts.updateTable] - 0 新建表 1 修改表  optional
      * @param {string} [opts.storageType] - 表存储格式  optional
      * @param {string} [opts.fieldDelim] - 表字段分隔符（只有TEXTFILE类型表需要该字段）  optional
      * @param {string} [opts.lineDelim] - 表行分隔符（只有TEXTFILE类型表需要该字段）  optional
      * @param {array} [opts.bucketCols] - 分桶字段  optional
      * @param {integer} [opts.bucketNum] - 分桶字段  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusTablePublish (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTablePublish"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTablePublish"
      )
    }
    if (opts.tableEnName === undefined || opts.tableEnName === null) {
      throw new Error(
        "Missing the required parameter 'opts.tableEnName' when calling uranusTablePublish"
      )
    }

    let postBody = {}
    if (opts.tableEnName !== undefined && opts.tableEnName !== null) {
      postBody['tableEnName'] = opts.tableEnName
    }
    if (opts.tableCnName !== undefined && opts.tableCnName !== null) {
      postBody['tableCnName'] = opts.tableCnName
    }
    if (opts.owner !== undefined && opts.owner !== null) {
      postBody['owner'] = opts.owner
    }
    if (opts.manager !== undefined && opts.manager !== null) {
      postBody['manager'] = opts.manager
    }
    if (opts.columns !== undefined && opts.columns !== null) {
      postBody['columns'] = opts.columns
    }
    if (opts.partitions !== undefined && opts.partitions !== null) {
      postBody['partitions'] = opts.partitions
    }
    if (opts.isPartition !== undefined && opts.isPartition !== null) {
      postBody['isPartition'] = opts.isPartition
    }
    if (opts.updateTable !== undefined && opts.updateTable !== null) {
      postBody['updateTable'] = opts.updateTable
    }
    if (opts.storageType !== undefined && opts.storageType !== null) {
      postBody['storageType'] = opts.storageType
    }
    if (opts.fieldDelim !== undefined && opts.fieldDelim !== null) {
      postBody['fieldDelim'] = opts.fieldDelim
    }
    if (opts.lineDelim !== undefined && opts.lineDelim !== null) {
      postBody['lineDelim'] = opts.lineDelim
    }
    if (opts.bucketCols !== undefined && opts.bucketCols !== null) {
      postBody['bucketCols'] = opts.bucketCols
    }
    if (opts.bucketNum !== undefined && opts.bucketNum !== null) {
      postBody['bucketNum'] = opts.bucketNum
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTablePublish with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTablePublish',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询授权表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.tableLike] - 模糊搜索字段  optional
      * @param {integer} opts.auth - 是否负责，1 负责、0不负责
      * @param {string} opts.env - 环境信息，dev 开发、prod 生产
      * @param {integer} [opts.diff] - 0 不强对比，1 开发、生产表强对比  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultTableBriefInfoRes uranusResultTableBriefInfoRes
      */

  uranusTableLike (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTableLike"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTableLike"
      )
    }
    if (opts.auth === undefined || opts.auth === null) {
      throw new Error(
        "Missing the required parameter 'opts.auth' when calling uranusTableLike"
      )
    }
    if (opts.env === undefined || opts.env === null) {
      throw new Error(
        "Missing the required parameter 'opts.env' when calling uranusTableLike"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.tableLike !== undefined && opts.tableLike !== null) {
      queryParams['tableLike'] = opts.tableLike
    }
    if (opts.auth !== undefined && opts.auth !== null) {
      queryParams['auth'] = opts.auth
    }
    if (opts.env !== undefined && opts.env !== null) {
      queryParams['env'] = opts.env
    }
    if (opts.diff !== undefined && opts.diff !== null) {
      queryParams['diff'] = opts.diff
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTableLike with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTableLike',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询授权表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.tableName] - 校验表名称  optional
      * @param {string} opts.env - 环境信息，dev 开发、prod 生产
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultBoolean uranusResultBoolean
      */

  uranusTableCheckTableName (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTableCheckTableName"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTableCheckTableName"
      )
    }
    if (opts.env === undefined || opts.env === null) {
      throw new Error(
        "Missing the required parameter 'opts.env' when calling uranusTableCheckTableName"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.tableName !== undefined && opts.tableName !== null) {
      queryParams['tableName'] = opts.tableName
    }
    if (opts.env !== undefined && opts.env !== null) {
      queryParams['env'] = opts.env
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTableCheckTableName with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTableCheckTableName',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  DDL语句解析
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.sqlContent - sql 文本
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultTableSaveOrUpdate uranusResultTableSaveOrUpdate
      */

  uranusTableDdlAnalyze (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTableDdlAnalyze"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTableDdlAnalyze"
      )
    }
    if (opts.sqlContent === undefined || opts.sqlContent === null) {
      throw new Error(
        "Missing the required parameter 'opts.sqlContent' when calling uranusTableDdlAnalyze"
      )
    }

    let postBody = {}
    if (opts.sqlContent !== undefined && opts.sqlContent !== null) {
      postBody['sqlContent'] = opts.sqlContent
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTableDdlAnalyze with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTableDdlAnalyze',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.table - 根据表名删除表
      * @param {string} opts.env - 环境信息，dev 开发、prod 生产
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultBoolean uranusResultBoolean
      */

  uranusTableDelete (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTableDelete"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTableDelete"
      )
    }
    if (opts.table === undefined || opts.table === null) {
      throw new Error(
        "Missing the required parameter 'opts.table' when calling uranusTableDelete"
      )
    }
    if (opts.env === undefined || opts.env === null) {
      throw new Error(
        "Missing the required parameter 'opts.env' when calling uranusTableDelete"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.table !== undefined && opts.table !== null) {
      queryParams['table'] = opts.table
    }
    if (opts.env !== undefined && opts.env !== null) {
      queryParams['env'] = opts.env
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTableDelete with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTableDelete',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询授权表的列数据
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.table - 墨迹搜索字段
      * @param {string} opts.env - 环境信息，dev 开发、prod 生产
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultTableQuery uranusResultTableQuery
      */

  uranusTableColumn (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTableColumn"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTableColumn"
      )
    }
    if (opts.table === undefined || opts.table === null) {
      throw new Error(
        "Missing the required parameter 'opts.table' when calling uranusTableColumn"
      )
    }
    if (opts.env === undefined || opts.env === null) {
      throw new Error(
        "Missing the required parameter 'opts.env' when calling uranusTableColumn"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.table !== undefined && opts.table !== null) {
      queryParams['table'] = opts.table
    }
    if (opts.env !== undefined && opts.env !== null) {
      queryParams['env'] = opts.env
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTableColumn with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTableColumn',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  发布，保存发布，更新发布等等
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.tableEnName - 表英文名称
      * @param {string} [opts.tableCnName] - 表中文名  optional
      * @param {string} [opts.owner] - 负责人  optional
      * @param {string} [opts.manager] - 协助人  optional
      * @param {array} [opts.columns] - 表的普通字段信息  optional
      * @param {array} [opts.partitions] - 表的分区字段信息  optional
      * @param {integer} [opts.isPartition] - 0 非分区表 1 分区表  optional
      * @param {integer} [opts.updateTable] - 0 新建表 1 修改表  optional
      * @param {string} [opts.storageType] - 表存储格式  optional
      * @param {string} [opts.fieldDelim] - 表字段分隔符（只有TEXTFILE类型表需要该字段）  optional
      * @param {string} [opts.lineDelim] - 表行分隔符（只有TEXTFILE类型表需要该字段）  optional
      * @param {array} [opts.bucketCols] - 分桶字段  optional
      * @param {integer} [opts.bucketNum] - 分桶字段  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusTableAlterSqlView (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTableAlterSqlView"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTableAlterSqlView"
      )
    }
    if (opts.tableEnName === undefined || opts.tableEnName === null) {
      throw new Error(
        "Missing the required parameter 'opts.tableEnName' when calling uranusTableAlterSqlView"
      )
    }

    let postBody = {}
    if (opts.tableEnName !== undefined && opts.tableEnName !== null) {
      postBody['tableEnName'] = opts.tableEnName
    }
    if (opts.tableCnName !== undefined && opts.tableCnName !== null) {
      postBody['tableCnName'] = opts.tableCnName
    }
    if (opts.owner !== undefined && opts.owner !== null) {
      postBody['owner'] = opts.owner
    }
    if (opts.manager !== undefined && opts.manager !== null) {
      postBody['manager'] = opts.manager
    }
    if (opts.columns !== undefined && opts.columns !== null) {
      postBody['columns'] = opts.columns
    }
    if (opts.partitions !== undefined && opts.partitions !== null) {
      postBody['partitions'] = opts.partitions
    }
    if (opts.isPartition !== undefined && opts.isPartition !== null) {
      postBody['isPartition'] = opts.isPartition
    }
    if (opts.updateTable !== undefined && opts.updateTable !== null) {
      postBody['updateTable'] = opts.updateTable
    }
    if (opts.storageType !== undefined && opts.storageType !== null) {
      postBody['storageType'] = opts.storageType
    }
    if (opts.fieldDelim !== undefined && opts.fieldDelim !== null) {
      postBody['fieldDelim'] = opts.fieldDelim
    }
    if (opts.lineDelim !== undefined && opts.lineDelim !== null) {
      postBody['lineDelim'] = opts.lineDelim
    }
    if (opts.bucketCols !== undefined && opts.bucketCols !== null) {
      postBody['bucketCols'] = opts.bucketCols
    }
    if (opts.bucketNum !== undefined && opts.bucketNum !== null) {
      postBody['bucketNum'] = opts.bucketNum
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTableAlterSqlView with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTableAlterSqlView',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询未发布的表变更信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.tableName] - 表名称  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultString uranusResultString
      */

  uranusTableUnpublishedInfo (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTableUnpublishedInfo"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTableUnpublishedInfo"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.tableName !== undefined && opts.tableName !== null) {
      queryParams['tableName'] = opts.tableName
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTableUnpublishedInfo with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTableUnpublishedInfo',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  发布表变更信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.tableName] - 表名称  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultBoolean uranusResultBoolean
      */

  uranusTablePublishToPublishCenter (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTablePublishToPublishCenter"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTablePublishToPublishCenter"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.tableName !== undefined && opts.tableName !== null) {
      queryParams['tableName'] = opts.tableName
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTablePublishToPublishCenter with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTablePublishToPublishCenter',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  表分隔符信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultTableDelimitersVo uranusResultTableDelimitersVo
      */

  uranusTableDelimiters (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTableDelimiters"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTableDelimiters"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTableDelimiters with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTableDelimiters',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取具体表的建表语句
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.tableName] - 表名称  optional
      * @param {string} opts.env - 环境信息，dev 开发、prod 生产
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultString uranusResultString
      */

  uranusTableDDL (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTableDDL"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTableDDL"
      )
    }
    if (opts.env === undefined || opts.env === null) {
      throw new Error(
        "Missing the required parameter 'opts.env' when calling uranusTableDDL"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.tableName !== undefined && opts.tableName !== null) {
      queryParams['tableName'] = opts.tableName
    }
    if (opts.env !== undefined && opts.env !== null) {
      queryParams['env'] = opts.env
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTableDDL with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTableDDL',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  工作流更新
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.flowName - 工作流名称
      * @param {string} [opts.flowDesc] - 工作流描述  optional
      * @param {string} opts.catalogCode - 工作流所属目录
      * @param {array} [opts.workers] - 工作流协同人  optional
      * @param {string} opts.flowCode - 工作流code
      * @param {string} [opts.manager] - 负责人  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusTaskFlowUpdate (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskFlowUpdate"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskFlowUpdate"
      )
    }
    if (opts.flowName === undefined || opts.flowName === null) {
      throw new Error(
        "Missing the required parameter 'opts.flowName' when calling uranusTaskFlowUpdate"
      )
    }
    if (opts.catalogCode === undefined || opts.catalogCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.catalogCode' when calling uranusTaskFlowUpdate"
      )
    }
    if (opts.flowCode === undefined || opts.flowCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.flowCode' when calling uranusTaskFlowUpdate"
      )
    }

    let postBody = {}
    if (opts.flowName !== undefined && opts.flowName !== null) {
      postBody['flowName'] = opts.flowName
    }
    if (opts.flowDesc !== undefined && opts.flowDesc !== null) {
      postBody['flowDesc'] = opts.flowDesc
    }
    if (opts.catalogCode !== undefined && opts.catalogCode !== null) {
      postBody['catalogCode'] = opts.catalogCode
    }
    if (opts.workers !== undefined && opts.workers !== null) {
      postBody['workers'] = opts.workers
    }
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      postBody['flowCode'] = opts.flowCode
    }
    if (opts.manager !== undefined && opts.manager !== null) {
      postBody['manager'] = opts.manager
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskFlowUpdate with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskFlowUpdate',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  工作流新建
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.flowName - 工作流名称
      * @param {string} [opts.flowDesc] - 工作流描述  optional
      * @param {string} opts.catalogCode - 工作流所属目录
      * @param {array} [opts.workers] - 工作流协同人  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultString uranusResultString
      */

  uranusTaskFlowSave (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskFlowSave"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskFlowSave"
      )
    }
    if (opts.flowName === undefined || opts.flowName === null) {
      throw new Error(
        "Missing the required parameter 'opts.flowName' when calling uranusTaskFlowSave"
      )
    }
    if (opts.catalogCode === undefined || opts.catalogCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.catalogCode' when calling uranusTaskFlowSave"
      )
    }

    let postBody = {}
    if (opts.flowName !== undefined && opts.flowName !== null) {
      postBody['flowName'] = opts.flowName
    }
    if (opts.flowDesc !== undefined && opts.flowDesc !== null) {
      postBody['flowDesc'] = opts.flowDesc
    }
    if (opts.catalogCode !== undefined && opts.catalogCode !== null) {
      postBody['catalogCode'] = opts.catalogCode
    }
    if (opts.workers !== undefined && opts.workers !== null) {
      postBody['workers'] = opts.workers
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskFlowSave with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskFlowSave',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  工作流目录树
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.keyWord] - 关键字查询  optional
      * @param {string} [opts.catalogCode] - 目录code  optional
      * @param {string} [opts.flowCode] - 工作流code  optional
      * @param {string} [opts.searchType] - 查询过滤条件  all 全部、recent 最近使用、join 参数、collection 收藏  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListTaskFlowListRes uranusResultListTaskFlowListRes
      */

  uranusTaskFlowListTree (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskFlowListTree"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskFlowListTree"
      )
    }

    let postBody = {}
    if (opts.keyWord !== undefined && opts.keyWord !== null) {
      postBody['keyWord'] = opts.keyWord
    }
    if (opts.catalogCode !== undefined && opts.catalogCode !== null) {
      postBody['catalogCode'] = opts.catalogCode
    }
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      postBody['flowCode'] = opts.flowCode
    }
    if (opts.searchType !== undefined && opts.searchType !== null) {
      postBody['searchType'] = opts.searchType
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskFlowListTree with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskFlowListTree',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  工作流删除
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {array} [opts.flowCodes] - 工作流code list  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusTaskFlowDelete (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskFlowDelete"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskFlowDelete"
      )
    }

    let postBody = {}
    if (opts.flowCodes !== undefined && opts.flowCodes !== null) {
      postBody['flowCodes'] = opts.flowCodes
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskFlowDelete with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskFlowDelete',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  工作流收藏和取消收藏
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.flowCode - 工作流Code
      * @param {integer} [opts.collectionType] - 收藏类型不能为空 0 取消收藏 1 收藏  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusTaskFlowCollection (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskFlowCollection"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskFlowCollection"
      )
    }
    if (opts.flowCode === undefined || opts.flowCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.flowCode' when calling uranusTaskFlowCollection"
      )
    }

    let postBody = {}
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      postBody['flowCode'] = opts.flowCode
    }
    if (opts.collectionType !== undefined && opts.collectionType !== null) {
      postBody['collectionType'] = opts.collectionType
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskFlowCollection with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskFlowCollection',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  检查工作流名称
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.flowName - 工作流名称
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultInteger uranusResultInteger
      */

  uranusTaskFlowCheck (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskFlowCheck"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskFlowCheck"
      )
    }
    if (opts.flowName === undefined || opts.flowName === null) {
      throw new Error(
        "Missing the required parameter 'opts.flowName' when calling uranusTaskFlowCheck"
      )
    }

    let postBody = {}
    if (opts.flowName !== undefined && opts.flowName !== null) {
      postBody['flowName'] = opts.flowName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskFlowCheck with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskFlowCheck',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  目录下工作流列表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.catalogCode - 目录code
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListTaskFlowDetailRes uranusResultListTaskFlowDetailRes
      */

  uranusTaskFlowQueryList (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskFlowQueryList"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskFlowQueryList"
      )
    }
    if (opts.catalogCode === undefined || opts.catalogCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.catalogCode' when calling uranusTaskFlowQueryList"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.catalogCode !== undefined && opts.catalogCode !== null) {
      queryParams['catalogCode'] = opts.catalogCode
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskFlowQueryList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskFlowQueryList',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  工作流详情
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.flowCode - 模糊搜索字段
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultTaskFlowDetailRes uranusResultTaskFlowDetailRes
      */

  uranusTaskFlowDetail (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskFlowDetail"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskFlowDetail"
      )
    }
    if (opts.flowCode === undefined || opts.flowCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.flowCode' when calling uranusTaskFlowDetail"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      queryParams['flowCode'] = opts.flowCode
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskFlowDetail with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskFlowDetail',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取taskCode
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultString uranusResultString
      */

  uranusTaskInfoGetTaskCode (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskInfoGetTaskCode"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskInfoGetTaskCode"
      )
    }

    let postBody = {}

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskInfoGetTaskCode with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskInfoGetTaskCode',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取spark版本
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListString uranusResultListString
      */

  uranusTaskInfoSparkVersion (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskInfoSparkVersion"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskInfoSparkVersion"
      )
    }

    let postBody = {}

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskInfoSparkVersion with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskInfoSparkVersion',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  任务保存
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {uranusTaskInfoRes} [opts.taskInfo]   optional
      * @param {uranusTaskInfoNodeReq} [opts.taskNodeInfo]   optional
      * @param {uranusTaskInfoFileReq} [opts.fileInfo]   optional
      * @param {taskInfoSparkJarReq} [opts.sparkJarInfo]   optional
      * @param {taskInfoLoopReq} [opts.loopInfo]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusTaskInfoSave (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskInfoSave"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskInfoSave"
      )
    }

    let postBody = {}
    if (opts.taskInfo !== undefined && opts.taskInfo !== null) {
      postBody['taskInfo'] = opts.taskInfo
    }
    if (opts.taskNodeInfo !== undefined && opts.taskNodeInfo !== null) {
      postBody['taskNodeInfo'] = opts.taskNodeInfo
    }
    if (opts.fileInfo !== undefined && opts.fileInfo !== null) {
      postBody['fileInfo'] = opts.fileInfo
    }
    if (opts.sparkJarInfo !== undefined && opts.sparkJarInfo !== null) {
      postBody['sparkJarInfo'] = opts.sparkJarInfo
    }
    if (opts.loopInfo !== undefined && opts.loopInfo !== null) {
      postBody['loopInfo'] = opts.loopInfo
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskInfoSave with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskInfoSave',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  任务重新发布
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} [opts.historyId] - 发布历史id  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusTaskInfoRePublish (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskInfoRePublish"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskInfoRePublish"
      )
    }

    let postBody = {}
    if (opts.historyId !== undefined && opts.historyId !== null) {
      postBody['historyId'] = opts.historyId
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskInfoRePublish with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskInfoRePublish',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  任务发布
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.taskCode - 节点的uuid
      * @param {string} opts.reason - 发布原因
      * @param {integer} [opts.publishStatus] - 发布类型  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusTaskInfoPublish (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskInfoPublish"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskInfoPublish"
      )
    }
    if (opts.taskCode === undefined || opts.taskCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.taskCode' when calling uranusTaskInfoPublish"
      )
    }
    if (opts.reason === undefined || opts.reason === null) {
      throw new Error(
        "Missing the required parameter 'opts.reason' when calling uranusTaskInfoPublish"
      )
    }

    let postBody = {}
    if (opts.taskCode !== undefined && opts.taskCode !== null) {
      postBody['taskCode'] = opts.taskCode
    }
    if (opts.reason !== undefined && opts.reason !== null) {
      postBody['reason'] = opts.reason
    }
    if (opts.publishStatus !== undefined && opts.publishStatus !== null) {
      postBody['publishStatus'] = opts.publishStatus
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskInfoPublish with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskInfoPublish',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  任务节点版本查看
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.taskCode] - 节点Code  optional
      * @param {string} [opts.taskDesc] - 节点描述  optional
      * @param {integer} [opts.page] - 页数  optional
      * @param {integer} [opts.pageSize] - 每页大小  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultPageResultContentSchedTaskInfoHistoryRes uranusResultPageResultContentSchedTaskInfoHistoryRes
      */

  uranusTaskInfoHistoryList (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskInfoHistoryList"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskInfoHistoryList"
      )
    }

    let postBody = {}
    if (opts.taskCode !== undefined && opts.taskCode !== null) {
      postBody['taskCode'] = opts.taskCode
    }
    if (opts.taskDesc !== undefined && opts.taskDesc !== null) {
      postBody['taskDesc'] = opts.taskDesc
    }
    if (opts.page !== undefined && opts.page !== null) {
      postBody['page'] = opts.page
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskInfoHistoryList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskInfoHistoryList',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  模糊查询作业信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.jobName] - 模糊作业名称  optional
      * @param {string} [opts.currentTaskCode] - 当前作业Code  optional
      * @param {array} [opts.dependJobNameList] - 已选作业名称  optional
      * @param {array} [opts.analysisDependJobNameList] - 解析出父依赖任务  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListTaskInfoRes uranusResultListTaskInfoRes
      */

  uranusTaskInfoFuzzyListJobName (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskInfoFuzzyListJobName"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskInfoFuzzyListJobName"
      )
    }

    let postBody = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.currentTaskCode !== undefined && opts.currentTaskCode !== null) {
      postBody['currentTaskCode'] = opts.currentTaskCode
    }
    if (
      opts.dependJobNameList !== undefined &&
      opts.dependJobNameList !== null
    ) {
      postBody['dependJobNameList'] = opts.dependJobNameList
    }
    if (
      opts.analysisDependJobNameList !== undefined &&
      opts.analysisDependJobNameList !== null
    ) {
      postBody['analysisDependJobNameList'] = opts.analysisDependJobNameList
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskInfoFuzzyListJobName with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskInfoFuzzyListJobName',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据脚本内容解析输出表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.currentJobName] - 当前作业名称  optional
      * @param {string} [opts.fileCode] - 文件业务CODE  optional
      * @param {string} [opts.sqlContent] - sql内容  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListAnalysisScriptRes uranusResultListAnalysisScriptRes
      */

  uranusTaskInfoAnalysisOutputTable (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskInfoAnalysisOutputTable"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskInfoAnalysisOutputTable"
      )
    }

    let postBody = {}
    if (opts.currentJobName !== undefined && opts.currentJobName !== null) {
      postBody['currentJobName'] = opts.currentJobName
    }
    if (opts.fileCode !== undefined && opts.fileCode !== null) {
      postBody['fileCode'] = opts.fileCode
    }
    if (opts.sqlContent !== undefined && opts.sqlContent !== null) {
      postBody['sqlContent'] = opts.sqlContent
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskInfoAnalysisOutputTable with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskInfoAnalysisOutputTable',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据脚本内容解析父任务依赖
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.currentJobName] - 当前作业名称  optional
      * @param {string} [opts.fileCode] - 文件业务CODE  optional
      * @param {string} [opts.sqlContent] - sql内容  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListAnalysisScriptRes uranusResultListAnalysisScriptRes
      */

  uranusTaskInfoAnalysisDependJob (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskInfoAnalysisDependJob"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskInfoAnalysisDependJob"
      )
    }

    let postBody = {}
    if (opts.currentJobName !== undefined && opts.currentJobName !== null) {
      postBody['currentJobName'] = opts.currentJobName
    }
    if (opts.fileCode !== undefined && opts.fileCode !== null) {
      postBody['fileCode'] = opts.fileCode
    }
    if (opts.sqlContent !== undefined && opts.sqlContent !== null) {
      postBody['sqlContent'] = opts.sqlContent
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskInfoAnalysisDependJob with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskInfoAnalysisDependJob',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  任务预发布
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.taskCode - 任务code
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultTaskInfoPrePublishRes uranusResultTaskInfoPrePublishRes
      */

  uranusTaskInfoPrePublish (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskInfoPrePublish"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskInfoPrePublish"
      )
    }
    if (opts.taskCode === undefined || opts.taskCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.taskCode' when calling uranusTaskInfoPrePublish"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.taskCode !== undefined && opts.taskCode !== null) {
      queryParams['taskCode'] = opts.taskCode
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskInfoPrePublish with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskInfoPrePublish',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  使用线上配置
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.taskCode - 任务code
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultTaskInfo uranusResultTaskInfo
      */

  uranusTaskInfoOnLineConfig (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskInfoOnLineConfig"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskInfoOnLineConfig"
      )
    }
    if (opts.taskCode === undefined || opts.taskCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.taskCode' when calling uranusTaskInfoOnLineConfig"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.taskCode !== undefined && opts.taskCode !== null) {
      queryParams['taskCode'] = opts.taskCode
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskInfoOnLineConfig with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskInfoOnLineConfig',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  抢锁时获取任务信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.taskCode - 任务code
      * @param {integer} opts.type - 状态
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultTaskInfo uranusResultTaskInfo
      */

  uranusTaskInfoLockDetail (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskInfoLockDetail"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskInfoLockDetail"
      )
    }
    if (opts.taskCode === undefined || opts.taskCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.taskCode' when calling uranusTaskInfoLockDetail"
      )
    }
    if (opts.type === undefined || opts.type === null) {
      throw new Error(
        "Missing the required parameter 'opts.type' when calling uranusTaskInfoLockDetail"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.taskCode !== undefined && opts.taskCode !== null) {
      queryParams['taskCode'] = opts.taskCode
    }
    if (opts.type !== undefined && opts.type !== null) {
      queryParams['type'] = opts.type
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskInfoLockDetail with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskInfoLockDetail',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  作业发布类型 新增或更新 参数为流程画布节点主键
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.taskCode - 任务code
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultInteger uranusResultInteger
      */

  uranusTaskInfoJobPublishType (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskInfoJobPublishType"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskInfoJobPublishType"
      )
    }
    if (opts.taskCode === undefined || opts.taskCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.taskCode' when calling uranusTaskInfoJobPublishType"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.taskCode !== undefined && opts.taskCode !== null) {
      queryParams['taskCode'] = opts.taskCode
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskInfoJobPublishType with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskInfoJobPublishType',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  任务详情
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.taskCode - 任务code
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultTaskInfo uranusResultTaskInfo
      */

  uranusTaskInfoDetail (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskInfoDetail"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskInfoDetail"
      )
    }
    if (opts.taskCode === undefined || opts.taskCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.taskCode' when calling uranusTaskInfoDetail"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.taskCode !== undefined && opts.taskCode !== null) {
      queryParams['taskCode'] = opts.taskCode
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskInfoDetail with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskInfoDetail',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  spark参数keys
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListObject uranusResultListObject
      */

  uranusTaskSparkParamKeys (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskSparkParamKeys"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskSparkParamKeys"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskSparkParamKeys with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskSparkParamKeys',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  任务依赖节点的输出参数查询
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.companyCode] - 租户code  optional
      * @param {string} [opts.workspaceCode] - 工作空间code  optional
      * @param {string} [opts.flowCode] - 工作流code  optional
      * @param {string} [opts.taskCode] - 任务code  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultTaskNodeParamRes uranusResultTaskNodeParamRes
      */

  uranusTaskDependExportParamList (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskDependExportParamList"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskDependExportParamList"
      )
    }

    let postBody = {}
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      postBody['companyCode'] = opts.companyCode
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      postBody['flowCode'] = opts.flowCode
    }
    if (opts.taskCode !== undefined && opts.taskCode !== null) {
      postBody['taskCode'] = opts.taskCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskDependExportParamList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskDependExportParamList',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  任务节点输出参数查询
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.taskCode - 任务code
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListTaskParamReq uranusResultListTaskParamReq
      */

  uranusTaskExportParamList (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskExportParamList"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskExportParamList"
      )
    }
    if (opts.taskCode === undefined || opts.taskCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.taskCode' when calling uranusTaskExportParamList"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.taskCode !== undefined && opts.taskCode !== null) {
      queryParams['taskCode'] = opts.taskCode
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskExportParamList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskExportParamList',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  分隔符信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListElementDelimiters uranusResultListElementDelimiters
      */

  uranusTaskElementDelimiters (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskElementDelimiters"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskElementDelimiters"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskElementDelimiters with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskElementDelimiters',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  任务单节点-上下线更新/撤销删除
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.taskCode - 任务节点code
      * @param {integer} opts.status - 任务节点状态
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusTaskUpdateStatus (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskUpdateStatus"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskUpdateStatus"
      )
    }
    if (opts.taskCode === undefined || opts.taskCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.taskCode' when calling uranusTaskUpdateStatus"
      )
    }
    if (opts.status === undefined || opts.status === null) {
      throw new Error(
        "Missing the required parameter 'opts.status' when calling uranusTaskUpdateStatus"
      )
    }

    let postBody = {}
    if (opts.taskCode !== undefined && opts.taskCode !== null) {
      postBody['taskCode'] = opts.taskCode
    }
    if (opts.status !== undefined && opts.status !== null) {
      postBody['status'] = opts.status
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskUpdateStatus with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskUpdateStatus',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  批量任务单节点-上下线更新
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {array} [opts.taskCodes] - 任务节点集合  optional
      * @param {integer} opts.status - 任务节点状态
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusTaskUpdateStatusList (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskUpdateStatusList"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskUpdateStatusList"
      )
    }
    if (opts.status === undefined || opts.status === null) {
      throw new Error(
        "Missing the required parameter 'opts.status' when calling uranusTaskUpdateStatusList"
      )
    }

    let postBody = {}
    if (opts.taskCodes !== undefined && opts.taskCodes !== null) {
      postBody['taskCodes'] = opts.taskCodes
    }
    if (opts.status !== undefined && opts.status !== null) {
      postBody['status'] = opts.status
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskUpdateStatusList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskUpdateStatusList',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  工作流-发布一
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {array} [opts.ids] - 节点列表  optional
      * @param {string} opts.reason - 发布原因
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListTaskNodePreRes uranusResultListTaskNodePreRes
      */

  uranusTaskPublishOne (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskPublishOne"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskPublishOne"
      )
    }
    if (opts.reason === undefined || opts.reason === null) {
      throw new Error(
        "Missing the required parameter 'opts.reason' when calling uranusTaskPublishOne"
      )
    }

    let postBody = {}
    if (opts.ids !== undefined && opts.ids !== null) {
      postBody['ids'] = opts.ids
    }
    if (opts.reason !== undefined && opts.reason !== null) {
      postBody['reason'] = opts.reason
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskPublishOne with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskPublishOne',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  工作流画布-作业预发布
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {array} [opts.ids] - 节点列表  optional
      * @param {string} [opts.flowCode] - 流程Code  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListTaskNodePreRes uranusResultListTaskNodePreRes
      */

  uranusTaskPagePublish (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskPagePublish"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskPagePublish"
      )
    }

    let postBody = {}
    if (opts.ids !== undefined && opts.ids !== null) {
      postBody['ids'] = opts.ids
    }
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      postBody['flowCode'] = opts.flowCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskPagePublish with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskPagePublish',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  节点分页列表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} [opts.page] - 分页  optional
      * @param {integer} [opts.pageSize] - 分页  optional
      * @param {string} [opts.taskName] - 作业名称  optional
      * @param {array} [opts.jobType] - 任务类型  optional
      * @param {array} [opts.jobChildType] - 子任务类型  optional
      * @param {string} [opts.manager] - 负责人  optional
      * @param {array} [opts.jobStatus] - 作业状态  optional
      * @param {array} [opts.updateStatus] - 修改状态  optional
      * @param {string} [opts.createTimeBefore] - 创建时间  optional
      * @param {string} [opts.createTimeAfter] - 创建时间  optional
      * @param {string} [opts.updateTimeBefore] - 更新时间  optional
      * @param {string} [opts.updateTimeAfter] - 更新时间  optional
      * @param {string} [opts.flowCode] - 流程Code  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultPageResultContentTaskNodePageRes uranusResultPageResultContentTaskNodePageRes
      */

  uranusTaskPageList (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskPageList"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskPageList"
      )
    }

    let postBody = {}
    if (opts.page !== undefined && opts.page !== null) {
      postBody['page'] = opts.page
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.taskName !== undefined && opts.taskName !== null) {
      postBody['taskName'] = opts.taskName
    }
    if (opts.jobType !== undefined && opts.jobType !== null) {
      postBody['jobType'] = opts.jobType
    }
    if (opts.jobChildType !== undefined && opts.jobChildType !== null) {
      postBody['jobChildType'] = opts.jobChildType
    }
    if (opts.manager !== undefined && opts.manager !== null) {
      postBody['manager'] = opts.manager
    }
    if (opts.jobStatus !== undefined && opts.jobStatus !== null) {
      postBody['jobStatus'] = opts.jobStatus
    }
    if (opts.updateStatus !== undefined && opts.updateStatus !== null) {
      postBody['updateStatus'] = opts.updateStatus
    }
    if (opts.createTimeBefore !== undefined && opts.createTimeBefore !== null) {
      postBody['createTimeBefore'] = opts.createTimeBefore
    }
    if (opts.createTimeAfter !== undefined && opts.createTimeAfter !== null) {
      postBody['createTimeAfter'] = opts.createTimeAfter
    }
    if (opts.updateTimeBefore !== undefined && opts.updateTimeBefore !== null) {
      postBody['updateTimeBefore'] = opts.updateTimeBefore
    }
    if (opts.updateTimeAfter !== undefined && opts.updateTimeAfter !== null) {
      postBody['updateTimeAfter'] = opts.updateTimeAfter
    }
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      postBody['flowCode'] = opts.flowCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskPageList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskPageList',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  任务单节点-更新节点位置信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.taskName] - 节点名称  optional
      * @param {array} [opts.childrenCode] - 子节点code List  optional
      * @param {array} [opts.parentCode] - 父节点code List  optional
      * @param {string} [opts.taskDesc] - 节点描述  optional
      * @param {integer} [opts.taskNodeId] - 任务类型  optional
      * @param {string} [opts.taskCode] - 节点CODE  optional
      * @param {string} [opts.manager] - 负责人  optional
      * @param {string} [opts.taskData] - 节点数据 以下前端需要用到的数据  optional
      * @param {string} [opts.nodeName] - 节点名称 以下前端需要用到的数据  optional
      * @param {string} [opts.nodeTypeName] - 节点类型  optional
      * @param {string} [opts.nodeIcon] - 节点图标 以下前端需要用到的数据  optional
      * @param {string} [opts.flowCode] - 工作流Code  optional
      * @param {string} [opts.fileCode] - 脚本文件的业务Code  optional
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {integer} [opts.isUranus] - 是否工作流任务  optional
      * @param {integer} [opts.isCurrentFlow] - 是否当前工作流任务  optional
      * @param {array} [opts.parent] - 给前端用到的  optional
      * @param {integer} [opts.haveChildren] - 是否有子任务依赖前端用到  optional
      * @param {string} [opts.cooperator] - 协作人  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusTaskNodeUpdateNodeData (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskNodeUpdateNodeData"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskNodeUpdateNodeData"
      )
    }

    let postBody = {}
    if (opts.taskName !== undefined && opts.taskName !== null) {
      postBody['taskName'] = opts.taskName
    }
    if (opts.childrenCode !== undefined && opts.childrenCode !== null) {
      postBody['childrenCode'] = opts.childrenCode
    }
    if (opts.parentCode !== undefined && opts.parentCode !== null) {
      postBody['parentCode'] = opts.parentCode
    }
    if (opts.taskDesc !== undefined && opts.taskDesc !== null) {
      postBody['taskDesc'] = opts.taskDesc
    }
    if (opts.taskNodeId !== undefined && opts.taskNodeId !== null) {
      postBody['taskNodeId'] = opts.taskNodeId
    }
    if (opts.taskCode !== undefined && opts.taskCode !== null) {
      postBody['taskCode'] = opts.taskCode
    }
    if (opts.manager !== undefined && opts.manager !== null) {
      postBody['manager'] = opts.manager
    }
    if (opts.taskData !== undefined && opts.taskData !== null) {
      postBody['taskData'] = opts.taskData
    }
    if (opts.nodeName !== undefined && opts.nodeName !== null) {
      postBody['nodeName'] = opts.nodeName
    }
    if (opts.nodeTypeName !== undefined && opts.nodeTypeName !== null) {
      postBody['nodeTypeName'] = opts.nodeTypeName
    }
    if (opts.nodeIcon !== undefined && opts.nodeIcon !== null) {
      postBody['nodeIcon'] = opts.nodeIcon
    }
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      postBody['flowCode'] = opts.flowCode
    }
    if (opts.fileCode !== undefined && opts.fileCode !== null) {
      postBody['fileCode'] = opts.fileCode
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.isUranus !== undefined && opts.isUranus !== null) {
      postBody['isUranus'] = opts.isUranus
    }
    if (opts.isCurrentFlow !== undefined && opts.isCurrentFlow !== null) {
      postBody['isCurrentFlow'] = opts.isCurrentFlow
    }
    if (opts.parent !== undefined && opts.parent !== null) {
      postBody['parent'] = opts.parent
    }
    if (opts.haveChildren !== undefined && opts.haveChildren !== null) {
      postBody['haveChildren'] = opts.haveChildren
    }
    if (opts.cooperator !== undefined && opts.cooperator !== null) {
      postBody['cooperator'] = opts.cooperator
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskNodeUpdateNodeData with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskNodeUpdateNodeData',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  任务单节点-更新作业名称
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.taskName - 节点名称
      * @param {array} [opts.childrenCode] - 子节点code List  optional
      * @param {array} [opts.parentCode] - 父节点code List  optional
      * @param {string} [opts.taskDesc] - 节点描述  optional
      * @param {integer} opts.taskNodeId - 任务类型
      * @param {string} opts.taskCode - 节点CODE
      * @param {string} opts.manager - 负责人
      * @param {string} [opts.taskData] - 节点数据 以下前端需要用到的数据  optional
      * @param {string} [opts.nodeName] - 节点名称 以下前端需要用到的数据  optional
      * @param {string} [opts.nodeTypeName] - 节点类型  optional
      * @param {string} [opts.nodeIcon] - 节点图标 以下前端需要用到的数据  optional
      * @param {string} opts.flowCode - 工作流Code
      * @param {string} [opts.fileCode] - 脚本文件的业务Code  optional
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {integer} [opts.isUranus] - 是否工作流任务  optional
      * @param {integer} [opts.isCurrentFlow] - 是否当前工作流任务  optional
      * @param {array} [opts.parent] - 给前端用到的  optional
      * @param {integer} [opts.haveChildren] - 是否有子任务依赖前端用到  optional
      * @param {string} [opts.cooperator] - 协作人  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusTaskNodeUpdateJobName (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskNodeUpdateJobName"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskNodeUpdateJobName"
      )
    }
    if (opts.taskName === undefined || opts.taskName === null) {
      throw new Error(
        "Missing the required parameter 'opts.taskName' when calling uranusTaskNodeUpdateJobName"
      )
    }
    if (opts.taskNodeId === undefined || opts.taskNodeId === null) {
      throw new Error(
        "Missing the required parameter 'opts.taskNodeId' when calling uranusTaskNodeUpdateJobName"
      )
    }
    if (opts.taskCode === undefined || opts.taskCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.taskCode' when calling uranusTaskNodeUpdateJobName"
      )
    }
    if (opts.manager === undefined || opts.manager === null) {
      throw new Error(
        "Missing the required parameter 'opts.manager' when calling uranusTaskNodeUpdateJobName"
      )
    }
    if (opts.flowCode === undefined || opts.flowCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.flowCode' when calling uranusTaskNodeUpdateJobName"
      )
    }

    let postBody = {}
    if (opts.taskName !== undefined && opts.taskName !== null) {
      postBody['taskName'] = opts.taskName
    }
    if (opts.childrenCode !== undefined && opts.childrenCode !== null) {
      postBody['childrenCode'] = opts.childrenCode
    }
    if (opts.parentCode !== undefined && opts.parentCode !== null) {
      postBody['parentCode'] = opts.parentCode
    }
    if (opts.taskDesc !== undefined && opts.taskDesc !== null) {
      postBody['taskDesc'] = opts.taskDesc
    }
    if (opts.taskNodeId !== undefined && opts.taskNodeId !== null) {
      postBody['taskNodeId'] = opts.taskNodeId
    }
    if (opts.taskCode !== undefined && opts.taskCode !== null) {
      postBody['taskCode'] = opts.taskCode
    }
    if (opts.manager !== undefined && opts.manager !== null) {
      postBody['manager'] = opts.manager
    }
    if (opts.taskData !== undefined && opts.taskData !== null) {
      postBody['taskData'] = opts.taskData
    }
    if (opts.nodeName !== undefined && opts.nodeName !== null) {
      postBody['nodeName'] = opts.nodeName
    }
    if (opts.nodeTypeName !== undefined && opts.nodeTypeName !== null) {
      postBody['nodeTypeName'] = opts.nodeTypeName
    }
    if (opts.nodeIcon !== undefined && opts.nodeIcon !== null) {
      postBody['nodeIcon'] = opts.nodeIcon
    }
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      postBody['flowCode'] = opts.flowCode
    }
    if (opts.fileCode !== undefined && opts.fileCode !== null) {
      postBody['fileCode'] = opts.fileCode
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.isUranus !== undefined && opts.isUranus !== null) {
      postBody['isUranus'] = opts.isUranus
    }
    if (opts.isCurrentFlow !== undefined && opts.isCurrentFlow !== null) {
      postBody['isCurrentFlow'] = opts.isCurrentFlow
    }
    if (opts.parent !== undefined && opts.parent !== null) {
      postBody['parent'] = opts.parent
    }
    if (opts.haveChildren !== undefined && opts.haveChildren !== null) {
      postBody['haveChildren'] = opts.haveChildren
    }
    if (opts.cooperator !== undefined && opts.cooperator !== null) {
      postBody['cooperator'] = opts.cooperator
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskNodeUpdateJobName with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskNodeUpdateJobName',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  任务单节点-新建
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.taskName] - 节点名称  optional
      * @param {array} [opts.childrenCode] - 子节点code List  optional
      * @param {array} [opts.parentCode] - 父节点code List  optional
      * @param {string} [opts.taskDesc] - 节点描述  optional
      * @param {integer} [opts.taskNodeId] - 任务类型  optional
      * @param {string} [opts.taskCode] - 节点CODE  optional
      * @param {string} [opts.manager] - 负责人  optional
      * @param {string} [opts.taskData] - 节点数据 以下前端需要用到的数据  optional
      * @param {string} [opts.nodeName] - 节点名称 以下前端需要用到的数据  optional
      * @param {string} [opts.nodeTypeName] - 节点类型  optional
      * @param {string} [opts.nodeIcon] - 节点图标 以下前端需要用到的数据  optional
      * @param {string} [opts.flowCode] - 工作流Code  optional
      * @param {string} [opts.fileCode] - 脚本文件的业务Code  optional
      * @param {string} [opts.jobName] - 作业名称  optional
      * @param {integer} [opts.isUranus] - 是否工作流任务  optional
      * @param {integer} [opts.isCurrentFlow] - 是否当前工作流任务  optional
      * @param {array} [opts.parent] - 给前端用到的  optional
      * @param {integer} [opts.haveChildren] - 是否有子任务依赖前端用到  optional
      * @param {string} [opts.cooperator] - 协作人  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultTaskNodeDetailRes uranusResultTaskNodeDetailRes
      */

  uranusTaskNodeSave (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskNodeSave"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskNodeSave"
      )
    }

    let postBody = {}
    if (opts.taskName !== undefined && opts.taskName !== null) {
      postBody['taskName'] = opts.taskName
    }
    if (opts.childrenCode !== undefined && opts.childrenCode !== null) {
      postBody['childrenCode'] = opts.childrenCode
    }
    if (opts.parentCode !== undefined && opts.parentCode !== null) {
      postBody['parentCode'] = opts.parentCode
    }
    if (opts.taskDesc !== undefined && opts.taskDesc !== null) {
      postBody['taskDesc'] = opts.taskDesc
    }
    if (opts.taskNodeId !== undefined && opts.taskNodeId !== null) {
      postBody['taskNodeId'] = opts.taskNodeId
    }
    if (opts.taskCode !== undefined && opts.taskCode !== null) {
      postBody['taskCode'] = opts.taskCode
    }
    if (opts.manager !== undefined && opts.manager !== null) {
      postBody['manager'] = opts.manager
    }
    if (opts.taskData !== undefined && opts.taskData !== null) {
      postBody['taskData'] = opts.taskData
    }
    if (opts.nodeName !== undefined && opts.nodeName !== null) {
      postBody['nodeName'] = opts.nodeName
    }
    if (opts.nodeTypeName !== undefined && opts.nodeTypeName !== null) {
      postBody['nodeTypeName'] = opts.nodeTypeName
    }
    if (opts.nodeIcon !== undefined && opts.nodeIcon !== null) {
      postBody['nodeIcon'] = opts.nodeIcon
    }
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      postBody['flowCode'] = opts.flowCode
    }
    if (opts.fileCode !== undefined && opts.fileCode !== null) {
      postBody['fileCode'] = opts.fileCode
    }
    if (opts.jobName !== undefined && opts.jobName !== null) {
      postBody['jobName'] = opts.jobName
    }
    if (opts.isUranus !== undefined && opts.isUranus !== null) {
      postBody['isUranus'] = opts.isUranus
    }
    if (opts.isCurrentFlow !== undefined && opts.isCurrentFlow !== null) {
      postBody['isCurrentFlow'] = opts.isCurrentFlow
    }
    if (opts.parent !== undefined && opts.parent !== null) {
      postBody['parent'] = opts.parent
    }
    if (opts.haveChildren !== undefined && opts.haveChildren !== null) {
      postBody['haveChildren'] = opts.haveChildren
    }
    if (opts.cooperator !== undefined && opts.cooperator !== null) {
      postBody['cooperator'] = opts.cooperator
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskNodeSave with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskNodeSave',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  任务节点保存-多节点关系
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {uranusTaskFlowUpdateReq} opts.workFlowInfo
      * @param {array} [opts.nodes] - 节点信息  optional
      * @param {string} opts.graphStr - 节点之间关系
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusTaskAddRelation (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskAddRelation"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskAddRelation"
      )
    }
    if (opts.workFlowInfo === undefined || opts.workFlowInfo === null) {
      throw new Error(
        "Missing the required parameter 'opts.workFlowInfo' when calling uranusTaskAddRelation"
      )
    }
    if (opts.graphStr === undefined || opts.graphStr === null) {
      throw new Error(
        "Missing the required parameter 'opts.graphStr' when calling uranusTaskAddRelation"
      )
    }

    let postBody = {}
    if (opts.workFlowInfo !== undefined && opts.workFlowInfo !== null) {
      postBody['workFlowInfo'] = opts.workFlowInfo
    }
    if (opts.nodes !== undefined && opts.nodes !== null) {
      postBody['nodes'] = opts.nodes
    }
    if (opts.graphStr !== undefined && opts.graphStr !== null) {
      postBody['graphStr'] = opts.graphStr
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskAddRelation with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskAddRelation',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  工作流-预发布
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.flowCode - flowCode
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListTaskNodePreRes uranusResultListTaskNodePreRes
      */

  uranusTaskPrePublish (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskPrePublish"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskPrePublish"
      )
    }
    if (opts.flowCode === undefined || opts.flowCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.flowCode' when calling uranusTaskPrePublish"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      queryParams['flowCode'] = opts.flowCode
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskPrePublish with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskPrePublish',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  流程画布-节点管理列表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListTaskNodeRes uranusResultListTaskNodeRes
      */

  uranusTaskNodeList (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskNodeList"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskNodeList"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskNodeList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskNodeList',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  任务单节点-删除
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.taskCode - 节点Code
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusTaskNodeDelete (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskNodeDelete"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskNodeDelete"
      )
    }
    if (opts.taskCode === undefined || opts.taskCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.taskCode' when calling uranusTaskNodeDelete"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.taskCode !== undefined && opts.taskCode !== null) {
      queryParams['taskCode'] = opts.taskCode
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskNodeDelete with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskNodeDelete',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  任务单节点-校验作业名称
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.jobName - 任务名称
      * @param {string} opts.flowCode - 任务流Code
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultBoolean uranusResultBoolean
      */

  uranusTaskNodeCheckJobName (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskNodeCheckJobName"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskNodeCheckJobName"
      )
    }
    if (opts.jobName === undefined || opts.jobName === null) {
      throw new Error(
        "Missing the required parameter 'opts.jobName' when calling uranusTaskNodeCheckJobName"
      )
    }
    if (opts.flowCode === undefined || opts.flowCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.flowCode' when calling uranusTaskNodeCheckJobName"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.jobName !== undefined && opts.jobName !== null) {
      queryParams['jobName'] = opts.jobName
    }
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      queryParams['flowCode'] = opts.flowCode
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskNodeCheckJobName with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskNodeCheckJobName',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  任务节点详情-多节点关系
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.flowCode - flowCode
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultTaskNodeRSaveReq uranusResultTaskNodeRSaveReq
      */

  uranusTaskGetRelation (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskGetRelation"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskGetRelation"
      )
    }
    if (opts.flowCode === undefined || opts.flowCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.flowCode' when calling uranusTaskGetRelation"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      queryParams['flowCode'] = opts.flowCode
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskGetRelation with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskGetRelation',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  任务单节点-详情
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.taskCode - 节点Code
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultTaskNodeDetailRes uranusResultTaskNodeDetailRes
      */

  uranusTaskDetail (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusTaskDetail"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusTaskDetail"
      )
    }
    if (opts.taskCode === undefined || opts.taskCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.taskCode' when calling uranusTaskDetail"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.taskCode !== undefined && opts.taskCode !== null) {
      queryParams['taskCode'] = opts.taskCode
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusTaskDetail with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusTaskDetail',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询函数接口
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.kind - 函数种类（SYSTEM：系统函数；DEFINED：自定义函数）
      * @param {string} opts.env - 环境信息（dev：开发；prod：生产），系统函数不分开发和生产，简单模式只有生产
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultListFunctionManagerRes uranusResultListFunctionManagerRes
      */

  uranusUdfListFunction (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusUdfListFunction"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusUdfListFunction"
      )
    }
    if (opts.kind === undefined || opts.kind === null) {
      throw new Error(
        "Missing the required parameter 'opts.kind' when calling uranusUdfListFunction"
      )
    }
    if (opts.env === undefined || opts.env === null) {
      throw new Error(
        "Missing the required parameter 'opts.env' when calling uranusUdfListFunction"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.kind !== undefined && opts.kind !== null) {
      queryParams['kind'] = opts.kind
    }
    if (opts.env !== undefined && opts.env !== null) {
      queryParams['env'] = opts.env
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusUdfListFunction with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusUdfListFunction',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  新建函数
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.companyCode] - 租户code  optional
      * @param {string} [opts.workspaceCode] - 命名空间code  optional
      * @param {string} [opts.functionName] - 函数名称（支持字母、数字、下划线，不超过50个字符）  optional
      * @param {integer} [opts.functionCatalogId] - 分类目录id  optional
      * @param {string} [opts.className] - 函数主类全路径  optional
      * @param {array} [opts.managers] - 负责人  optional
      * @param {array} [opts.resourceCodes] - 依赖的资源code（包括资源文件/资源目录）  optional
      * @param {string} [opts.functionFormat] - 函数格式  optional
      * @param {string} [opts.functionUsage] - 函数使用说明  optional
      * @param {string} [opts.relativeEngine] - 关联引擎  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultInteger uranusResultInteger
      */

  uranusFunctionCreate (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusFunctionCreate"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusFunctionCreate"
      )
    }

    let postBody = {}
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      postBody['companyCode'] = opts.companyCode
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.functionName !== undefined && opts.functionName !== null) {
      postBody['functionName'] = opts.functionName
    }
    if (
      opts.functionCatalogId !== undefined &&
      opts.functionCatalogId !== null
    ) {
      postBody['functionCatalogId'] = opts.functionCatalogId
    }
    if (opts.className !== undefined && opts.className !== null) {
      postBody['className'] = opts.className
    }
    if (opts.managers !== undefined && opts.managers !== null) {
      postBody['managers'] = opts.managers
    }
    if (opts.resourceCodes !== undefined && opts.resourceCodes !== null) {
      postBody['resourceCodes'] = opts.resourceCodes
    }
    if (opts.functionFormat !== undefined && opts.functionFormat !== null) {
      postBody['functionFormat'] = opts.functionFormat
    }
    if (opts.functionUsage !== undefined && opts.functionUsage !== null) {
      postBody['functionUsage'] = opts.functionUsage
    }
    if (opts.relativeEngine !== undefined && opts.relativeEngine !== null) {
      postBody['relativeEngine'] = opts.relativeEngine
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusFunctionCreate with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusFunctionCreate',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  更新函数
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.companyCode] - 租户code  optional
      * @param {string} [opts.workspaceCode] - 命名空间code  optional
      * @param {integer} [opts.functionId] - 函数id  optional
      * @param {string} [opts.className] - 函数主类全路径  optional
      * @param {array} [opts.managers] - 负责人  optional
      * @param {integer} [opts.functionCatalogId] - 分类目录id  optional
      * @param {array} [opts.resourceCodes] - 依赖的资源code（包括资源文件/资源目录）  optional
      * @param {string} [opts.functionFormat] - 函数格式  optional
      * @param {string} [opts.functionUsage] - 函数使用说明  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultBoolean uranusResultBoolean
      */

  uranusFunctionUpdate (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusFunctionUpdate"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusFunctionUpdate"
      )
    }

    let postBody = {}
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      postBody['companyCode'] = opts.companyCode
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.functionId !== undefined && opts.functionId !== null) {
      postBody['functionId'] = opts.functionId
    }
    if (opts.className !== undefined && opts.className !== null) {
      postBody['className'] = opts.className
    }
    if (opts.managers !== undefined && opts.managers !== null) {
      postBody['managers'] = opts.managers
    }
    if (
      opts.functionCatalogId !== undefined &&
      opts.functionCatalogId !== null
    ) {
      postBody['functionCatalogId'] = opts.functionCatalogId
    }
    if (opts.resourceCodes !== undefined && opts.resourceCodes !== null) {
      postBody['resourceCodes'] = opts.resourceCodes
    }
    if (opts.functionFormat !== undefined && opts.functionFormat !== null) {
      postBody['functionFormat'] = opts.functionFormat
    }
    if (opts.functionUsage !== undefined && opts.functionUsage !== null) {
      postBody['functionUsage'] = opts.functionUsage
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusFunctionUpdate with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusFunctionUpdate',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除函数
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} [opts.functionId] - 函数id  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultBoolean uranusResultBoolean
      */

  uranusFunctionDelete (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusFunctionDelete"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusFunctionDelete"
      )
    }

    let postBody = {}
    if (opts.functionId !== undefined && opts.functionId !== null) {
      postBody['functionId'] = opts.functionId
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusFunctionDelete with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusFunctionDelete',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  创建函数分类目录
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.functionCatalogName] - 分类目录名称（支持中文、字母、数字、下划线，不超过50个字符）  optional
      * @param {integer} [opts.parentCatalogId] - 分类目录的父code（函数名称是命名空间里唯一的；函数分类目录在不同目录下可以相同）  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultBoolean uranusResultBoolean
      */

  uranusFunctionCreateCatalog (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusFunctionCreateCatalog"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusFunctionCreateCatalog"
      )
    }

    let postBody = {}
    if (
      opts.functionCatalogName !== undefined &&
      opts.functionCatalogName !== null
    ) {
      postBody['functionCatalogName'] = opts.functionCatalogName
    }
    if (opts.parentCatalogId !== undefined && opts.parentCatalogId !== null) {
      postBody['parentCatalogId'] = opts.parentCatalogId
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusFunctionCreateCatalog with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusFunctionCreateCatalog',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除函数分类目录
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} [opts.functionCatalogId] - 分类目录code  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultBoolean uranusResultBoolean
      */

  uranusFunctionDeleteCatalog (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusFunctionDeleteCatalog"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusFunctionDeleteCatalog"
      )
    }

    let postBody = {}
    if (
      opts.functionCatalogId !== undefined &&
      opts.functionCatalogId !== null
    ) {
      postBody['functionCatalogId'] = opts.functionCatalogId
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusFunctionDeleteCatalog with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusFunctionDeleteCatalog',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  判断目录/函数是否存在
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} [opts.checkType] - 检查的类型（CATALOG：函数分类目录、FUNCTION：函数）  optional
      * @param {string} [opts.checkName] - 检查的名称  optional
      * @param {integer} [opts.parentCatalogId] - 分类目录的父code（函数名称是命名空间里唯一的；函数分类目录在不同目录下可以相同）  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultBoolean uranusResultBoolean
      */

  uranusFunctionCheck (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusFunctionCheck"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusFunctionCheck"
      )
    }

    let postBody = {}
    if (opts.checkType !== undefined && opts.checkType !== null) {
      postBody['checkType'] = opts.checkType
    }
    if (opts.checkName !== undefined && opts.checkName !== null) {
      postBody['checkName'] = opts.checkName
    }
    if (opts.parentCatalogId !== undefined && opts.parentCatalogId !== null) {
      postBody['parentCatalogId'] = opts.parentCatalogId
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusFunctionCheck with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusFunctionCheck',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  发布函数到发布中心
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.functionId - 函数id
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultBoolean uranusResultBoolean
      */

  uranusFunctionPublish (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusFunctionPublish"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusFunctionPublish"
      )
    }
    if (opts.functionId === undefined || opts.functionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.functionId' when calling uranusFunctionPublish"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.functionId !== undefined && opts.functionId !== null) {
      queryParams['functionId'] = opts.functionId
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusFunctionPublish with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusFunctionPublish',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据函数id查询函数
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} opts.functionId - 函数id
      * @param {string} opts.env - 环境信息（dev：开发；prod：生产），系统函数不分开发和生产，简单模式只有生产
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultDefinedFunctionVo uranusResultDefinedFunctionVo
      */

  uranusFunctionGetById (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusFunctionGetById"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusFunctionGetById"
      )
    }
    if (opts.functionId === undefined || opts.functionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.functionId' when calling uranusFunctionGetById"
      )
    }
    if (opts.env === undefined || opts.env === null) {
      throw new Error(
        "Missing the required parameter 'opts.env' when calling uranusFunctionGetById"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.functionId !== undefined && opts.functionId !== null) {
      queryParams['functionId'] = opts.functionId
    }
    if (opts.env !== undefined && opts.env !== null) {
      queryParams['env'] = opts.env
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusFunctionGetById with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusFunctionGetById',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取所有分类目录
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.env - 环境信息（dev：开发；prod：生产），系统函数不分开发和生产，简单模式只有生产
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultFunctionCatalogVoList uranusResultFunctionCatalogVoList
      */

  uranusFunctionListCatalog (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusFunctionListCatalog"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusFunctionListCatalog"
      )
    }
    if (opts.env === undefined || opts.env === null) {
      throw new Error(
        "Missing the required parameter 'opts.env' when calling uranusFunctionListCatalog"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.env !== undefined && opts.env !== null) {
      queryParams['env'] = opts.env
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusFunctionListCatalog with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusFunctionListCatalog',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  判断是否有子目录
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} [opts.fileType] - 文件类型  optional
      * @param {boolean} [opts.isJarManagement] - 是否spark-jar的管理模块,spark-jar操作hdfs通过字段区分  optional
      * @param {string} [opts.fileCode] - 文件Code  optional
      * @param {string} [opts.parentCode] - 父节点 Code  optional
      * @param {string} [opts.fileName] - 文件名称  optional
      * @param {string} opts.flowCode - 任务流Code
      * @param {string} [opts.relativePath] - 文件夹上传的时候文件的相对路径属性  optional
      * @param {integer} [opts.isUpload] - 是否上传完成 0 上传取消 1 上传完成  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultInteger uranusResultInteger
      */

  uranusWorkFlowDirIfChildrenPath (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusWorkFlowDirIfChildrenPath"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusWorkFlowDirIfChildrenPath"
      )
    }
    if (opts.flowCode === undefined || opts.flowCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.flowCode' when calling uranusWorkFlowDirIfChildrenPath"
      )
    }

    let postBody = {}
    if (opts.fileType !== undefined && opts.fileType !== null) {
      postBody['fileType'] = opts.fileType
    }
    if (opts.isJarManagement !== undefined && opts.isJarManagement !== null) {
      postBody['isJarManagement'] = opts.isJarManagement
    }
    if (opts.fileCode !== undefined && opts.fileCode !== null) {
      postBody['fileCode'] = opts.fileCode
    }
    if (opts.parentCode !== undefined && opts.parentCode !== null) {
      postBody['parentCode'] = opts.parentCode
    }
    if (opts.fileName !== undefined && opts.fileName !== null) {
      postBody['fileName'] = opts.fileName
    }
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      postBody['flowCode'] = opts.flowCode
    }
    if (opts.relativePath !== undefined && opts.relativePath !== null) {
      postBody['relativePath'] = opts.relativePath
    }
    if (opts.isUpload !== undefined && opts.isUpload !== null) {
      postBody['isUpload'] = opts.isUpload
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusWorkFlowDirIfChildrenPath with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusWorkFlowDirIfChildrenPath',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  校验文件是否存在
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} [opts.fileType] - 文件类型  optional
      * @param {boolean} [opts.isJarManagement] - 是否spark-jar的管理模块,spark-jar操作hdfs通过字段区分  optional
      * @param {string} [opts.fileCode] - 文件Code  optional
      * @param {string} [opts.parentCode] - 父节点 Code  optional
      * @param {string} [opts.fileName] - 文件名称  optional
      * @param {string} opts.flowCode - 任务流Code
      * @param {string} [opts.relativePath] - 文件夹上传的时候文件的相对路径属性  optional
      * @param {integer} [opts.isUpload] - 是否上传完成 0 上传取消 1 上传完成  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultBoolean uranusResultBoolean
      */

  uranusWorkFlowDirFileExists (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusWorkFlowDirFileExists"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusWorkFlowDirFileExists"
      )
    }
    if (opts.flowCode === undefined || opts.flowCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.flowCode' when calling uranusWorkFlowDirFileExists"
      )
    }

    let postBody = {}
    if (opts.fileType !== undefined && opts.fileType !== null) {
      postBody['fileType'] = opts.fileType
    }
    if (opts.isJarManagement !== undefined && opts.isJarManagement !== null) {
      postBody['isJarManagement'] = opts.isJarManagement
    }
    if (opts.fileCode !== undefined && opts.fileCode !== null) {
      postBody['fileCode'] = opts.fileCode
    }
    if (opts.parentCode !== undefined && opts.parentCode !== null) {
      postBody['parentCode'] = opts.parentCode
    }
    if (opts.fileName !== undefined && opts.fileName !== null) {
      postBody['fileName'] = opts.fileName
    }
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      postBody['flowCode'] = opts.flowCode
    }
    if (opts.relativePath !== undefined && opts.relativePath !== null) {
      postBody['relativePath'] = opts.relativePath
    }
    if (opts.isUpload !== undefined && opts.isUpload !== null) {
      postBody['isUpload'] = opts.isUpload
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusWorkFlowDirFileExists with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusWorkFlowDirFileExists',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除文件
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} [opts.fileType] - 文件类型  optional
      * @param {boolean} [opts.isJarManagement] - 是否spark-jar的管理模块,spark-jar操作hdfs通过字段区分  optional
      * @param {string} [opts.fileCode] - 文件Code  optional
      * @param {string} [opts.parentCode] - 父节点 Code  optional
      * @param {string} [opts.fileName] - 文件名称  optional
      * @param {string} opts.flowCode - 任务流Code
      * @param {string} [opts.relativePath] - 文件夹上传的时候文件的相对路径属性  optional
      * @param {integer} [opts.isUpload] - 是否上传完成 0 上传取消 1 上传完成  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusWorkFlowDirFileDelete (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusWorkFlowDirFileDelete"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusWorkFlowDirFileDelete"
      )
    }
    if (opts.flowCode === undefined || opts.flowCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.flowCode' when calling uranusWorkFlowDirFileDelete"
      )
    }

    let postBody = {}
    if (opts.fileType !== undefined && opts.fileType !== null) {
      postBody['fileType'] = opts.fileType
    }
    if (opts.isJarManagement !== undefined && opts.isJarManagement !== null) {
      postBody['isJarManagement'] = opts.isJarManagement
    }
    if (opts.fileCode !== undefined && opts.fileCode !== null) {
      postBody['fileCode'] = opts.fileCode
    }
    if (opts.parentCode !== undefined && opts.parentCode !== null) {
      postBody['parentCode'] = opts.parentCode
    }
    if (opts.fileName !== undefined && opts.fileName !== null) {
      postBody['fileName'] = opts.fileName
    }
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      postBody['flowCode'] = opts.flowCode
    }
    if (opts.relativePath !== undefined && opts.relativePath !== null) {
      postBody['relativePath'] = opts.relativePath
    }
    if (opts.isUpload !== undefined && opts.isUpload !== null) {
      postBody['isUpload'] = opts.isUpload
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusWorkFlowDirFileDelete with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusWorkFlowDirFileDelete',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除文件夹
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} [opts.fileType] - 文件类型  optional
      * @param {boolean} [opts.isJarManagement] - 是否spark-jar的管理模块,spark-jar操作hdfs通过字段区分  optional
      * @param {string} [opts.fileCode] - 文件Code  optional
      * @param {string} [opts.parentCode] - 父节点 Code  optional
      * @param {string} [opts.fileName] - 文件名称  optional
      * @param {string} opts.flowCode - 任务流Code
      * @param {string} [opts.relativePath] - 文件夹上传的时候文件的相对路径属性  optional
      * @param {integer} [opts.isUpload] - 是否上传完成 0 上传取消 1 上传完成  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusWorkFlowDirDelete (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusWorkFlowDirDelete"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusWorkFlowDirDelete"
      )
    }
    if (opts.flowCode === undefined || opts.flowCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.flowCode' when calling uranusWorkFlowDirDelete"
      )
    }

    let postBody = {}
    if (opts.fileType !== undefined && opts.fileType !== null) {
      postBody['fileType'] = opts.fileType
    }
    if (opts.isJarManagement !== undefined && opts.isJarManagement !== null) {
      postBody['isJarManagement'] = opts.isJarManagement
    }
    if (opts.fileCode !== undefined && opts.fileCode !== null) {
      postBody['fileCode'] = opts.fileCode
    }
    if (opts.parentCode !== undefined && opts.parentCode !== null) {
      postBody['parentCode'] = opts.parentCode
    }
    if (opts.fileName !== undefined && opts.fileName !== null) {
      postBody['fileName'] = opts.fileName
    }
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      postBody['flowCode'] = opts.flowCode
    }
    if (opts.relativePath !== undefined && opts.relativePath !== null) {
      postBody['relativePath'] = opts.relativePath
    }
    if (opts.isUpload !== undefined && opts.isUpload !== null) {
      postBody['isUpload'] = opts.isUpload
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusWorkFlowDirDelete with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusWorkFlowDirDelete',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  创建文件夹
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} [opts.fileType] - 文件类型  optional
      * @param {boolean} [opts.isJarManagement] - 是否spark-jar的管理模块,spark-jar操作hdfs通过字段区分  optional
      * @param {string} [opts.fileCode] - 文件Code  optional
      * @param {string} [opts.parentCode] - 父节点 Code  optional
      * @param {string} [opts.fileName] - 文件名称  optional
      * @param {string} opts.flowCode - 任务流Code
      * @param {string} [opts.relativePath] - 文件夹上传的时候文件的相对路径属性  optional
      * @param {integer} [opts.isUpload] - 是否上传完成 0 上传取消 1 上传完成  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultRes uranusResultRes
      */

  uranusWorkFlowDirCreate (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusWorkFlowDirCreate"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusWorkFlowDirCreate"
      )
    }
    if (opts.flowCode === undefined || opts.flowCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.flowCode' when calling uranusWorkFlowDirCreate"
      )
    }

    let postBody = {}
    if (opts.fileType !== undefined && opts.fileType !== null) {
      postBody['fileType'] = opts.fileType
    }
    if (opts.isJarManagement !== undefined && opts.isJarManagement !== null) {
      postBody['isJarManagement'] = opts.isJarManagement
    }
    if (opts.fileCode !== undefined && opts.fileCode !== null) {
      postBody['fileCode'] = opts.fileCode
    }
    if (opts.parentCode !== undefined && opts.parentCode !== null) {
      postBody['parentCode'] = opts.parentCode
    }
    if (opts.fileName !== undefined && opts.fileName !== null) {
      postBody['fileName'] = opts.fileName
    }
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      postBody['flowCode'] = opts.flowCode
    }
    if (opts.relativePath !== undefined && opts.relativePath !== null) {
      postBody['relativePath'] = opts.relativePath
    }
    if (opts.isUpload !== undefined && opts.isUpload !== null) {
      postBody['isUpload'] = opts.isUpload
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusWorkFlowDirCreate with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusWorkFlowDirCreate',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  分片上传初始化
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {integer} [opts.fileType] - 文件类型  optional
      * @param {boolean} [opts.isJarManagement] - 是否spark-jar的管理模块,spark-jar操作hdfs通过字段区分  optional
      * @param {string} [opts.fileCode] - 文件Code  optional
      * @param {string} [opts.parentCode] - 父节点 Code  optional
      * @param {string} [opts.fileName] - 文件名称  optional
      * @param {string} opts.flowCode - 任务流Code
      * @param {string} [opts.relativePath] - 文件夹上传的时候文件的相对路径属性  optional
      * @param {integer} [opts.isUpload] - 是否上传完成 0 上传取消 1 上传完成  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultUploaderInitRes uranusResultUploaderInitRes
      */

  uranusWorkFlowInitUpload (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusWorkFlowInitUpload"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusWorkFlowInitUpload"
      )
    }
    if (opts.flowCode === undefined || opts.flowCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.flowCode' when calling uranusWorkFlowInitUpload"
      )
    }

    let postBody = {}
    if (opts.fileType !== undefined && opts.fileType !== null) {
      postBody['fileType'] = opts.fileType
    }
    if (opts.isJarManagement !== undefined && opts.isJarManagement !== null) {
      postBody['isJarManagement'] = opts.isJarManagement
    }
    if (opts.fileCode !== undefined && opts.fileCode !== null) {
      postBody['fileCode'] = opts.fileCode
    }
    if (opts.parentCode !== undefined && opts.parentCode !== null) {
      postBody['parentCode'] = opts.parentCode
    }
    if (opts.fileName !== undefined && opts.fileName !== null) {
      postBody['fileName'] = opts.fileName
    }
    if (opts.flowCode !== undefined && opts.flowCode !== null) {
      postBody['flowCode'] = opts.flowCode
    }
    if (opts.relativePath !== undefined && opts.relativePath !== null) {
      postBody['relativePath'] = opts.relativePath
    }
    if (opts.isUpload !== undefined && opts.isUpload !== null) {
      postBody['isUpload'] = opts.isUpload
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusWorkFlowInitUpload with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusWorkFlowInitUpload',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  工作空间删除
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.companyCode - companyCode
      * @param {string} opts.workSpaceCode - workSpaceCode
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param uranusResultBoolean uranusResultBoolean
      */

  uranusWorkSpaceDown (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  uranusWorkSpaceDown"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling uranusWorkSpaceDown"
      )
    }
    if (opts.companyCode === undefined || opts.companyCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.companyCode' when calling uranusWorkSpaceDown"
      )
    }
    if (opts.workSpaceCode === undefined || opts.workSpaceCode === null) {
      throw new Error(
        "Missing the required parameter 'opts.workSpaceCode' when calling uranusWorkSpaceDown"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      queryParams['companyCode'] = opts.companyCode
    }
    if (opts.workSpaceCode !== undefined && opts.workSpaceCode !== null) {
      queryParams['workSpaceCode'] = opts.workSpaceCode
    }

    let pathParams = {
      regionId: regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call uranusWorkSpaceDown with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/uranusWorkSpaceDown',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  创建工作空间
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} [opts.userPin]   optional
      * @param {string} [opts.workspaceId]   optional
      * @param {string} [opts.workspaceName]   optional
      * @param {array} [opts.manager]   optional
      * @param {string} [opts.workspaceDescription]   optional
      * @param {string} [opts.workspaceModel]   optional
      * @param {string} [opts.engineType]   optional
      * @param {array} [opts.calculateResourceCode]   optional
      * @param {array} [opts.integrationResourceCode]   optional
      * @param {boolean} [opts.needBundleProject]   optional
      * @param {bundleProjectReq} [opts.bundleDevProjectReq]   optional
      * @param {bundleProjectReq} [opts.bundleProdProjectReq]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  workspaceCreate (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceCreate"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceCreate"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceCreate"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceCreate"
      )
    }

    let postBody = {}
    if (opts.userPin !== undefined && opts.userPin !== null) {
      postBody['userPin'] = opts.userPin
    }
    if (opts.workspaceId !== undefined && opts.workspaceId !== null) {
      postBody['workspaceId'] = opts.workspaceId
    }
    if (opts.workspaceName !== undefined && opts.workspaceName !== null) {
      postBody['workspaceName'] = opts.workspaceName
    }
    if (opts.manager !== undefined && opts.manager !== null) {
      postBody['manager'] = opts.manager
    }
    if (
      opts.workspaceDescription !== undefined &&
      opts.workspaceDescription !== null
    ) {
      postBody['workspaceDescription'] = opts.workspaceDescription
    }
    if (opts.workspaceModel !== undefined && opts.workspaceModel !== null) {
      postBody['workspaceModel'] = opts.workspaceModel
    }
    if (opts.engineType !== undefined && opts.engineType !== null) {
      postBody['engineType'] = opts.engineType
    }
    if (
      opts.calculateResourceCode !== undefined &&
      opts.calculateResourceCode !== null
    ) {
      postBody['calculateResourceCode'] = opts.calculateResourceCode
    }
    if (
      opts.integrationResourceCode !== undefined &&
      opts.integrationResourceCode !== null
    ) {
      postBody['integrationResourceCode'] = opts.integrationResourceCode
    }
    if (
      opts.needBundleProject !== undefined &&
      opts.needBundleProject !== null
    ) {
      postBody['needBundleProject'] = opts.needBundleProject
    }
    if (
      opts.bundleDevProjectReq !== undefined &&
      opts.bundleDevProjectReq !== null
    ) {
      postBody['bundleDevProjectReq'] = opts.bundleDevProjectReq
    }
    if (
      opts.bundleProdProjectReq !== undefined &&
      opts.bundleProdProjectReq !== null
    ) {
      postBody['bundleProdProjectReq'] = opts.bundleProdProjectReq
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceCreate with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceCreate',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  编辑工作空间
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.id]   optional
      * @param {string} [opts.workspaceName]   optional
      * @param {string} [opts.workspaceDescription]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  workspaceSaveInfo (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceSaveInfo"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceSaveInfo"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceSaveInfo"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceSaveInfo"
      )
    }

    let postBody = {}
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }
    if (opts.workspaceName !== undefined && opts.workspaceName !== null) {
      postBody['workspaceName'] = opts.workspaceName
    }
    if (
      opts.workspaceDescription !== undefined &&
      opts.workspaceDescription !== null
    ) {
      postBody['workspaceDescription'] = opts.workspaceDescription
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceSaveInfo with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceSaveInfo',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取工作空间基本信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.id]   optional
      * @param {string} [opts.workspaceCode]   optional
      * @param {string} [opts.projectCode]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param workspaceInfoResp result
      */

  workspaceGetInfo (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceGetInfo"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceGetInfo"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceGetInfo"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceGetInfo"
      )
    }

    let postBody = {}
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.projectCode !== undefined && opts.projectCode !== null) {
      postBody['projectCode'] = opts.projectCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceGetInfo with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceGetInfo',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取工作空间的资源组列表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageNum]   optional
      * @param {integer} [opts.pageSize]   optional
      * @param {integer} [opts.id]   optional
      * @param {string} [opts.workspaceCode]   optional
      * @param {string} [opts.resourceName]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param pageInfoResourceResp result
      */

  workspaceGetResources (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceGetResources"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceGetResources"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceGetResources"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceGetResources"
      )
    }

    let postBody = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.resourceName !== undefined && opts.resourceName !== null) {
      postBody['resourceName'] = opts.resourceName
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceGetResources with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceGetResources',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  工作空间绑定云仓项目
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} [opts.workspaceCode] - 工作空间code  optional
      * @param {string} [opts.engineType] - 引擎类型  optional
      * @param {bundleProjectReq} [opts.bundleDevProjectReq]   optional
      * @param {bundleProjectReq} [opts.bundleProdProjectReq]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  workspaceBundleProject (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceBundleProject"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceBundleProject"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceBundleProject"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceBundleProject"
      )
    }

    let postBody = {}
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.engineType !== undefined && opts.engineType !== null) {
      postBody['engineType'] = opts.engineType
    }
    if (
      opts.bundleDevProjectReq !== undefined &&
      opts.bundleDevProjectReq !== null
    ) {
      postBody['bundleDevProjectReq'] = opts.bundleDevProjectReq
    }
    if (
      opts.bundleProdProjectReq !== undefined &&
      opts.bundleProdProjectReq !== null
    ) {
      postBody['bundleProdProjectReq'] = opts.bundleProdProjectReq
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceBundleProject with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceBundleProject',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  工作空间解绑云仓项目
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.id]   optional
      * @param {string} [opts.workspaceCode]   optional
      * @param {string} [opts.projectCode]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  workspaceUnbundleProject (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceUnbundleProject"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceUnbundleProject"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceUnbundleProject"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceUnbundleProject"
      )
    }

    let postBody = {}
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.projectCode !== undefined && opts.projectCode !== null) {
      postBody['projectCode'] = opts.projectCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceUnbundleProject with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceUnbundleProject',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取工作空间列表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} [opts.workspaceCode] - 工作空间code  optional
      * @param {string} [opts.userPin]   optional
      * @param {array} [opts.calculateResourceCode]   optional
      * @param {array} [opts.integrationResourceCode]   optional
      * @param {boolean} [opts.bundleResource]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  workspaceBundleOrUnBundleResource (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceBundleOrUnBundleResource"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceBundleOrUnBundleResource"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceBundleOrUnBundleResource"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceBundleOrUnBundleResource"
      )
    }

    let postBody = {}
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.userPin !== undefined && opts.userPin !== null) {
      postBody['userPin'] = opts.userPin
    }
    if (
      opts.calculateResourceCode !== undefined &&
      opts.calculateResourceCode !== null
    ) {
      postBody['calculateResourceCode'] = opts.calculateResourceCode
    }
    if (
      opts.integrationResourceCode !== undefined &&
      opts.integrationResourceCode !== null
    ) {
      postBody['integrationResourceCode'] = opts.integrationResourceCode
    }
    if (opts.bundleResource !== undefined && opts.bundleResource !== null) {
      postBody['bundleResource'] = opts.bundleResource
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceBundleOrUnBundleResource with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceBundleOrUnBundleResource',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取工作空间列表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageNum]   optional
      * @param {integer} [opts.pageSize]   optional
      * @param {string} [opts.workspaceName]   optional
      * @param {string} [opts.workspaceId]   optional
      * @param {string} [opts.manager]   optional
      * @param {boolean} [opts.imProjectManager]   optional
      * @param {boolean} [opts.imInProject]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param pageInfoWorkspaceListResp result
      */

  workspaceGetList (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceGetList"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceGetList"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceGetList"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceGetList"
      )
    }

    let postBody = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.workspaceName !== undefined && opts.workspaceName !== null) {
      postBody['workspaceName'] = opts.workspaceName
    }
    if (opts.workspaceId !== undefined && opts.workspaceId !== null) {
      postBody['workspaceId'] = opts.workspaceId
    }
    if (opts.manager !== undefined && opts.manager !== null) {
      postBody['manager'] = opts.manager
    }
    if (opts.imProjectManager !== undefined && opts.imProjectManager !== null) {
      postBody['imProjectManager'] = opts.imProjectManager
    }
    if (opts.imInProject !== undefined && opts.imInProject !== null) {
      postBody['imInProject'] = opts.imInProject
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceGetList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceGetList',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除工作空间
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.id]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  workspaceDelete (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceDelete"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceDelete"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceDelete"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceDelete"
      )
    }

    let postBody = {}
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceDelete with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceDelete',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取工作空间绑定的云仓项目
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.id]   optional
      * @param {string} [opts.workspaceCode]   optional
      * @param {string} [opts.projectCode]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param projectResp result
      */

  workspaceGetProject (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceGetProject"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceGetProject"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceGetProject"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceGetProject"
      )
    }

    let postBody = {}
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.projectCode !== undefined && opts.projectCode !== null) {
      postBody['projectCode'] = opts.projectCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceGetProject with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceGetProject',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取云仓项目被绑定的工作空间
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.id]   optional
      * @param {string} [opts.workspaceCode]   optional
      * @param {string} [opts.projectCode]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param workspaceListResp result
      */

  workspaceGetProjectBundle (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceGetProjectBundle"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceGetProjectBundle"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceGetProjectBundle"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceGetProjectBundle"
      )
    }

    let postBody = {}
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.projectCode !== undefined && opts.projectCode !== null) {
      postBody['projectCode'] = opts.projectCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceGetProjectBundle with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceGetProjectBundle',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  工作空间开通接口
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} [opts.region]   optional
      * @param {string} [opts.az]   optional
      * @param {ownerIntegrationResource} [opts.ownerIntegrationResource]   optional
      * @param {string} [opts.payPlan]   optional
      * @param {string} [opts.billingVersion]   optional
      * @param {string} [opts.billingModel]   optional
      * @param {boolean} [opts.autoRenewal]   optional
      * @param {integer} [opts.purchaseDuration]   optional
      * @param {createProjectResourceParam} [opts.projectResourceReq]   optional
      * @param {string} [opts.returnUrl]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param integer buyId  购买ID
      */

  workspaceCreatProduct (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceCreatProduct"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceCreatProduct"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceCreatProduct"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceCreatProduct"
      )
    }

    let postBody = {}
    if (opts.region !== undefined && opts.region !== null) {
      postBody['region'] = opts.region
    }
    if (opts.az !== undefined && opts.az !== null) {
      postBody['az'] = opts.az
    }
    if (
      opts.ownerIntegrationResource !== undefined &&
      opts.ownerIntegrationResource !== null
    ) {
      postBody['ownerIntegrationResource'] = opts.ownerIntegrationResource
    }
    if (opts.payPlan !== undefined && opts.payPlan !== null) {
      postBody['payPlan'] = opts.payPlan
    }
    if (opts.billingVersion !== undefined && opts.billingVersion !== null) {
      postBody['billingVersion'] = opts.billingVersion
    }
    if (opts.billingModel !== undefined && opts.billingModel !== null) {
      postBody['billingModel'] = opts.billingModel
    }
    if (opts.autoRenewal !== undefined && opts.autoRenewal !== null) {
      postBody['autoRenewal'] = opts.autoRenewal
    }
    if (opts.purchaseDuration !== undefined && opts.purchaseDuration !== null) {
      postBody['purchaseDuration'] = opts.purchaseDuration
    }
    if (
      opts.projectResourceReq !== undefined &&
      opts.projectResourceReq !== null
    ) {
      postBody['projectResourceReq'] = opts.projectResourceReq
    }
    if (opts.returnUrl !== undefined && opts.returnUrl !== null) {
      postBody['returnUrl'] = opts.returnUrl
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceCreatProduct with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceCreatProduct',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  判断工作空间是否开通过工作空间产品接口
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  workspaceHadCreatWsProduct (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceHadCreatWsProduct"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceHadCreatWsProduct"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceHadCreatWsProduct"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceHadCreatWsProduct"
      )
    }

    let postBody = {}

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceHadCreatWsProduct with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceHadCreatWsProduct',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  同步工作空间开通信息接口
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} [opts.region]   optional
      * @param {string} [opts.billingVersion]   optional
      * @param {string} [opts.billingModel]   optional
      * @param {string} [opts.az]   optional
      * @param {string} [opts.account]   optional
      * @param {string} [opts.companyId]   optional
      * @param {string} [opts.payPlan]   optional
      * @param {boolean} [opts.autoRenewal]   optional
      * @param {integer} [opts.purchaseDuration]   optional
      * @param {orderUniqueKey} [opts.orderUniqueKey]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  workspaceSyncWsProductOrder (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceSyncWsProductOrder"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceSyncWsProductOrder"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceSyncWsProductOrder"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceSyncWsProductOrder"
      )
    }

    let postBody = {}
    if (opts.region !== undefined && opts.region !== null) {
      postBody['region'] = opts.region
    }
    if (opts.billingVersion !== undefined && opts.billingVersion !== null) {
      postBody['billingVersion'] = opts.billingVersion
    }
    if (opts.billingModel !== undefined && opts.billingModel !== null) {
      postBody['billingModel'] = opts.billingModel
    }
    if (opts.az !== undefined && opts.az !== null) {
      postBody['az'] = opts.az
    }
    if (opts.account !== undefined && opts.account !== null) {
      postBody['account'] = opts.account
    }
    if (opts.companyId !== undefined && opts.companyId !== null) {
      postBody['companyId'] = opts.companyId
    }
    if (opts.payPlan !== undefined && opts.payPlan !== null) {
      postBody['payPlan'] = opts.payPlan
    }
    if (opts.autoRenewal !== undefined && opts.autoRenewal !== null) {
      postBody['autoRenewal'] = opts.autoRenewal
    }
    if (opts.purchaseDuration !== undefined && opts.purchaseDuration !== null) {
      postBody['purchaseDuration'] = opts.purchaseDuration
    }
    if (opts.orderUniqueKey !== undefined && opts.orderUniqueKey !== null) {
      postBody['orderUniqueKey'] = opts.orderUniqueKey
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceSyncWsProductOrder with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceSyncWsProductOrder',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  同步工作空间续费消息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} [opts.region]   optional
      * @param {string} [opts.billingVersion]   optional
      * @param {string} [opts.billingModel]   optional
      * @param {string} [opts.az]   optional
      * @param {string} [opts.account]   optional
      * @param {string} [opts.companyId]   optional
      * @param {string} [opts.payPlan]   optional
      * @param {boolean} [opts.autoRenewal]   optional
      * @param {integer} [opts.purchaseDuration]   optional
      * @param {orderUniqueKey} [opts.orderUniqueKey]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  workspaceSyncRecharge (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceSyncRecharge"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceSyncRecharge"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceSyncRecharge"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceSyncRecharge"
      )
    }

    let postBody = {}
    if (opts.region !== undefined && opts.region !== null) {
      postBody['region'] = opts.region
    }
    if (opts.billingVersion !== undefined && opts.billingVersion !== null) {
      postBody['billingVersion'] = opts.billingVersion
    }
    if (opts.billingModel !== undefined && opts.billingModel !== null) {
      postBody['billingModel'] = opts.billingModel
    }
    if (opts.az !== undefined && opts.az !== null) {
      postBody['az'] = opts.az
    }
    if (opts.account !== undefined && opts.account !== null) {
      postBody['account'] = opts.account
    }
    if (opts.companyId !== undefined && opts.companyId !== null) {
      postBody['companyId'] = opts.companyId
    }
    if (opts.payPlan !== undefined && opts.payPlan !== null) {
      postBody['payPlan'] = opts.payPlan
    }
    if (opts.autoRenewal !== undefined && opts.autoRenewal !== null) {
      postBody['autoRenewal'] = opts.autoRenewal
    }
    if (opts.purchaseDuration !== undefined && opts.purchaseDuration !== null) {
      postBody['purchaseDuration'] = opts.purchaseDuration
    }
    if (opts.orderUniqueKey !== undefined && opts.orderUniqueKey !== null) {
      postBody['orderUniqueKey'] = opts.orderUniqueKey
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceSyncRecharge with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceSyncRecharge',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  同步工作空间续费消息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} [opts.companyCode]   optional
      * @param {string} [opts.account] - 主账户pin  optional
      * @param {string} [opts.handleStatus] - 类型:过期停服 或 过期删除  optional
      * @param {string} [opts.region] - 地区  optional
      * @param {string} [opts.sourceId]   optional
      * @param {string} [opts.resourceId]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  workspaceStopExpireOrDelete (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceStopExpireOrDelete"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceStopExpireOrDelete"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceStopExpireOrDelete"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceStopExpireOrDelete"
      )
    }

    let postBody = {}
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      postBody['companyCode'] = opts.companyCode
    }
    if (opts.account !== undefined && opts.account !== null) {
      postBody['account'] = opts.account
    }
    if (opts.handleStatus !== undefined && opts.handleStatus !== null) {
      postBody['handleStatus'] = opts.handleStatus
    }
    if (opts.region !== undefined && opts.region !== null) {
      postBody['region'] = opts.region
    }
    if (opts.sourceId !== undefined && opts.sourceId !== null) {
      postBody['sourceId'] = opts.sourceId
    }
    if (opts.resourceId !== undefined && opts.resourceId !== null) {
      postBody['resourceId'] = opts.resourceId
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceStopExpireOrDelete with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceStopExpireOrDelete',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  判断当前租户的产品是否已过期
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  workspaceExpiredInfo (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceExpiredInfo"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceExpiredInfo"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceExpiredInfo"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceExpiredInfo"
      )
    }

    let postBody = {}

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceExpiredInfo with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceExpiredInfo',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取工作空间的成员列表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageNum]   optional
      * @param {integer} [opts.pageSize]   optional
      * @param {integer} [opts.id]   optional
      * @param {string} [opts.userName]   optional
      * @param {string} [opts.nickName]   optional
      * @param {string} [opts.userPin]   optional
      * @param {string} [opts.workspaceCode]   optional
      * @param {string} [opts.companyCode]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param pageInfoWorkspaceUserResp result
      */

  workspaceGetMembers (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceGetMembers"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceGetMembers"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceGetMembers"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceGetMembers"
      )
    }

    let postBody = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }
    if (opts.userName !== undefined && opts.userName !== null) {
      postBody['userName'] = opts.userName
    }
    if (opts.nickName !== undefined && opts.nickName !== null) {
      postBody['nickName'] = opts.nickName
    }
    if (opts.userPin !== undefined && opts.userPin !== null) {
      postBody['userPin'] = opts.userPin
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      postBody['companyCode'] = opts.companyCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceGetMembers with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceGetMembers',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取可添加的成员列表
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageNum]   optional
      * @param {integer} [opts.pageSize]   optional
      * @param {integer} [opts.id]   optional
      * @param {string} [opts.userName]   optional
      * @param {string} [opts.nickName]   optional
      * @param {string} [opts.userPin]   optional
      * @param {string} [opts.workspaceCode]   optional
      * @param {string} [opts.companyCode]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param pageInfoUcUsersResp result  用户名称列表
      */

  workspaceGetUcUsers (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceGetUcUsers"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceGetUcUsers"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceGetUcUsers"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceGetUcUsers"
      )
    }

    let postBody = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }
    if (opts.userName !== undefined && opts.userName !== null) {
      postBody['userName'] = opts.userName
    }
    if (opts.nickName !== undefined && opts.nickName !== null) {
      postBody['nickName'] = opts.nickName
    }
    if (opts.userPin !== undefined && opts.userPin !== null) {
      postBody['userPin'] = opts.userPin
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      postBody['companyCode'] = opts.companyCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceGetUcUsers with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceGetUcUsers',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加工作空间成员
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.workspaceId]   optional
      * @param {array} [opts.userPinList]   optional
      * @param {array} [opts.roleCodeList]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  workspaceAddMember (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceAddMember"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceAddMember"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceAddMember"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceAddMember"
      )
    }

    let postBody = {}
    if (opts.workspaceId !== undefined && opts.workspaceId !== null) {
      postBody['workspaceId'] = opts.workspaceId
    }
    if (opts.userPinList !== undefined && opts.userPinList !== null) {
      postBody['userPinList'] = opts.userPinList
    }
    if (opts.roleCodeList !== undefined && opts.roleCodeList !== null) {
      postBody['roleCodeList'] = opts.roleCodeList
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceAddMember with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceAddMember',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取当前登录用户的所有角色
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param workspaceUserRoleResp result
      */

  workspaceGetUserRoles (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceGetUserRoles"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceGetUserRoles"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceGetUserRoles"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceGetUserRoles"
      )
    }

    let postBody = {}

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceGetUserRoles with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceGetUserRoles',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  更改用户角色
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.workspaceId]   optional
      * @param {array} [opts.updateRoleReq]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  workspaceUpdateUserRole (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceUpdateUserRole"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceUpdateUserRole"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceUpdateUserRole"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceUpdateUserRole"
      )
    }

    let postBody = {}
    if (opts.workspaceId !== undefined && opts.workspaceId !== null) {
      postBody['workspaceId'] = opts.workspaceId
    }
    if (opts.updateRoleReq !== undefined && opts.updateRoleReq !== null) {
      postBody['updateRoleReq'] = opts.updateRoleReq
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceUpdateUserRole with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceUpdateUserRole',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除工作空间成员
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {array} [opts.userPinList] - 用户pin列表  optional
      * @param {integer} [opts.workspaceId]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  workspaceDeleteMember (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceDeleteMember"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceDeleteMember"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceDeleteMember"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceDeleteMember"
      )
    }

    let postBody = {}
    if (opts.userPinList !== undefined && opts.userPinList !== null) {
      postBody['userPinList'] = opts.userPinList
    }
    if (opts.workspaceId !== undefined && opts.workspaceId !== null) {
      postBody['workspaceId'] = opts.workspaceId
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceDeleteMember with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceDeleteMember',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据用户名称模糊查询当前工作空间下的用户
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageNum]   optional
      * @param {integer} [opts.pageSize]   optional
      * @param {integer} [opts.id]   optional
      * @param {string} [opts.userName]   optional
      * @param {string} [opts.nickName]   optional
      * @param {string} [opts.userPin]   optional
      * @param {string} [opts.workspaceCode]   optional
      * @param {string} [opts.companyCode]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param ucUsersResp result
      */

  workspacegetUcUserByUserName (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspacegetUcUserByUserName"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspacegetUcUserByUserName"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspacegetUcUserByUserName"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspacegetUcUserByUserName"
      )
    }

    let postBody = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }
    if (opts.userName !== undefined && opts.userName !== null) {
      postBody['userName'] = opts.userName
    }
    if (opts.nickName !== undefined && opts.nickName !== null) {
      postBody['nickName'] = opts.nickName
    }
    if (opts.userPin !== undefined && opts.userPin !== null) {
      postBody['userPin'] = opts.userPin
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      postBody['companyCode'] = opts.companyCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspacegetUcUserByUserName with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspacegetUcUserByUserName',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  判断用户pin和工作空间code校验是否有工作空间权限
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageNum]   optional
      * @param {integer} [opts.pageSize]   optional
      * @param {integer} [opts.id]   optional
      * @param {string} [opts.userName]   optional
      * @param {string} [opts.nickName]   optional
      * @param {string} [opts.userPin]   optional
      * @param {string} [opts.workspaceCode]   optional
      * @param {string} [opts.companyCode]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param boolean result  是否有权限
      */

  workspaceVerifyAuth (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceVerifyAuth"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceVerifyAuth"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceVerifyAuth"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceVerifyAuth"
      )
    }

    let postBody = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }
    if (opts.userName !== undefined && opts.userName !== null) {
      postBody['userName'] = opts.userName
    }
    if (opts.nickName !== undefined && opts.nickName !== null) {
      postBody['nickName'] = opts.nickName
    }
    if (opts.userPin !== undefined && opts.userPin !== null) {
      postBody['userPin'] = opts.userPin
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      postBody['companyCode'] = opts.companyCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceVerifyAuth with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceVerifyAuth',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据用户pin查询uc用户信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageNum]   optional
      * @param {integer} [opts.pageSize]   optional
      * @param {integer} [opts.id]   optional
      * @param {string} [opts.userName]   optional
      * @param {string} [opts.nickName]   optional
      * @param {string} [opts.userPin]   optional
      * @param {string} [opts.workspaceCode]   optional
      * @param {string} [opts.companyCode]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param ucUsersResp result
      */

  workspaceGetUcUserByPin (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceGetUcUserByPin"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceGetUcUserByPin"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceGetUcUserByPin"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceGetUcUserByPin"
      )
    }

    let postBody = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }
    if (opts.userName !== undefined && opts.userName !== null) {
      postBody['userName'] = opts.userName
    }
    if (opts.nickName !== undefined && opts.nickName !== null) {
      postBody['nickName'] = opts.nickName
    }
    if (opts.userPin !== undefined && opts.userPin !== null) {
      postBody['userPin'] = opts.userPin
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      postBody['companyCode'] = opts.companyCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceGetUcUserByPin with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceGetUcUserByPin',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  校验当前用户是否是该工作空间的管理员
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageNum]   optional
      * @param {integer} [opts.pageSize]   optional
      * @param {integer} [opts.id]   optional
      * @param {string} [opts.userName]   optional
      * @param {string} [opts.nickName]   optional
      * @param {string} [opts.userPin]   optional
      * @param {string} [opts.workspaceCode]   optional
      * @param {string} [opts.companyCode]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param boolean result  是否有权限
      */

  workspaceVerifyUserIsManager (
    opts,
    regionId = this.config.regionId,
    callback
  ) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceVerifyUserIsManager"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceVerifyUserIsManager"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceVerifyUserIsManager"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceVerifyUserIsManager"
      )
    }

    let postBody = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }
    if (opts.userName !== undefined && opts.userName !== null) {
      postBody['userName'] = opts.userName
    }
    if (opts.nickName !== undefined && opts.nickName !== null) {
      postBody['nickName'] = opts.nickName
    }
    if (opts.userPin !== undefined && opts.userPin !== null) {
      postBody['userPin'] = opts.userPin
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      postBody['companyCode'] = opts.companyCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceVerifyUserIsManager with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceVerifyUserIsManager',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取当前登录用户信息
      * @param {Object} opts - parameters
      * @param {string} opts.appName - 应用名称
      * @param {string} opts.regionId
      * @param {string} opts.appName - 请求应用名
      * @param {integer} [opts.pageNum]   optional
      * @param {integer} [opts.pageSize]   optional
      * @param {integer} [opts.id]   optional
      * @param {string} [opts.userName]   optional
      * @param {string} [opts.nickName]   optional
      * @param {string} [opts.userPin]   optional
      * @param {string} [opts.workspaceCode]   optional
      * @param {string} [opts.companyCode]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string code  返回编码
      * @param string message  返回信息
      * @param ucUsersResp result
      */

  workspaceGetCurrentUserInfo (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  workspaceGetCurrentUserInfo"
      )
    }

    opts = opts || {}

    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceGetCurrentUserInfo"
      )
    }
    if (opts.regionId === undefined || opts.regionId === null) {
      throw new Error(
        "Missing the required parameter 'opts.regionId' when calling workspaceGetCurrentUserInfo"
      )
    }
    if (opts.appName === undefined || opts.appName === null) {
      throw new Error(
        "Missing the required parameter 'opts.appName' when calling workspaceGetCurrentUserInfo"
      )
    }

    let postBody = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      postBody['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      postBody['pageSize'] = opts.pageSize
    }
    if (opts.id !== undefined && opts.id !== null) {
      postBody['id'] = opts.id
    }
    if (opts.userName !== undefined && opts.userName !== null) {
      postBody['userName'] = opts.userName
    }
    if (opts.nickName !== undefined && opts.nickName !== null) {
      postBody['nickName'] = opts.nickName
    }
    if (opts.userPin !== undefined && opts.userPin !== null) {
      postBody['userPin'] = opts.userPin
    }
    if (opts.workspaceCode !== undefined && opts.workspaceCode !== null) {
      postBody['workspaceCode'] = opts.workspaceCode
    }
    if (opts.companyCode !== undefined && opts.companyCode !== null) {
      postBody['companyCode'] = opts.companyCode
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      appName: opts.appName,
      regionId: opts.regionId,
      appName: opts.appName
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  shenhaiplatform/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call workspaceGetCurrentUserInfo with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/apps/{appName}/workspaceGetCurrentUserInfo',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }
}
module.exports = SHENHAIPLATFORM
