/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Zone Settings
 * A Zone setting changes how the Zone works in relation to caching, security, or other features of JDC StarShield
 *
 * OpenAPI spec version: v1
 * Contact:
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

require('../../../lib/node_loader')
var JDCloud = require('../../../lib/core')
var Service = JDCloud.Service
var serviceId = 'starshield'
Service._services[serviceId] = true

/**
 * starshield service.
 * @version 0.0.1
 */

class STARSHIELD extends Service {
  constructor (options = {}) {
    options._defaultEndpoint = {}
    options._defaultEndpoint.protocol =
      options._defaultEndpoint.protocol || 'https'
    options._defaultEndpoint.host =
      options._defaultEndpoint.host || 'starshield.jdcloud-api.com'
    options.basePath = '/v1' // 默认要设为空""
    super(serviceId, options)
  }

  /**
      *  对于给定域，列出所有激活的证书包
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} [opts.status] - 包括所有状态的证书包，而不仅仅是激活状态的证书包。  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param certificatePack dataList
      */

  listCertificatePacks (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling listCertificatePacks"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.status !== undefined && opts.status !== null) {
      queryParams['status'] = opts.status
    }

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call listCertificatePacks with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/ssl$$certificate_packs',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  对于给定域，删除高级证书包
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} opts.identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param string data
      */

  deleteAdvancedCertificateManagerCertificatePack (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling deleteAdvancedCertificateManagerCertificatePack"
      )
    }
    if (opts.identifier === undefined || opts.identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.identifier' when calling deleteAdvancedCertificateManagerCertificatePack"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier,
      identifier: opts.identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteAdvancedCertificateManagerCertificatePack with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/ssl$$certificate_packs/{identifier}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  列出、搜索和筛选所有自定义SSL证书。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} [opts.status] - 域的自定义SSL的状态  optional
      * @param {number} [opts.page] - 分页结果的页码  optional
      * @param {number} [opts.per_page] - 每页的域数  optional
      * @param {string} [opts.match] - 是否匹配所有搜索要求或至少一个（任何）  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param customSSL dataList
      */

  listSSLConfigurations (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling listSSLConfigurations"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.status !== undefined && opts.status !== null) {
      queryParams['status'] = opts.status
    }
    if (opts.page !== undefined && opts.page !== null) {
      queryParams['page'] = opts.page
    }
    if (opts.per_page !== undefined && opts.per_page !== null) {
      queryParams['per_page'] = opts.per_page
    }
    if (opts.match !== undefined && opts.match !== null) {
      queryParams['match'] = opts.match
    }

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call listSSLConfigurations with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/custom_certificates',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  从域中删除SSL证书。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} opts.identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param string data
      */

  deleteSSLConfiguration (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling deleteSSLConfiguration"
      )
    }
    if (opts.identifier === undefined || opts.identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.identifier' when calling deleteSSLConfiguration"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier,
      identifier: opts.identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteSSLConfiguration with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/custom_certificates/{identifier}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  套餐实例列表信息查询
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageSize] - 页容量，默认10, 范围（1-100）  optional
      * @param {integer} [opts.pageNumber] - 页序号，默认1，不能小于1  optional
      * @param {string} [opts.instanceName] - 实例名称  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param describeInstancesRes dataList
      * @param integer currentCount  当前页记录数量
      * @param integer totalCount  总记录数量
      * @param integer totalPage  总页数
      */

  describeInstances (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  describeInstances"
      )
    }

    opts = opts || {}

    let postBody = null
    let queryParams = {}
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
      queryParams['pageNumber'] = opts.pageNumber
    }
    if (opts.instanceName !== undefined && opts.instanceName !== null) {
      queryParams['instanceName'] = opts.instanceName
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeInstances with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/instances',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  创建套餐实例
      * @param {Object} opts - parameters
      * @param {} [opts.chargeMode] - 计费模式（CONFIG、FLOW、MONTHLY、ONCE）  optional
      * @param {} [opts.packType] - 套餐类型（FREE、BASIC、PROFESSIONAL、ENTERPRISE、ULTIMATE、SMB_BASIC、SMB_BUSINESS）  optional
      * @param {} [opts.zonePackNum] - 域名增量包数量  optional
      * @param {} [opts.duration] - 计费时长  optional
      * @param {} [opts.durationUnit] - 计费时长单位（MONTH、YEAR）  optional
      * @param {} [opts.autoRenewStatus] - 自动续费状态(OPEN-&gt;开通自动续费 CLOSE-&gt;关闭自动续费)  optional
      * @param {} [opts.instanceName] - 实例名称  optional
      * @param {} [opts.memo] - 备注  optional
      * @param {} [opts.returnUrl] - 支付成功返回路径  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string buyId  购买ID
      */

  createInstance (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  createInstance"
      )
    }

    opts = opts || {}

    let postBody = {}
    if (opts.chargeMode !== undefined && opts.chargeMode !== null) {
      postBody['chargeMode'] = opts.chargeMode
    }
    if (opts.packType !== undefined && opts.packType !== null) {
      postBody['packType'] = opts.packType
    }
    if (opts.zonePackNum !== undefined && opts.zonePackNum !== null) {
      postBody['zonePackNum'] = opts.zonePackNum
    }
    if (opts.duration !== undefined && opts.duration !== null) {
      postBody['duration'] = opts.duration
    }
    if (opts.durationUnit !== undefined && opts.durationUnit !== null) {
      postBody['durationUnit'] = opts.durationUnit
    }
    if (opts.autoRenewStatus !== undefined && opts.autoRenewStatus !== null) {
      postBody['autoRenewStatus'] = opts.autoRenewStatus
    }
    if (opts.instanceName !== undefined && opts.instanceName !== null) {
      postBody['instanceName'] = opts.instanceName
    }
    if (opts.memo !== undefined && opts.memo !== null) {
      postBody['memo'] = opts.memo
    }
    if (opts.returnUrl !== undefined && opts.returnUrl !== null) {
      postBody['returnUrl'] = opts.returnUrl
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call createInstance with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/instances',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  升级套餐实例
      * @param {Object} opts - parameters
      * @param {string} opts.instanceId - 实例ID
      * @param {} [opts.packType] - 套餐类型  optional
      * @param {} [opts.zonePackNum] - 域名增量包数量  optional
      * @param {} [opts.returnUrl] - 支付成功后返回到该路径  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string buyId  购买ID
      */

  modifyInstance (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  modifyInstance"
      )
    }

    opts = opts || {}

    if (opts.instanceId === undefined || opts.instanceId === null) {
      throw new Error(
        "Missing the required parameter 'opts.instanceId' when calling modifyInstance"
      )
    }

    let postBody = {}
    if (opts.packType !== undefined && opts.packType !== null) {
      postBody['packType'] = opts.packType
    }
    if (opts.zonePackNum !== undefined && opts.zonePackNum !== null) {
      postBody['zonePackNum'] = opts.zonePackNum
    }
    if (opts.returnUrl !== undefined && opts.returnUrl !== null) {
      postBody['returnUrl'] = opts.returnUrl
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      instanceId: opts.instanceId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call modifyInstance with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/instance/{instanceId}',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  套餐实例续费回调查询
      * @param {Object} opts - parameters
      * @param {string} opts.resourceList - 资源列表
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param object data
      */

  selectDetailList (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  selectDetailList"
      )
    }

    opts = opts || {}

    if (opts.resourceList === undefined || opts.resourceList === null) {
      throw new Error(
        "Missing the required parameter 'opts.resourceList' when calling selectDetailList"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.resourceList !== undefined && opts.resourceList !== null) {
      queryParams['resourceList'] = opts.resourceList
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call selectDetailList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/instances:selectDetailList',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  检查实例名称
      * @param {Object} opts - parameters
      * @param {string} opts.instanceName - 实例名称
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      */

  checkInstancesName (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  checkInstancesName"
      )
    }

    opts = opts || {}

    if (opts.instanceName === undefined || opts.instanceName === null) {
      throw new Error(
        "Missing the required parameter 'opts.instanceName' when calling checkInstancesName"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.instanceName !== undefined && opts.instanceName !== null) {
      queryParams['instanceName'] = opts.instanceName
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call checkInstancesName with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/instances:checkName',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  套餐包列表查询
      * @param {Object} opts - parameters
      * @param {integer} [opts.pageSize] - 页容量，默认10, 范围（1-100）  optional
      * @param {integer} [opts.pageNumber] - 页序号，默认1，不能小于1  optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param describePackRes dataList
      * @param integer currentCount  当前页记录数量
      * @param integer totalCount  总记录数量
      * @param integer totalPage  总页数
      */

  describePackages (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  describePackages"
      )
    }

    opts = opts || {}

    let postBody = null
    let queryParams = {}
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    if (opts.pageNumber !== undefined && opts.pageNumber !== null) {
      queryParams['pageNumber'] = opts.pageNumber
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describePackages with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/packages',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  套餐包详情查询
      * @param {Object} opts - parameters
      * @param {integer} opts.packType - 套餐类型
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param describePackRes describePackRes
      */

  describePackage (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  describePackage"
      )
    }

    opts = opts || {}

    if (opts.packType === undefined || opts.packType === null) {
      throw new Error(
        "Missing the required parameter 'opts.packType' when calling describePackage"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: regionId,
      packType: opts.packType
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describePackage with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/regions/{regionId}/packages/{packType}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取域的通用SSL证书设置
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param universalSSLSetting data
      */

  universalSSLSettingsDetails (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling universalSSLSettingsDetails"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call universalSSLSettingsDetails with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/ssl$$universal$$settings',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  搜索、列出和排序包中包含的规则组
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} opts.package_identifier
      * @param {string} [opts.name] - 防火墙规则组名称  optional
      * @param {string} [opts.mode] - 此组中包含的规则是否可配置/可用  optional
      * @param {number} [opts.rules_count] - 此组中包含多少条规则  optional
      * @param {number} [opts.page] - 分页结果的页码  optional
      * @param {number} [opts.per_page] - 每页的组数  optional
      * @param {string} [opts.order] - 按字段对组进行排序  optional
      * @param {string} [opts.direction] - asc-升序；desc-降序  optional
      * @param {string} [opts.match] - 是否匹配所有搜索要求或至少一个（任何）  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param wAFRuleGroup dataList
      */

  listRuleGroups (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling listRuleGroups"
      )
    }
    if (
      opts.package_identifier === undefined ||
      opts.package_identifier === null
    ) {
      throw new Error(
        "Missing the required parameter 'opts.package_identifier' when calling listRuleGroups"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.name !== undefined && opts.name !== null) {
      queryParams['name'] = opts.name
    }
    if (opts.mode !== undefined && opts.mode !== null) {
      queryParams['mode'] = opts.mode
    }
    if (opts.rules_count !== undefined && opts.rules_count !== null) {
      queryParams['rules_count'] = opts.rules_count
    }
    if (opts.page !== undefined && opts.page !== null) {
      queryParams['page'] = opts.page
    }
    if (opts.per_page !== undefined && opts.per_page !== null) {
      queryParams['per_page'] = opts.per_page
    }
    if (opts.order !== undefined && opts.order !== null) {
      queryParams['order'] = opts.order
    }
    if (opts.direction !== undefined && opts.direction !== null) {
      queryParams['direction'] = opts.direction
    }
    if (opts.match !== undefined && opts.match !== null) {
      queryParams['match'] = opts.match
    }

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier,
      package_identifier: opts.package_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call listRuleGroups with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/firewall$$waf$$packages/{package_identifier}/groups',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取单个规则组
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} opts.package_identifier
      * @param {string} opts.identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param wAFRuleGroup data
      */

  ruleGroupDetails (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling ruleGroupDetails"
      )
    }
    if (
      opts.package_identifier === undefined ||
      opts.package_identifier === null
    ) {
      throw new Error(
        "Missing the required parameter 'opts.package_identifier' when calling ruleGroupDetails"
      )
    }
    if (opts.identifier === undefined || opts.identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.identifier' when calling ruleGroupDetails"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier,
      package_identifier: opts.package_identifier,
      identifier: opts.identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call ruleGroupDetails with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/firewall$$waf$$packages/{package_identifier}/groups/{identifier}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  检索域的防火墙包
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} [opts.name] - Name of the firewall package  optional
      * @param {number} [opts.page] - Page number of paginated results  optional
      * @param {number} [opts.per_page] - 每页的包数  optional
      * @param {string} [opts.order] - 按字段对包排序  optional
      * @param {string} [opts.direction] - asc - 升序；desc - 降序  optional
      * @param {string} [opts.match] - 是否匹配所有搜索要求或至少一个（任何）  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param wAFRulePackage dataList
      */

  listFirewallPackages (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling listFirewallPackages"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.name !== undefined && opts.name !== null) {
      queryParams['name'] = opts.name
    }
    if (opts.page !== undefined && opts.page !== null) {
      queryParams['page'] = opts.page
    }
    if (opts.per_page !== undefined && opts.per_page !== null) {
      queryParams['per_page'] = opts.per_page
    }
    if (opts.order !== undefined && opts.order !== null) {
      queryParams['order'] = opts.order
    }
    if (opts.direction !== undefined && opts.direction !== null) {
      queryParams['direction'] = opts.direction
    }
    if (opts.match !== undefined && opts.match !== null) {
      queryParams['match'] = opts.match
    }

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call listFirewallPackages with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/firewall$$waf$$packages',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取有关单个防火墙包的信息
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} opts.identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param wAFRulePackage data
      */

  firewallPackageDetails (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling firewallPackageDetails"
      )
    }
    if (opts.identifier === undefined || opts.identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.identifier' when calling firewallPackageDetails"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier,
      identifier: opts.identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call firewallPackageDetails with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/firewall$$waf$$packages/{identifier}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  包内的搜索、排序和筛选规则
      * @param {Object} opts - parameters
      * @param {string} opts.zone_id
      * @param {string} opts.package_id
      * @param {string} [opts.mode] - 已将规则覆盖到的设置  optional
      * @param {string} [opts.priority] - 在相关组中执行单个规则的顺序  optional
      * @param {string} [opts.match] - 是否匹配所有搜索要求或至少一个（任何）  optional
      * @param {string} [opts.order] - 按指定字段排序  optional
      * @param {number} [opts.page] - 分页结果的页码  optional
      * @param {number} [opts.per_page] - 每页的规则数  optional
      * @param {string} [opts.group_id] - WAF组标识符标签  optional
      * @param {string} [opts.description] - 规则的公开说明  optional
      * @param {string} [opts.direction] - asc-升序；desc-降序  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param wAFRule dataList
      */

  listRules (opts, callback) {
    opts = opts || {}

    if (opts.zone_id === undefined || opts.zone_id === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_id' when calling listRules"
      )
    }
    if (opts.package_id === undefined || opts.package_id === null) {
      throw new Error(
        "Missing the required parameter 'opts.package_id' when calling listRules"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.mode !== undefined && opts.mode !== null) {
      queryParams['mode'] = opts.mode
    }
    if (opts.priority !== undefined && opts.priority !== null) {
      queryParams['priority'] = opts.priority
    }
    if (opts.match !== undefined && opts.match !== null) {
      queryParams['match'] = opts.match
    }
    if (opts.order !== undefined && opts.order !== null) {
      queryParams['order'] = opts.order
    }
    if (opts.page !== undefined && opts.page !== null) {
      queryParams['page'] = opts.page
    }
    if (opts.per_page !== undefined && opts.per_page !== null) {
      queryParams['per_page'] = opts.per_page
    }
    if (opts.group_id !== undefined && opts.group_id !== null) {
      queryParams['group_id'] = opts.group_id
    }
    if (opts.description !== undefined && opts.description !== null) {
      queryParams['description'] = opts.description
    }
    if (opts.direction !== undefined && opts.direction !== null) {
      queryParams['direction'] = opts.direction
    }

    let pathParams = {
      regionId: 'jdcloud',
      zone_id: opts.zone_id,
      package_id: opts.package_id
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call listRules with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_id}/firewall$$waf$$packages/{package_id}/rules',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  列出、搜索、排序和筛选您的域
      * @param {Object} opts - parameters
      * @param {string} [opts.match] - 是否匹配所有搜索要求或至少一个（任何）  optional
      * @param {string} [opts.name] - 域名  optional
      * @param {string} [opts.__account__name] - 帐户名  optional
      * @param {string} [opts.order] - 按字段对域进行排序  optional
      * @param {number} [opts.page] - 分页结果的页码  optional
      * @param {number} [opts.per_page] - 每页的域数  optional
      * @param {string} [opts.status] - 域的状态  optional
      * @param {string} [opts.__account__id] - 帐户标识符标签  optional
      * @param {string} [opts.direction] - asc - 升序；desc - 降序  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param zone dataList
      */

  listZones (opts, callback) {
    opts = opts || {}

    let postBody = null
    let queryParams = {}
    if (opts.match !== undefined && opts.match !== null) {
      queryParams['match'] = opts.match
    }
    if (opts.name !== undefined && opts.name !== null) {
      queryParams['name'] = opts.name
    }
    if (opts.__account__name !== undefined && opts.__account__name !== null) {
      queryParams['__account__name'] = opts.__account__name
    }
    if (opts.order !== undefined && opts.order !== null) {
      queryParams['order'] = opts.order
    }
    if (opts.page !== undefined && opts.page !== null) {
      queryParams['page'] = opts.page
    }
    if (opts.per_page !== undefined && opts.per_page !== null) {
      queryParams['per_page'] = opts.per_page
    }
    if (opts.status !== undefined && opts.status !== null) {
      queryParams['status'] = opts.status
    }
    if (opts.__account__id !== undefined && opts.__account__id !== null) {
      queryParams['__account__id'] = opts.__account__id
    }
    if (opts.direction !== undefined && opts.direction !== null) {
      queryParams['direction'] = opts.direction
    }

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call listZones with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除存在的域名
      * @param {Object} opts - parameters
      * @param {string} opts.identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param zone data
      */

  deleteZone (opts, callback) {
    opts = opts || {}

    if (opts.identifier === undefined || opts.identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.identifier' when calling deleteZone"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      identifier: opts.identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteZone with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{identifier}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  从星盾的缓存中删除所有文件
      * @param {Object} opts - parameters
      * @param {string} opts.identifier
      * @param {} opts.purge_everything - 指示星盾缓存中的所有资源都应该删除的标志。
注意，执行此操作后，可能会对源服务器负载产生显著影响。

      * @param {string} callback - callback
      @return {Object} result
      * @param zone data
      */

  purgeAllFiles (opts, callback) {
    opts = opts || {}

    if (opts.identifier === undefined || opts.identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.identifier' when calling purgeAllFiles"
      )
    }
    if (opts.purge_everything === undefined || opts.purge_everything === null) {
      throw new Error(
        "Missing the required parameter 'opts.purge_everything' when calling purgeAllFiles"
      )
    }

    let postBody = {}
    if (opts.purge_everything !== undefined && opts.purge_everything !== null) {
      postBody['purge_everything'] = opts.purge_everything
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      identifier: opts.identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call purgeAllFiles with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{identifier}/purge_cache__purgeAllFiles',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  通过指定URL，从星盾的缓存中细化删除一个或多个文件。
要清除带有自定义缓存key的文件，请包括用于计算缓存key的报头。
例如要清除缓存key中含有${geo}或${devicetype}的文件，请包括CF-Device-Type或CF-IPCountry报头。
注意：当包含源报头时，请确保包括scheme协议和hostname主机名。如果是默认端口，可以省略端口号（http为80，https为443），否则必须包含端口号。

      * @param {Object} opts - parameters
      * @param {string} opts.identifier
      * @param {} [opts.files] - 应从缓存中删除的URL数组  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param zone data
      */

  purgeFilesByURL (opts, callback) {
    opts = opts || {}

    if (opts.identifier === undefined || opts.identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.identifier' when calling purgeFilesByURL"
      )
    }

    let postBody = {}
    if (opts.files !== undefined && opts.files !== null) {
      postBody['files'] = opts.files
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      identifier: opts.identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call purgeFilesByURL with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{identifier}/purge_cache__purgeFilesByURL',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  通过指定主机、关联的缓存标记或前缀，从星盾的缓存中精确删除一个或多个文件。
注意，缓存标记、主机和前缀清除每24小时的速率限制为30000次清除API调用。一次API调用最多可以清除30个标记、主机或前缀。
对于需要以更大容量进行清除的客户，可以提高此速率限制。

      * @param {Object} opts - parameters
      * @param {string} opts.identifier
      * @param {} [opts.tags] - 如何资产携带Cache-Tag头，并且它的值与提供的值之一匹配的话，该资产将从星盾缓存中清除  optional
      * @param {} [opts.hosts] - 如果资产的URL中的host与提供的值之一匹配的话，该资产将从星盾缓存中清除  optional
      * @param {} [opts.prefixes] - URL上与前缀匹配的任何资产都将从星盾缓存中清除。
例如, a.com/b 意味着 a.com/b/c/d.png 会被删除，而 a.com/bc.png 不会被删除。前缀a.com/b和a.com/b/c是冗余的。
  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param zone data
      */

  purgeFilesByCache_TagsAndHostOrPrefix (opts, callback) {
    opts = opts || {}

    if (opts.identifier === undefined || opts.identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.identifier' when calling purgeFilesByCache_TagsAndHostOrPrefix"
      )
    }

    let postBody = {}
    if (opts.tags !== undefined && opts.tags !== null) {
      postBody['tags'] = opts.tags
    }
    if (opts.hosts !== undefined && opts.hosts !== null) {
      postBody['hosts'] = opts.hosts
    }
    if (opts.prefixes !== undefined && opts.prefixes !== null) {
      postBody['prefixes'] = opts.prefixes
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      identifier: opts.identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call purgeFilesByCache_TagsAndHostOrPrefix with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{identifier}/purge_cache__purgeFilesByCache_TagsAndHostOrPrefix',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  批量更新域的设置
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.items] - 一或多个域配置对象。必须包含ID和值。  optional
      * @param {string} callback - callback
      @return {Object} result
      */

  editZoneSettingsInfo (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling editZoneSettingsInfo"
      )
    }

    let postBody = {}
    if (opts.items !== undefined && opts.items !== null) {
      postBody['items'] = opts.items
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call editZoneSettingsInfo with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  对您的网站进行高级保护，防止分布式拒绝服务（DDoS）攻击。这是一个不可编辑的值。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param advancedDDoSProtection data
      */

  getAdvancedDDOSSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getAdvancedDDOSSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getAdvancedDDOSSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$advanced_ddos',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取当前Always Online的配置。当Always Online开启时，在你的源站离线期间，星盾会提供已缓存过的页面。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param alwaysOnlineMode data
      */

  getAlwaysOnlineSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getAlwaysOnlineSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getAlwaysOnlineSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$always_online',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  当开启时，在你的源站离线期间，星盾会提供已缓存过的页面。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param alwaysOnlineMode data
      */

  changeAlwaysOnlineSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeAlwaysOnlineSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeAlwaysOnlineSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$always_online',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  对所有使用&quot;http&quot;的URL的请求，用301重定向到相应的 &quot;https&quot; URL。如果你只想对一个子集的请求进行重定向，可以考虑创建一个&quot;Always use HTTPS&quot;的页面规则。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param zoneSetting data
      */

  getAlwaysUseHTTPSSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getAlwaysUseHTTPSSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getAlwaysUseHTTPSSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$always_use_https',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  对所有使用&quot;http&quot;的URL的请求，用301重定向到相应的 &quot;https&quot; URL。如果你只想对一个子集的请求进行重定向，可以考虑创建一个&quot;Always use HTTPS&quot;的页面规则。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param zoneSetting data
      */

  changeAlwaysUseHTTPSSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeAlwaysUseHTTPSSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeAlwaysUseHTTPSSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$always_use_https',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  为该域启用自动HTTPS重写功能。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param zoneSetting data
      */

  getAutomaticHTTPSRewritesSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getAutomaticHTTPSRewritesSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getAutomaticHTTPSRewritesSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$automatic_https_rewrites',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  为该域启用自动HTTPS重写功能。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param zoneSetting data
      */

  changeAutomaticHTTPSRewritesSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeAutomaticHTTPSRewritesSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeAutomaticHTTPSRewritesSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$automatic_https_rewrites',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  浏览器缓存TTL（以秒为单位）指定星盾缓存资源将在访问者的计算机上保留多长时间。星盾将遵守服务器指定的任何更长时间。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param browserCacheTTL data
      */

  getBrowserCacheTTLSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getBrowserCacheTTLSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getBrowserCacheTTLSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$browser_cache_ttl',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  浏览器缓存TTL（以秒为单位）指定星盾缓存资源将在访问者的计算机上保留多长时间。星盾将遵守服务器指定的任何更长时间。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - 该设置的有效值  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param browserCacheTTL data
      */

  changeBrowserCacheTTLSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeBrowserCacheTTLSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeBrowserCacheTTLSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$browser_cache_ttl',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  浏览器完整性检查与不良行为检查类似，寻找最常被垃圾邮件发送者滥用的常见HTTP头，并拒绝他们访问您的页面。它还会对没有用户代理或非标准用户代理（也是滥用机器人、爬虫或访客常用的）的访客提出挑战质询。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param browserCheck data
      */

  changeBrowserCheckSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeBrowserCheckSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeBrowserCheckSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$browser_check',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  缓存级别的功能是基于设置的级别。
basic设置将缓存大多数静态资源（即css、图片和JavaScript）。
simplified设置将在提供缓存的资源时忽略查询字符串。
aggressive设置将缓存所有的静态资源，包括有查询字符串的资源。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - 该设置的有效值  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param cloudflareCacheLevel data
      */

  changeCacheLevelSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeCacheLevelSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeCacheLevelSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$cache_level',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  指定访问者在成功完成一项挑战（如验证码）后允许访问您的网站多长时间。在TTL过期后，访问者将不得不完成新的挑战。我们建议设置为15-45分钟，并将尝试遵守任何超过45分钟的设置。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param challengePageTTL data
      */

  getChallengeTTLSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getChallengeTTLSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getChallengeTTLSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$challenge_ttl',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  指定访问者在成功完成一项挑战（如验证码）后允许访问您的网站多长时间。在TTL过期后，访问者将不得不完成新的挑战。我们建议设置为15-45分钟，并将尝试遵守任何超过45分钟的设置。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - 该设置的有效值  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param challengePageTTL data
      */

  changeChallengeTTLSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeChallengeTTLSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeChallengeTTLSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$challenge_ttl',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  如果你需要对你的网站进行修改，开发模式可以让你暂时进入网站的开发模式。这将绕过星盾的加速缓存，并降低您的网站速度。
但如果您正在对可缓存的内容（如图片、css 或 JavaScript）进行更改，并希望立即看到这些更改，这时就很有用。一旦进入，开发模式将持续3小时，然后自动切换关闭。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param developmentMode data
      */

  getDevelopmentModeSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getDevelopmentModeSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getDevelopmentModeSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$development_mode',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  如果你需要对你的网站进行修改，开发模式可以让你暂时进入网站的开发模式。这将绕过星盾的加速缓存，并降低您的网站速度。
但如果您正在对可缓存的内容（如图片、css 或 JavaScript）进行更改，并希望立即看到这些更改，这时就很有用。一旦进入，开发模式将持续3小时，然后自动切换关闭。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param developmentMode data
      */

  changeDevelopmentModeSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeDevelopmentModeSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeDevelopmentModeSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$development_mode',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  在你的网页上对电子邮件地址进行加密，以防止机器人入侵，同时保持它们对人类可见。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param emailObfuscation data
      */

  getEmailObfuscationSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getEmailObfuscationSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getEmailObfuscationSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$email_obfuscation',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  在你的网页上对电子邮件地址进行加密，以防止机器人入侵，同时保持它们对人类可见。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param emailObfuscation data
      */

  changeEmailObfuscationSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeEmailObfuscationSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeEmailObfuscationSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$email_obfuscation',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  启用后，热链路保护选项可确保其他网站无法通过建立使用您网站上托管的图像的页面来占用您的带宽。只要您的网站上的图像请求被星盾选中，我们就会检查以确保这不是其他网站在请求它们。
人们仍然能够从你的网页上下载和查看图像，但其他网站将无法窃取它们用于自己的网页。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param hotlinkProtection data
      */

  getHotlinkProtectionSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getHotlinkProtectionSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getHotlinkProtectionSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$hotlink_protection',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  启用后，热链路保护选项可确保其他网站无法通过建立使用您网站上托管的图像的页面来占用您的带宽。只要您的网站上的图像请求被星盾选中，我们就会检查以确保这不是其他网站在请求它们。
人们仍然能够从你的网页上下载和查看图像，但其他网站将无法窃取它们用于自己的网页。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param hotlinkProtection data
      */

  changeHotlinkProtectionSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeHotlinkProtectionSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeHotlinkProtectionSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$hotlink_protection',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  启用IP地理定位，让星盾对您网站的访问者进行地理定位，并将国家代码传递给您。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param iPGeolocation data
      */

  getIPGeolocationSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getIPGeolocationSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getIPGeolocationSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$ip_geolocation',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  启用IP地理定位，让星盾对您网站的访问者进行地理定位，并将国家代码传递给您。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param iPGeolocation data
      */

  changeIPGeolocationSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeIPGeolocationSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeIPGeolocationSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$ip_geolocation',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  在所有启用星盾的子域上启用 IPv6。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param iPv6 data
      */

  getIPv6Setting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getIPv6Setting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getIPv6Setting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$ipv6',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  在所有启用星盾的子域上启用 IPv6。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param iPv6 data
      */

  changeIPv6Setting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeIPv6Setting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeIPv6Setting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$ipv6',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取你的网站自动最小化资产的配置
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param auto_MinifyAssets data
      */

  getMinifySetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getMinifySetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getMinifySetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$minify',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  为你的网站自动最小化某些资产
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value]   optional
      * @param {string} callback - callback
      @return {Object} result
      * @param auto_MinifyAssets data
      */

  changeMinifySetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeMinifySetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeMinifySetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$minify',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  自动将移动设备上的访问者重定向到一个移动优化的子域上
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param mobileRedirect data
      */

  getMobileRedirectSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getMobileRedirectSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getMobileRedirectSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$mobile_redirect',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  自动将移动设备上的访问者重定向到一个移动优化的子域上
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value]   optional
      * @param {string} callback - callback
      @return {Object} result
      * @param mobileRedirect data
      */

  changeMobileRedirectSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeMobileRedirectSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeMobileRedirectSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$mobile_redirect',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  自动优化移动设备上网站访问者的图像加载
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param mirageImageOptimization data
      */

  getMirageSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getMirageSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getMirageSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$mirage',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  自动优化移动设备上网站访问者的图像加载
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param mirageImageOptimization data
      */

  changeMirageSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeMirageSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeMirageSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$mirage',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  星盾将代源服务器上任何 502、504 错误的客户错误页面，而不是显示默认的星盾错误页面。这不适用于 522 错误，并且仅限于企业级域。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param zoneSetting data
      */

  getEnableErrorPagesOnSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getEnableErrorPagesOnSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getEnableErrorPagesOnSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$origin_error_page_pass_thru',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  星盾将代理源服务器上任何 502、504 错误的客户错误页面，而不是显示默认的星盾错误页面。这不适用于 522 错误，并且仅限于企业级域。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param zoneSetting data
      */

  changeEnableErrorPagesOnSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeEnableErrorPagesOnSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeEnableErrorPagesOnSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$origin_error_page_pass_thru',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取当前域随机加密设置
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param zoneEnableOpportunisticEncryption data
      */

  getOpportunisticEncryptionSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getOpportunisticEncryptionSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getOpportunisticEncryptionSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$opportunistic_encryption',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  为当前域启用随机加密
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param zoneEnableOpportunisticEncryption data
      */

  changeOpportunisticEncryptionSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeOpportunisticEncryptionSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeOpportunisticEncryptionSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$opportunistic_encryption',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  剥离元数据并压缩你的图像，以加快页面加载时间。
Basic（无损），减少PNG、JPEG和GIF文件的大小 - 对视觉质量没有影响。
Basic+JPEG（有损），进一步减少JPEG文件的大小，以加快图像加载。
较大的JPEG文件被转换为渐进式图像，首先加载较低分辨率的图像，最后是较高的分辨率版本。
不建议用于高像素的摄影网站。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param polishImageOptimization data
      */

  getPolishSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getPolishSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getPolishSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$polish',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  剥离元数据并压缩你的图像，以加快页面加载时间。
Basic（无损），减少PNG、JPEG和GIF文件的大小 - 对视觉质量没有影响。
Basic+JPEG（有损），进一步减少JPEG文件的大小，以加快图像加载。
较大的JPEG文件被转换为渐进式图像，首先加载较低分辨率的图像，最后是较高的分辨率版本。
不建议用于高像素的摄影网站。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - 该设置的有效值  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param polishImageOptimization data
      */

  changePolishSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changePolishSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changePolishSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$polish',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  当请求图像的客户端支持WebP图像编解码器时。当WebP比原始图像格式具有性能优势时，星盾将提供WebP版本的图像。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param polishWebPConversion data
      */

  getWebPSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getWebPSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getWebPSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$webp',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  当请求图像的客户端支持WebP图像编解码器时。当WebP比原始图像格式具有性能优势时，星盾将提供WebP版本的图像。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param polishWebPConversion data
      */

  changeWebPSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeWebPSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeWebPSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$webp',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  当请求资产的客户端支持brotli压缩算法时，星盾将提供资产的brotli压缩版本。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param brotliCompression data
      */

  changeBrotliSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeBrotliSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeBrotliSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$brotli',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  星盾将预取包含在响应标头中的任何 URL。这只限于企业级域。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param zoneSetting data
      */

  getPrefetchPreloadSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getPrefetchPreloadSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getPrefetchPreloadSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$prefetch_preload',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  星盾将预取包含在响应标头中的任何 URL。这只限于企业级域。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param prefetchPreload data
      */

  changePrefetchPreloadSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changePrefetchPreloadSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changePrefetchPreloadSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$prefetch_preload',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  Privacy Pass是一个由Privacy Pass团队开发的浏览器扩展，旨在改善您的访客的浏览体验。启用Privacy Pass将减少显示给你的访客的验证码的数量。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param privacyPass data
      */

  getPrivacyPassSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getPrivacyPassSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getPrivacyPassSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$privacy_pass',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  Privacy Pass是一个由Privacy Pass团队开发的浏览器扩展，旨在改善您的访客的浏览体验。启用Privacy Pass将减少显示给你的访客的验证码的数量。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param privacyPass data
      */

  changePrivacyPassSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changePrivacyPassSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changePrivacyPassSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$privacy_pass',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  Rocket Loader是一个通用的异步JavaScript优化，它优先渲染你的内容同时异步加载你的网站的Javascript。
开启Rocket Loader将立即改善网页的渲染时间，有时以首次绘制时间（TTFP）以及window.onload时间（假设页面上有JavaScript）来衡量，这对你的搜索排名会产生积极影响。
当打开时，Rocket Loader将自动推迟加载你的HTML中引用的所有Javascript，而不需要配置。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param rocketLoader data
      */

  getRocketLoaderSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getRocketLoaderSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getRocketLoaderSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$rocket_loader',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  Rocket Loader是一个通用的异步JavaScript优化，它优先渲染你的内容同时异步加载你的网站的Javascript。
开启Rocket Loader将立即改善网页的渲染时间，有时以首次绘制时间（TTFP）以及window.onload时间（假设页面上有JavaScript）来衡量，这对你的搜索排名会产生积极影响。
当打开时，Rocket Loader将自动推迟加载你的HTML中引用的所有Javascript，而不需要配置。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param rocketLoader data
      */

  changeRocketLoaderSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeRocketLoaderSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeRocketLoaderSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$rocket_loader',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  星盾域的安全标头。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param securityHeader data
      */

  getSecurityHeaderHSTSSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getSecurityHeaderHSTSSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getSecurityHeaderHSTSSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$security_header',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  为你的网站选择适当的安全配置文件，这将自动调整每个安全设置。如果你选择定制一个单独的安全设置，该配置文件将成为自定义。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param securityLevel data
      */

  getSecurityLevelSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getSecurityLevelSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getSecurityLevelSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$security_level',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  为你的网站选择适当的安全配置文件，这将自动调整每个安全设置。如果你选择定制一个单独的安全设置，该配置文件将成为自定义。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - 该设置的有效值  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param securityLevel data
      */

  changeSecurityLevelSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeSecurityLevelSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeSecurityLevelSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$security_level',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  如果你的网站上有敏感的内容，你想让真正的访问者看到，但你想对可疑的访问者进行隐藏，你所要做的就是用星盾SSE标签来包装这些内容。
用下面的SSE标签包住任何你想不让可疑访客看到的内容，&lt;!--sse--&gt;&lt;!--/sse--&gt;。
例如，&lt;!--sse--&gt;不好的访问者不会看到我的电话号码，555-555-5555&lt;!--/sse--&gt;。注意，SSE只对HTML起作用。
如果你启用了HTML最小化功能，当你的HTML源代码通过星盾提供服务时，你不会看到SSE标签。
在这种情况下，SSE 仍将发挥作用，因为星盾的 HTML 缩减和 SSE 功能是在资源通过我们的网络传输给我们时即时发生的。当资源通过我们的网络移动到访问者的计算机上时，SSE 仍会发挥作用。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param serverSideExclude data
      */

  getServerSideExcludeSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getServerSideExcludeSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getServerSideExcludeSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$server_side_exclude',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  如果你的网站上有敏感的内容，你想让真正的访问者看到，但你想对可疑的访问者进行隐藏，你所要做的就是用星盾SSE标签来包装这些内容。
用下面的SSE标签包住任何你想不让可疑访客看到的内容，&lt;!--sse--&gt;&lt;!--/sse--&gt;。
例如，&lt;!--sse--&gt;不好的访问者不会看到我的电话号码，555-555-5555&lt;!--/sse--&gt;。注意，SSE只对HTML起作用。
如果你启用了HTML最小化功能，当你的HTML源代码通过星盾提供服务时，你不会看到SSE标签。
在这种情况下，SSE 仍将发挥作用，因为星盾的 HTML 缩减和 SSE 功能是在资源通过我们的网络传输给我们时即时发生的。当资源通过我们的网络移动到访问者的计算机上时，SSE 仍会发挥作用。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param serverSideExclude data
      */

  changeServerSideExcludeSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeServerSideExcludeSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeServerSideExcludeSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$server_side_exclude',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  星盾将把具有相同查询字符串的文件视为缓存中的同一个文件，而不管查询字符串的顺序如何。这只限于企业级域。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param zoneSetting data
      */

  getEnableQueryStringSortSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getEnableQueryStringSortSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getEnableQueryStringSortSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$sort_query_string_for_cache',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  星盾将把具有相同查询字符串的文件视为缓存中的同一个文件，而不管查询字符串的顺序如何。这只限于企业级域。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param zoneSetting data
      */

  changeEnableQueryStringSortSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeEnableQueryStringSortSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeEnableQueryStringSortSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$sort_query_string_for_cache',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  SSL对访问者的连接进行加密，并保护信用卡号码和其他进出网站的个人数据。
SSL最多需要5分钟才能完全激活。需要在星盾激活你的根域或www域。
Off，访客和星盾之间没有SSL，星盾和你的Web服务器之间也没有SSL（所有HTTP流量）。
Flexible, 访客和星盾之间的 SSL -- 访客在你的网站上看到 HTTPS，但星盾和你的 Web 服务器之间没有 SSL。您不需要在您的 Web 服务器上安装 SSL 证书，但您的访客仍会看到启用 HTTPS 的网站。
Full, 访客和星盾之间的 SSL -- 访客在你的网站上看到 HTTPS，以及星盾和你的 Web 服务器之间的 SSL。您至少需要有自己的 SSL 证书或自签名的证书。
Full (Strict), 访客和星盾之间的 SSL -- 访客在您的网站上看到 HTTPS，以及星盾和您的 Web 服务器之间的 SSL。你需要在你的网络服务器上安装一个有效的SSL证书。
这个证书必须由一个证书机构签署，有一个在未来的到期日，并为请求的域名（主机名）作出回应。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param sSL data
      */

  getSSLSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getSSLSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getSSLSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$ssl',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  SSL对访问者的连接进行加密，并保护信用卡号码和其他进出网站的个人数据。
SSL最多需要5分钟才能完全激活。需要在星盾激活你的根域或www域。
Off，访客和星盾之间没有SSL，星盾和你的Web服务器之间也没有SSL（所有HTTP流量）。
Flexible, 访客和星盾之间的 SSL -- 访客在你的网站上看到 HTTPS，但星盾和你的 Web 服务器之间没有 SSL。您不需要在您的 Web 服务器上安装 SSL 证书，但您的访客仍会看到启用 HTTPS 的网站。
Full, 访客和星盾之间的 SSL -- 访客在你的网站上看到 HTTPS，以及星盾和你的 Web 服务器之间的 SSL。您至少需要有自己的 SSL 证书或自签名的证书。
Full (Strict), 访客和星盾之间的 SSL -- 访客在您的网站上看到 HTTPS，以及星盾和您的 Web 服务器之间的 SSL。你需要在你的网络服务器上安装一个有效的SSL证书。
这个证书必须由一个证书机构签署，有一个在未来的到期日，并为请求的域名（主机名）作出回应。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - 该设置的有效值  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param sSL data
      */

  changeSSLSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeSSLSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeSSLSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$ssl',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取HTTPS请求允许使用的TLS协议的最低版本。例如，如果是TLS 1.1，那么TLS 1.0连接将被拒绝，而1.1、1.2和1.3（如果启用）将被允许。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param zoneSetting data
      */

  getMinimumTLSVersionSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getMinimumTLSVersionSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getMinimumTLSVersionSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$min_tls_version',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置HTTPS请求使用的TLS协议的最低版本。例如，如果选择TLS 1.1，那么TLS 1.0连接将被拒绝，而1.1、1.2和1.3（如果启用）将被允许。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - TLS协议版本  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param zoneSetting data
      */

  changeMinimumTLSVersionSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeMinimumTLSVersionSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeMinimumTLSVersionSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$min_tls_version',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  一个用于TLS终端的密码允许列表。这些密码必须是BoringSSL的格式。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param string dataList
      */

  getCiphersSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getCiphersSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getCiphersSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$ciphers',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  一个用于TLS终端的密码允许列表。这些密码必须是BoringSSL的格式。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - 该设置的值  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param string dataList
      */

  changeCiphersSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeCiphersSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeCiphersSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$ciphers',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  为该域启用加密TLS 1.3功能。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param zoneSetting data
      */

  getZoneEnableTLS1_3Setting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getZoneEnableTLS1_3Setting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getZoneEnableTLS1_3Setting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$tls_1_3',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  为该域启用加密TLS 1.3功能。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - 该设置的有效值  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param zoneSetting data
      */

  changeTLS1_3Setting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeTLS1_3Setting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeTLS1_3Setting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$tls_1_3',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  TLS 客户端授权要求星盾使用客户端证书连接到您的源服务器（Enterprise Only）。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param tLSClientAuthentication data
      */

  getTLSClientAuthSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getTLSClientAuthSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getTLSClientAuthSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$tls_client_auth',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  TLS 客户端授权要求星盾使用客户端证书连接到您的源服务器（Enterprise Only）。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param tLSClientAuthentication data
      */

  changeTLSClientAuthSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeTLSClientAuthSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeTLSClientAuthSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$tls_client_auth',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  允许客户继续在我们发送给源的头中使用真正的客户IP。这只限于企业级域。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param zoneSetting data
      */

  getTrueClientIPSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getTrueClientIPSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getTrueClientIPSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$true_client_ip_header',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  允许客户继续在我们发送给源的头中使用真正的客户IP。这只限于企业级域。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param zoneSetting data
      */

  changeTrueClientIPSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeTrueClientIPSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeTrueClientIPSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$true_client_ip_header',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  WAF检查对您网站的HTTP请求。它检查GET和POST请求，并应用规则来帮助从合法的网站访问者中过滤出非法流量。星盾 WAF 检查网站地址或 URL 以检测任何不正常的东西。
如果星盾 WAF确定了可疑的用户行为。那么 WAF 将用一个页面 &quot;挑战 &quot;网络访客，要求他们成功提交验证码以继续其行动。
如果挑战失败，行动将被停止。这意味着 星盾 的 WAF 将在任何被识别为非法的流量到达您的源网络服务器之前将其阻止。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param webApplicationFirewall data
      */

  getWebApplicationFirewallWAFSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getWebApplicationFirewallWAFSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getWebApplicationFirewallWAFSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$waf',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  WAF检查对您网站的HTTP请求。它检查GET和POST请求，并应用规则来帮助从合法的网站访问者中过滤出非法流量。星盾 WAF 检查网站地址或 URL 以检测任何不正常的东西。
如果星盾 WAF确定了可疑的用户行为。那么 WAF 将用一个页面 &quot;挑战 &quot;网络访客，要求他们成功提交验证码以继续其行动。
如果挑战失败，行动将被停止。这意味着 星盾 的 WAF 将在任何被识别为非法的流量到达您的源网络服务器之前将其阻止。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param webApplicationFirewall data
      */

  changeWebApplicationFirewallWAFSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeWebApplicationFirewallWAFSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeWebApplicationFirewallWAFSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$waf',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取HTTP2设置的状态
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param hTTP2Value data
      */

  getHTTP2Setting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getHTTP2Setting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getHTTP2Setting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$http2',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  开启/关闭HTTP2
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param hTTP2Value data
      */

  changeHTTP2Setting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeHTTP2Setting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeHTTP2Setting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$http2',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取HTTP3设置的状态
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param hTTP3Value data
      */

  getHTTP3Setting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getHTTP3Setting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getHTTP3Setting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$http3',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  开启/关闭HTTP3
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param hTTP3Value data
      */

  changeHTTP3Setting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeHTTP3Setting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeHTTP3Setting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$http3',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  Value of the 0-RTT setting
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param zero_RTTValue data
      */

  get0_RTTSessionResumptionSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling get0_RTTSessionResumptionSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call get0_RTTSessionResumptionSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$0rtt',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  开启/关闭 0-RTT
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param zero_RTTValue data
      */

  change0_RTTSessionResumptionSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling change0_RTTSessionResumptionSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call change0_RTTSessionResumptionSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$0rtt',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  获取Pseudo IPv4(IPv6到IPv4的转换服务)的设置
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param pseudoIPv4Value data
      */

  getPseudoIPv4Setting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getPseudoIPv4Setting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getPseudoIPv4Setting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$pseudo_ipv4',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  设置Pseudo IPv4(IPv6到IPv4的转换服务)
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - 该设置的有效值  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param pseudoIPv4Value data
      */

  changePseudoIPv4Setting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changePseudoIPv4Setting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changePseudoIPv4Setting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$pseudo_ipv4',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  WebSockets是客户端和源服务器之间持续的开放连接。在WebSockets连接中，客户端和源服务器可以来回传递数据，而不需要重新建立会话。
这使得在WebSockets连接中的数据交换非常快。WebSockets经常被用于实时应用，如即时聊天和游戏。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param webSockets data
      */

  getWebSocketsSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getWebSocketsSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getWebSocketsSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$websockets',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  WebSockets是客户端和源服务器之间持续的开放连接。在WebSockets连接中，客户端和源服务器可以来回传递数据，而不需要重新建立会话。
这使得在WebSockets连接中的数据交换非常快。WebSockets经常被用于实时应用，如即时聊天和游戏。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - on - 开启；off - 关闭  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param webSockets data
      */

  changeWebSocketsSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeWebSocketsSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeWebSocketsSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$websockets',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  图像调整为通过星盾的网络提供的图像提供按需调整、转换和优化。
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param imageResizing data
      */

  getImageResizingSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getImageResizingSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getImageResizingSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$image_resizing',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  HTTP/2边缘优化，优化了通过HTTP/2提供的资源交付，提高了页面加载性能。当与Worker结合使用时，它还支持对内容交付的精细控制。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {string} callback - callback
      @return {Object} result
      * @param hTTP2EdgePrioritization data
      */

  getHTTP2EdgePrioritizationSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling getHTTP2EdgePrioritizationSetting"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call getHTTP2EdgePrioritizationSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$h2_prioritization',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  HTTP/2边缘优化，优化了通过HTTP/2提供的资源交付，提高了页面加载性能。当与Worker结合使用时，它还支持对内容交付的精细控制。

      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value] - 该设置的有效值  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param hTTP2EdgePrioritization data
      */

  changeHTTP2EdgePrioritizationSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeHTTP2EdgePrioritizationSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeHTTP2EdgePrioritizationSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$h2_prioritization',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  变更上传文件的最大值
      * @param {Object} opts - parameters
      * @param {string} opts.zone_identifier
      * @param {} [opts.value]   optional
      * @param {string} callback - callback
      @return {Object} result
      * @param maxUpload data
      */

  changeMaxUploadSetting (opts, callback) {
    opts = opts || {}

    if (opts.zone_identifier === undefined || opts.zone_identifier === null) {
      throw new Error(
        "Missing the required parameter 'opts.zone_identifier' when calling changeMaxUploadSetting"
      )
    }

    let postBody = {}
    if (opts.value !== undefined && opts.value !== null) {
      postBody['value'] = opts.value
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      zone_identifier: opts.zone_identifier
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  starshield/0.0.1'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call changeMaxUploadSetting with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/zones/{zone_identifier}/settings$$max_upload',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }
}
module.exports = STARSHIELD
