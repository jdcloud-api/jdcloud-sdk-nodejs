/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * NameSpace相关 API
 * 流数据总线NameSpace相关信息接口
 *
 * OpenAPI spec version: v1
 * Contact:
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

require('../../../lib/node_loader')
var JDCloud = require('../../../lib/core')
var Service = JDCloud.Service
var serviceId = 'streamcomputer'
Service._services[serviceId] = true

/**
 * streamcomputer service.
 * @version 1.0.0
 */

JDCloud.STREAMCOMPUTER = class STREAMCOMPUTER extends Service {
  constructor (options = {}) {
    options._defaultEndpoint = {}
    options._defaultEndpoint.protocol =
      options._defaultEndpoint.protocol || 'https'
    options._defaultEndpoint.host =
      options._defaultEndpoint.host || 'streamcomputeapi.jdcloud.com'
    options.basePath = '/v1' // 默认要设为空""
    super(serviceId, options)
  }

  /**
      *  查询指定作业详情
      * @param {Object} opts - parameters
      * @param {integer} opts.jobId
      * @param {integer} opts.namespaceId
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jobStr jobStr
      */

  describeJob (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  describeJob"
      )
    }

    opts = opts || {}

    if (opts.jobId === undefined || opts.jobId === null) {
      throw new Error(
        "Missing the required parameter 'opts.jobId' when calling describeJob"
      )
    }
    if (opts.namespaceId === undefined || opts.namespaceId === null) {
      throw new Error(
        "Missing the required parameter 'opts.namespaceId' when calling describeJob"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.jobId !== undefined && opts.jobId !== null) {
      queryParams['jobId'] = opts.jobId
    }
    if (opts.namespaceId !== undefined && opts.namespaceId !== null) {
      queryParams['namespaceId'] = opts.namespaceId
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  streamcomputer/1.0.0'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call describeJob with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/job',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  添加或者更新job
      * @param {Object} opts - parameters
      * @param {jobStr} opts.jobStr - 创建作业的详情
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param okInfo okInfo  成功结果对象
      */

  addOrUpdateJob (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  addOrUpdateJob"
      )
    }

    opts = opts || {}

    if (opts.jobStr === undefined || opts.jobStr === null) {
      throw new Error(
        "Missing the required parameter 'opts.jobStr' when calling addOrUpdateJob"
      )
    }

    let postBody = {}
    if (opts.jobStr !== undefined && opts.jobStr !== null) {
      postBody['jobStr'] = opts.jobStr
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  streamcomputer/1.0.0'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call addOrUpdateJob with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/job',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除job
      * @param {Object} opts - parameters
      * @param {string} opts.namespaceId
      * @param {integer} opts.jobId
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string message  删除job返回信息
      * @param boolean status
      */

  deleteJob (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  deleteJob"
      )
    }

    opts = opts || {}

    if (opts.namespaceId === undefined || opts.namespaceId === null) {
      throw new Error(
        "Missing the required parameter 'opts.namespaceId' when calling deleteJob"
      )
    }
    if (opts.jobId === undefined || opts.jobId === null) {
      throw new Error(
        "Missing the required parameter 'opts.jobId' when calling deleteJob"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.namespaceId !== undefined && opts.namespaceId !== null) {
      queryParams['namespaceId'] = opts.namespaceId
    }
    if (opts.jobId !== undefined && opts.jobId !== null) {
      queryParams['jobId'] = opts.jobId
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  streamcomputer/1.0.0'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call deleteJob with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/job',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询指定应用下的所有job
      * @param {Object} opts - parameters
      * @param {string} opts.namespaceId
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param jobStr data
      */

  getJobList (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  getJobList"
      )
    }

    opts = opts || {}

    if (opts.namespaceId === undefined || opts.namespaceId === null) {
      throw new Error(
        "Missing the required parameter 'opts.namespaceId' when calling getJobList"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.namespaceId !== undefined && opts.namespaceId !== null) {
      queryParams['namespaceId'] = opts.namespaceId
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  streamcomputer/1.0.0'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call getJobList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/jobList',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  运行job
      * @param {Object} opts - parameters
      * @param {string} opts.namespaceId
      * @param {integer} opts.jobId
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string message  成功启动作业返回信息
      */

  startJob (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  startJob"
      )
    }

    opts = opts || {}

    if (opts.namespaceId === undefined || opts.namespaceId === null) {
      throw new Error(
        "Missing the required parameter 'opts.namespaceId' when calling startJob"
      )
    }
    if (opts.jobId === undefined || opts.jobId === null) {
      throw new Error(
        "Missing the required parameter 'opts.jobId' when calling startJob"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.namespaceId !== undefined && opts.namespaceId !== null) {
      queryParams['namespaceId'] = opts.namespaceId
    }
    if (opts.jobId !== undefined && opts.jobId !== null) {
      queryParams['jobId'] = opts.jobId
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  streamcomputer/1.0.0'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call startJob with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/job:start',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  停止作业运行job
      * @param {Object} opts - parameters
      * @param {string} opts.namespaceId
      * @param {integer} opts.jobId
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string message  成功启动作业返回信息
      */

  stopJob (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  stopJob"
      )
    }

    opts = opts || {}

    if (opts.namespaceId === undefined || opts.namespaceId === null) {
      throw new Error(
        "Missing the required parameter 'opts.namespaceId' when calling stopJob"
      )
    }
    if (opts.jobId === undefined || opts.jobId === null) {
      throw new Error(
        "Missing the required parameter 'opts.jobId' when calling stopJob"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.namespaceId !== undefined && opts.namespaceId !== null) {
      queryParams['namespaceId'] = opts.namespaceId
    }
    if (opts.jobId !== undefined && opts.jobId !== null) {
      queryParams['jobId'] = opts.jobId
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  streamcomputer/1.0.0'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call stopJob with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/job:stop',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询租户下的应用列表
      * @param {Object} opts - parameters
      * @param {string} [opts.keyword]   optional
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param namespace namespaces
      */

  queryNamespaces (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  queryNamespaces"
      )
    }

    opts = opts || {}

    let postBody = null
    let queryParams = {}
    if (opts.keyword !== undefined && opts.keyword !== null) {
      queryParams['keyword'] = opts.keyword
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  streamcomputer/1.0.0'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call queryNamespaces with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/namespaces',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询某个应用详情
      * @param {Object} opts - parameters
      * @param {integer} opts.namespaceId
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param namespace namespace  查询出的namespace对象
      */

  queryNamespaceDetail (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  queryNamespaceDetail"
      )
    }

    opts = opts || {}

    if (opts.namespaceId === undefined || opts.namespaceId === null) {
      throw new Error(
        "Missing the required parameter 'opts.namespaceId' when calling queryNamespaceDetail"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.namespaceId !== undefined && opts.namespaceId !== null) {
      queryParams['namespaceId'] = opts.namespaceId
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  streamcomputer/1.0.0'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call queryNamespaceDetail with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/namespaceDetail',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  创建namespace
      * @param {Object} opts - parameters
      * @param {namespace} opts.namespaceStr
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param boolean status  创建成功标志
      */

  createNamespace (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  createNamespace"
      )
    }

    opts = opts || {}

    if (opts.namespaceStr === undefined || opts.namespaceStr === null) {
      throw new Error(
        "Missing the required parameter 'opts.namespaceStr' when calling createNamespace"
      )
    }

    let postBody = {}
    if (opts.namespaceStr !== undefined && opts.namespaceStr !== null) {
      postBody['namespaceStr'] = opts.namespaceStr
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  streamcomputer/1.0.0'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call createNamespace with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/namespace',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  更新namespace
      * @param {Object} opts - parameters
      * @param {namespace} opts.namespaceStr
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param boolean status  更新成功标志
      */

  updateNamespace (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  updateNamespace"
      )
    }

    opts = opts || {}

    if (opts.namespaceStr === undefined || opts.namespaceStr === null) {
      throw new Error(
        "Missing the required parameter 'opts.namespaceStr' when calling updateNamespace"
      )
    }

    let postBody = {}
    if (opts.namespaceStr !== undefined && opts.namespaceStr !== null) {
      postBody['namespaceStr'] = opts.namespaceStr
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  streamcomputer/1.0.0'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call updateNamespace with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/namespace',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除namespace
      * @param {Object} opts - parameters
      * @param {integer} opts.namespaceId
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param boolean status  删除namespace成功标志
      */

  deleteNamespace (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  deleteNamespace"
      )
    }

    opts = opts || {}

    if (opts.namespaceId === undefined || opts.namespaceId === null) {
      throw new Error(
        "Missing the required parameter 'opts.namespaceId' when calling deleteNamespace"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.namespaceId !== undefined && opts.namespaceId !== null) {
      queryParams['namespaceId'] = opts.namespaceId
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  streamcomputer/1.0.0'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call deleteNamespace with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/namespace',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  查询指定输入
      * @param {Object} opts - parameters
      * @param {integer} opts.storageId - storageId
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param storage data
      */

  describeStorage (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  describeStorage"
      )
    }

    opts = opts || {}

    if (opts.storageId === undefined || opts.storageId === null) {
      throw new Error(
        "Missing the required parameter 'opts.storageId' when calling describeStorage"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.storageId !== undefined && opts.storageId !== null) {
      queryParams['storageId'] = opts.storageId
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  streamcomputer/1.0.0'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call describeStorage with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/storage',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  创建或者更新storage
      * @param {Object} opts - parameters
      * @param {storage} opts.storageStr - 创建或者更新storage的详情
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string message
      * @param boolean status
      */

  addOrUpdateStorage (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  addOrUpdateStorage"
      )
    }

    opts = opts || {}

    if (opts.storageStr === undefined || opts.storageStr === null) {
      throw new Error(
        "Missing the required parameter 'opts.storageStr' when calling addOrUpdateStorage"
      )
    }

    let postBody = {}
    if (opts.storageStr !== undefined && opts.storageStr !== null) {
      postBody['storageStr'] = opts.storageStr
    }

    let queryParams = {}

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  streamcomputer/1.0.0'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call addOrUpdateStorage with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/storage',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  删除指定输入
      * @param {Object} opts - parameters
      * @param {integer} opts.storageId - storageId
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param string message
      */

  deleteStorage (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  deleteStorage"
      )
    }

    opts = opts || {}

    if (opts.storageId === undefined || opts.storageId === null) {
      throw new Error(
        "Missing the required parameter 'opts.storageId' when calling deleteStorage"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.storageId !== undefined && opts.storageId !== null) {
      queryParams['storageId'] = opts.storageId
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  streamcomputer/1.0.0'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call deleteStorage with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/storage',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  创建或者更新storage
      * @param {Object} opts - parameters
      * @param {string} opts.storageType - storage类型
      * @param {string} opts.namespaceId - namespaceId
      * @param {string} regionId - ID of the region
      * @param {string} callback - callback
      @return {Object} result
      * @param storage storageList
      */

  getStorageList (opts, regionId = this.config.regionId, callback) {
    if (typeof regionId === 'function') {
      callback = regionId
      regionId = this.config.regionId
    }

    if (regionId === undefined || regionId === null) {
      throw new Error(
        "Missing the required parameter 'regionId' when calling  getStorageList"
      )
    }

    opts = opts || {}

    if (opts.storageType === undefined || opts.storageType === null) {
      throw new Error(
        "Missing the required parameter 'opts.storageType' when calling getStorageList"
      )
    }
    if (opts.namespaceId === undefined || opts.namespaceId === null) {
      throw new Error(
        "Missing the required parameter 'opts.namespaceId' when calling getStorageList"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.storageType !== undefined && opts.storageType !== null) {
      queryParams['storageType'] = opts.storageType
    }
    if (opts.namespaceId !== undefined && opts.namespaceId !== null) {
      queryParams['namespaceId'] = opts.namespaceId
    }

    let pathParams = {
      regionId: regionId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  streamcomputer/1.0.0'
    }

    let formParams = {}

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    let returnType = null

    this.config.logger(
      `call getStorageList with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = this.makeRequest(
      '/regions/{regionId}/storageList',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback) {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback) {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }
}
module.exports = JDCloud.STREAMCOMPUTER
