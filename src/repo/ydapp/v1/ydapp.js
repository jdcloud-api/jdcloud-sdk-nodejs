/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 用户应用分组
 *
 *
 * OpenAPI spec version: 2.0.0
 * Contact:
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

require('../../../lib/node_loader')
var JDCloud = require('../../../lib/core')
var Service = JDCloud.Service
var serviceId = 'ydapp'
Service._services[serviceId] = true

/**
 * ydapp service.
 * @version 1.0.0
 */

class YDAPP extends Service {
  constructor (options = {}) {
    options._defaultEndpoint = {}
    options._defaultEndpoint.protocol =
      options._defaultEndpoint.protocol || 'https'
    options._defaultEndpoint.host =
      options._defaultEndpoint.host || 'ydapp.jdcloud-api.com'
    options.basePath = '/2.0.0' // 默认要设为空""
    super(serviceId, options)
  }

  /**
      *  分页获取应用信息列表
      * @param {Object} opts - parameters
      * @param {number} [opts.pageNum] - 页码，默认为1  optional
      * @param {number} [opts.pageSize] - 每页数量，参数范围：10-100，默认20  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param app data
      * @param number totalCount  本次查询可匹配到的总记录数，使用者需要结合 pageNumber 和 pageSize 计算是否可以继续分页。
      */

  describeApps (opts, callback) {
    opts = opts || {}

    let postBody = null
    let queryParams = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      queryParams['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }

    let pathParams = {
      regionId: 'jdcloud'
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  ydapp/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeApps with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/apps',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据镜像摘要删除指定的镜像
      * @param {Object} opts - parameters
      * @param {string} opts.appId - 应用ID，E.g.，app-123456789
      * @param {string} opts.imageDigest - 镜像摘要，从 customImages 接口返回参数 imageDigest 获取该值，E.g.，sha256:e5785cb0c62436fd7aaa95354a056f1e9db97a
      * @param {string} callback - callback
      @return {Object} result
      * @param boolean success  操作结果(true-成功, false-失败)
      */

  deleteCustomImage (opts, callback) {
    opts = opts || {}

    if (opts.appId === undefined || opts.appId === null) {
      throw new Error(
        "Missing the required parameter 'opts.appId' when calling deleteCustomImage"
      )
    }
    if (opts.imageDigest === undefined || opts.imageDigest === null) {
      throw new Error(
        "Missing the required parameter 'opts.imageDigest' when calling deleteCustomImage"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      appId: opts.appId,
      imageDigest: opts.imageDigest
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  ydapp/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deleteCustomImage with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/app/{appId}/customImage/{imageDigest}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  支持分页查询和版本过滤的镜像列表获取
      * @param {Object} opts - parameters
      * @param {string} opts.appId - 应用ID，E.g.，app-123456789
      * @param {integer} [opts.pageNum] - 页码，E.g.，6  optional
      * @param {integer} [opts.pageSize] - 每页数量(10-100)，E.g.，20  optional
      * @param {string} [opts.version] - 镜像版本，E.g.，busybox-v1.0.0  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param imageDetail imageDetails
      * @param string repoUri  镜像仓库URI，E.g.，registry.jdcloud.com/repo-name
      * @param number totalCount  总镜像数量，E.g.，15
      */

  describeCustomImages (opts, callback) {
    opts = opts || {}

    if (opts.appId === undefined || opts.appId === null) {
      throw new Error(
        "Missing the required parameter 'opts.appId' when calling describeCustomImages"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      queryParams['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }
    if (opts.version !== undefined && opts.version !== null) {
      queryParams['version'] = opts.version
    }

    let pathParams = {
      regionId: 'jdcloud',
      appId: opts.appId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  ydapp/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeCustomImages with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/app/{appId}/customImages',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  &lt;p&gt;申请6小时有效期的令牌。 使用&lt;code&gt;docker&lt;/code&gt; CLI push和pull镜像。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;authorizationToken&lt;/code&gt;为每个registry返回一个base64编码的字符串，解码后&lt;code&gt;docker login&lt;/code&gt;命令
可完成指定registry的鉴权。&lt;/p&gt;

      * @param {Object} opts - parameters
      * @param {string} opts.appId - 可以在应用列表页面获取对应应用的appId，格式为：app-xxxxxxxxxxxx

      * @param {boolean} [opts.renew] - 用户不同应用间自定义镜像仓库使用相同注册表，注册表token全局唯一，renew 会吊销之前获取的token，请审慎使用，E.g.，true or false or null, default is false
  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param string authorizationToken  token - 令牌base64编码后的字符串，E.g.，eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

      * @param string expiresAt  令牌过期时间

      * @param string loginCmdLine  docker login 命令base64编码后的字符串，E.g.，docker login registry.jdcloud.com -u username -p password

      * @param string registryUri  镜像注册表地址，E.g.，registry.jdcloud.com

      * @param string username  镜像注册表登陆用户名，E.g.，registry-user

      */

  describeCustomRegistryToken (opts, callback) {
    opts = opts || {}

    if (opts.appId === undefined || opts.appId === null) {
      throw new Error(
        "Missing the required parameter 'opts.appId' when calling describeCustomRegistryToken"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.renew !== undefined && opts.renew !== null) {
      queryParams['renew'] = opts.renew
    }

    let pathParams = {
      regionId: 'jdcloud',
      appId: opts.appId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  ydapp/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeCustomRegistryToken with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/app/{appId}:customRegistryToken',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  创建新的部署任务，支持自定义镜像和标准镜像的部署
      * @param {Object} opts - parameters
      * @param {string} opts.appId - 应用ID，E.g.，app-123456
      * @param {string} opts.groupId - 分组ID，E.g.，group-123456
      * @param {integer} [opts.concurrency] - 最大停止服务容器, 按照设置比例停止旧版本容器，用于保证可用容器比例，比例越高升级的越快。范围：0-100，，E.g.，10  optional
      * @param {string} [opts.imageType] - 镜像类型，可以为空，默认为custom，可选属性为：standard、custom，E.g.，custom  optional
      * @param {string} [opts.imageVersion] - 镜像版本信息，不能为空，镜像列表接口返回参数 imageDetail 的属性 imageTags 的值，E.g.，v1.0.0  optional
      * @param {integer} [opts.maxSurge] - 可额外创建容器, 按照设置比例创建新版本容器用于旧版本容器，比例越高升级的越快，临时占用的集群资源越高。范围：0-100，E.g.，10  optional
      * @param {integer} [opts.podCount] - 部署的容器数量，E.g.，3  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param integer id  部署任务ID，E.g.，9527
      * @param string log  任务日志，E.g.，the associated deployment  has been deleted
      * @param string status  部署状态，init-初始化; deploying-部署中; rollbacking-回滚中; finish-部署成功; error-部署失败; cancel-部署已取消，E.g.，finish
      * @param integer successCount  部署成功个数，E.g.，2
      */

  deploy (opts, callback) {
    opts = opts || {}

    if (opts.appId === undefined || opts.appId === null) {
      throw new Error(
        "Missing the required parameter 'opts.appId' when calling deploy"
      )
    }
    if (opts.groupId === undefined || opts.groupId === null) {
      throw new Error(
        "Missing the required parameter 'opts.groupId' when calling deploy"
      )
    }

    let postBody = {}
    if (opts.concurrency !== undefined && opts.concurrency !== null) {
      postBody['concurrency'] = opts.concurrency
    }
    if (opts.imageType !== undefined && opts.imageType !== null) {
      postBody['imageType'] = opts.imageType
    }
    if (opts.imageVersion !== undefined && opts.imageVersion !== null) {
      postBody['imageVersion'] = opts.imageVersion
    }
    if (opts.maxSurge !== undefined && opts.maxSurge !== null) {
      postBody['maxSurge'] = opts.maxSurge
    }
    if (opts.podCount !== undefined && opts.podCount !== null) {
      postBody['podCount'] = opts.podCount
    }

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      appId: opts.appId,
      groupId: opts.groupId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  ydapp/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call deploy with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/app/{appId}/group/{groupId}/deploy',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  根据应用ID、分组ID和部署ID查询指定的部署任务详情
      * @param {Object} opts - parameters
      * @param {string} opts.appId - 应用ID，E.g.，app-123456
      * @param {integer} opts.deployId - 部署ID，E.g.，9527
      * @param {string} opts.groupId - 分组ID，E.g.，group-123456
      * @param {string} callback - callback
      @return {Object} result
      * @param integer id  部署任务ID，E.g.，9527
      * @param string log  任务日志，E.g.，the associated deployment  has been deleted
      * @param string status  部署状态，init-初始化; deploying-部署中; rollbacking-回滚中; finish-部署成功; error-部署失败; cancel-部署已取消，E.g.，finish
      * @param integer successCount  部署成功个数，E.g.，2
      */

  describeDeployTask (opts, callback) {
    opts = opts || {}

    if (opts.appId === undefined || opts.appId === null) {
      throw new Error(
        "Missing the required parameter 'opts.appId' when calling describeDeployTask"
      )
    }
    if (opts.deployId === undefined || opts.deployId === null) {
      throw new Error(
        "Missing the required parameter 'opts.deployId' when calling describeDeployTask"
      )
    }
    if (opts.groupId === undefined || opts.groupId === null) {
      throw new Error(
        "Missing the required parameter 'opts.groupId' when calling describeDeployTask"
      )
    }

    let postBody = null
    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      appId: opts.appId,
      deployId: opts.deployId,
      groupId: opts.groupId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  ydapp/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeDeployTask with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/app/{appId}/group/{groupId}/deploy/{deployId}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  停止指定的部署任务执行
      * @param {Object} opts - parameters
      * @param {string} opts.appId - 应用ID，E.g.，app-123456
      * @param {string} opts.groupId - 分组ID，E.g.，group-123456
      * @param {integer} opts.deployId - 部署ID，E.g.，9527
      * @param {string} callback - callback
      @return {Object} result
      * @param boolean success  操作结果(true-成功, false-失败)
      */

  stopDeployTask (opts, callback) {
    opts = opts || {}

    if (opts.appId === undefined || opts.appId === null) {
      throw new Error(
        "Missing the required parameter 'opts.appId' when calling stopDeployTask"
      )
    }
    if (opts.groupId === undefined || opts.groupId === null) {
      throw new Error(
        "Missing the required parameter 'opts.groupId' when calling stopDeployTask"
      )
    }
    if (opts.deployId === undefined || opts.deployId === null) {
      throw new Error(
        "Missing the required parameter 'opts.deployId' when calling stopDeployTask"
      )
    }

    let postBody = {}

    let queryParams = {}

    let pathParams = {
      regionId: 'jdcloud',
      appId: opts.appId,
      groupId: opts.groupId,
      deployId: opts.deployId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  ydapp/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call stopDeployTask with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/app/{appId}/group/{groupId}/deploy/{deployId}:stop',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }

  /**
      *  分页获取指定应用下的应用组列表
      * @param {Object} opts - parameters
      * @param {string} opts.appId - 应用ID
      * @param {integer} [opts.pageNum] - 页码  optional
      * @param {integer} [opts.pageSize] - 每页数量(10-100)  optional
      * @param {string} callback - callback
      @return {Object} result
      * @param group data
      * @param number totalCount  本次查询可匹配到的总记录数，使用者需要结合 pageNumber 和 pageSize 计算是否可以继续分页。
      */

  describeGroups (opts, callback) {
    opts = opts || {}

    if (opts.appId === undefined || opts.appId === null) {
      throw new Error(
        "Missing the required parameter 'opts.appId' when calling describeGroups"
      )
    }

    let postBody = null
    let queryParams = {}
    if (opts.pageNum !== undefined && opts.pageNum !== null) {
      queryParams['pageNum'] = opts.pageNum
    }
    if (opts.pageSize !== undefined && opts.pageSize !== null) {
      queryParams['pageSize'] = opts.pageSize
    }

    let pathParams = {
      regionId: 'jdcloud',
      appId: opts.appId
    }

    let headerParams = {
      'User-Agent': 'JdcloudSdkNode/1.0.0  ydapp/1.0.0'
    }

    let contentTypes = ['application/json']
    let accepts = ['application/json']

    // 扩展自定义头
    if (opts['x-extra-header']) {
      for (let extraHeader in opts['x-extra-header']) {
        headerParams[extraHeader] = opts['x-extra-header'][extraHeader]
      }

      if (Array.isArray(opts['x-extra-header']['content-type'])) {
        contentTypes = opts['x-extra-header']['content-type']
      } else if (typeof opts['x-extra-header']['content-type'] === 'string') {
        contentTypes = opts['x-extra-header']['content-type'].split(',')
      }

      if (Array.isArray(opts['x-extra-header']['accept'])) {
        accepts = opts['x-extra-header']['accept']
      } else if (typeof opts['x-extra-header']['accept'] === 'string') {
        accepts = opts['x-extra-header']['accept'].split(',')
      }
    }

    let formParams = {}

    let returnType = null

    this.config.logger(
      `call describeGroups with params:\npathParams:${JSON.stringify(
        pathParams
      )},\nqueryParams:${JSON.stringify(
        queryParams
      )}, \nheaderParams:${JSON.stringify(
        headerParams
      )}, \nformParams:${JSON.stringify(
        formParams
      )}, \npostBody:${JSON.stringify(postBody)}`,
      'DEBUG'
    )

    let request = super.makeRequest(
      '/app/{appId}/groups',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      contentTypes,
      accepts,
      returnType,
      callback
    )

    return request.then(
      function (result) {
        if (callback && typeof callback === 'function') {
          return callback(null, result)
        }
        return result
      },
      function (error) {
        if (callback && typeof callback === 'function') {
          return callback(error)
        }
        return Promise.reject(error)
      }
    )
  }
}
module.exports = YDAPP
